
MEASUREMENT_ECU_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00003c4a  00003cde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  0080009c  0080009c  00003d1a  2**0
                  ALLOC
  3 .stab         00003d14  00000000  00000000  00003d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000028f0  00000000  00000000  00007a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c219  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d104  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000deb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e014  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e2a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ea6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__vector_4>
      14:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__vector_5>
      18:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__vector_6>
      1c:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__vector_7>
      20:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__vector_8>
      24:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <__vector_9>
      28:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__vector_10>
      2c:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__vector_11>
      30:	0c 94 25 10 	jmp	0x204a	; 0x204a <__vector_12>
      34:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__vector_13>
      38:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__vector_14>
      3c:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3b       	cpi	r26, 0xBF	; 191
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <main>
      8a:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e8       	ldi	r26, 0x8A	; 138
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e8       	ldi	r24, 0x8A	; 138
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d3 1d 	jmp	0x3ba6	; 0x3ba6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_init>:

/*
 * Description : A Function to Initialize the LCD Driver.
 */
void LCD_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1 << E) | (1 << RS) | (1 << RW);
     b4e:	aa e3       	ldi	r26, 0x3A	; 58
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8e 60       	ori	r24, 0x0E	; 14
     b5a:	8c 93       	st	X, r24
#if(DATA_BITS_MODE == 8)
	LCD_DATA_PORT_DIR = 0xFF;
	LCD_sendCommand(TWO_LINE_LCD_EIGHT_BIT_MODE);
#elif(DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT_DIR |= 0xF0;
     b5c:	aa e3       	ldi	r26, 0x3A	; 58
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ea e3       	ldi	r30, 0x3A	; 58
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 6f       	ori	r24, 0xF0	; 240
     b68:	8c 93       	st	X, r24
#else
	LCD_DATA_PORT_DIR |= 0x0F;
#endif
	LCD_sendCommand(FOUR_BITS_DATA_MODE_ACTIVATED);
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_FOUR_BIT_MODE);
     b70:	88 e2       	ldi	r24, 0x28	; 40
     b72:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
#endif
	LCD_sendCommand(CURSOR_OFF);
     b76:	8c e0       	ldi	r24, 0x0C	; 12
     b78:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND);
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
}
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	08 95       	ret

00000b88 <LCD_sendCommand>:

/*
 * Description : A Function to send a Command.
 */
void LCD_sendCommand(uint8_t command)
{
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	c3 56       	subi	r28, 0x63	; 99
     b96:	d0 40       	sbci	r29, 0x00	; 0
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	fe 01       	movw	r30, r28
     ba4:	ed 59       	subi	r30, 0x9D	; 157
     ba6:	ff 4f       	sbci	r31, 0xFF	; 255
     ba8:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT, RS);
     baa:	ab e3       	ldi	r26, 0x3B	; 59
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	eb e3       	ldi	r30, 0x3B	; 59
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	8d 7f       	andi	r24, 0xFD	; 253
     bb6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);
     bb8:	ab e3       	ldi	r26, 0x3B	; 59
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	eb e3       	ldi	r30, 0x3B	; 59
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	8b 7f       	andi	r24, 0xFB	; 251
     bc4:	8c 93       	st	X, r24
     bc6:	fe 01       	movw	r30, r28
     bc8:	e1 5a       	subi	r30, 0xA1	; 161
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e8       	ldi	r26, 0x80	; 128
     bd2:	bf e3       	ldi	r27, 0x3F	; 63
     bd4:	80 83       	st	Z, r24
     bd6:	91 83       	std	Z+1, r25	; 0x01
     bd8:	a2 83       	std	Z+2, r26	; 0x02
     bda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bdc:	8e 01       	movw	r16, r28
     bde:	05 5a       	subi	r16, 0xA5	; 165
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
     be2:	fe 01       	movw	r30, r28
     be4:	e1 5a       	subi	r30, 0xA1	; 161
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	60 81       	ld	r22, Z
     bea:	71 81       	ldd	r23, Z+1	; 0x01
     bec:	82 81       	ldd	r24, Z+2	; 0x02
     bee:	93 81       	ldd	r25, Z+3	; 0x03
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	4a e7       	ldi	r20, 0x7A	; 122
     bf6:	55 e4       	ldi	r21, 0x45	; 69
     bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	f8 01       	movw	r30, r16
     c02:	80 83       	st	Z, r24
     c04:	91 83       	std	Z+1, r25	; 0x01
     c06:	a2 83       	std	Z+2, r26	; 0x02
     c08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c0a:	fe 01       	movw	r30, r28
     c0c:	e5 5a       	subi	r30, 0xA5	; 165
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	60 81       	ld	r22, Z
     c12:	71 81       	ldd	r23, Z+1	; 0x01
     c14:	82 81       	ldd	r24, Z+2	; 0x02
     c16:	93 81       	ldd	r25, Z+3	; 0x03
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e8       	ldi	r20, 0x80	; 128
     c1e:	5f e3       	ldi	r21, 0x3F	; 63
     c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c24:	88 23       	and	r24, r24
     c26:	44 f4       	brge	.+16     	; 0xc38 <LCD_sendCommand+0xb0>
		__ticks = 1;
     c28:	fe 01       	movw	r30, r28
     c2a:	e7 5a       	subi	r30, 0xA7	; 167
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	91 83       	std	Z+1, r25	; 0x01
     c34:	80 83       	st	Z, r24
     c36:	64 c0       	rjmp	.+200    	; 0xd00 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     c38:	fe 01       	movw	r30, r28
     c3a:	e5 5a       	subi	r30, 0xA5	; 165
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	60 81       	ld	r22, Z
     c40:	71 81       	ldd	r23, Z+1	; 0x01
     c42:	82 81       	ldd	r24, Z+2	; 0x02
     c44:	93 81       	ldd	r25, Z+3	; 0x03
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	3f ef       	ldi	r19, 0xFF	; 255
     c4a:	4f e7       	ldi	r20, 0x7F	; 127
     c4c:	57 e4       	ldi	r21, 0x47	; 71
     c4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c52:	18 16       	cp	r1, r24
     c54:	0c f0       	brlt	.+2      	; 0xc58 <LCD_sendCommand+0xd0>
     c56:	43 c0       	rjmp	.+134    	; 0xcde <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c58:	fe 01       	movw	r30, r28
     c5a:	e1 5a       	subi	r30, 0xA1	; 161
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	60 81       	ld	r22, Z
     c60:	71 81       	ldd	r23, Z+1	; 0x01
     c62:	82 81       	ldd	r24, Z+2	; 0x02
     c64:	93 81       	ldd	r25, Z+3	; 0x03
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e2       	ldi	r20, 0x20	; 32
     c6c:	51 e4       	ldi	r21, 0x41	; 65
     c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	8e 01       	movw	r16, r28
     c78:	07 5a       	subi	r16, 0xA7	; 167
     c7a:	1f 4f       	sbci	r17, 0xFF	; 255
     c7c:	bc 01       	movw	r22, r24
     c7e:	cd 01       	movw	r24, r26
     c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	f8 01       	movw	r30, r16
     c8a:	91 83       	std	Z+1, r25	; 0x01
     c8c:	80 83       	st	Z, r24
     c8e:	1f c0       	rjmp	.+62     	; 0xcce <LCD_sendCommand+0x146>
     c90:	fe 01       	movw	r30, r28
     c92:	e9 5a       	subi	r30, 0xA9	; 169
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	80 e9       	ldi	r24, 0x90	; 144
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c9e:	fe 01       	movw	r30, r28
     ca0:	e9 5a       	subi	r30, 0xA9	; 169
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <LCD_sendCommand+0x120>
     cac:	fe 01       	movw	r30, r28
     cae:	e9 5a       	subi	r30, 0xA9	; 169
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb6:	de 01       	movw	r26, r28
     cb8:	a7 5a       	subi	r26, 0xA7	; 167
     cba:	bf 4f       	sbci	r27, 0xFF	; 255
     cbc:	fe 01       	movw	r30, r28
     cbe:	e7 5a       	subi	r30, 0xA7	; 167
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	11 96       	adiw	r26, 0x01	; 1
     cca:	9c 93       	st	X, r25
     ccc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cce:	fe 01       	movw	r30, r28
     cd0:	e7 5a       	subi	r30, 0xA7	; 167
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	80 81       	ld	r24, Z
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	d1 f6       	brne	.-76     	; 0xc90 <LCD_sendCommand+0x108>
     cdc:	27 c0       	rjmp	.+78     	; 0xd2c <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cde:	8e 01       	movw	r16, r28
     ce0:	07 5a       	subi	r16, 0xA7	; 167
     ce2:	1f 4f       	sbci	r17, 0xFF	; 255
     ce4:	fe 01       	movw	r30, r28
     ce6:	e5 5a       	subi	r30, 0xA5	; 165
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	60 81       	ld	r22, Z
     cec:	71 81       	ldd	r23, Z+1	; 0x01
     cee:	82 81       	ldd	r24, Z+2	; 0x02
     cf0:	93 81       	ldd	r25, Z+3	; 0x03
     cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	f8 01       	movw	r30, r16
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	80 83       	st	Z, r24
     d00:	de 01       	movw	r26, r28
     d02:	ab 5a       	subi	r26, 0xAB	; 171
     d04:	bf 4f       	sbci	r27, 0xFF	; 255
     d06:	fe 01       	movw	r30, r28
     d08:	e7 5a       	subi	r30, 0xA7	; 167
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	80 81       	ld	r24, Z
     d0e:	91 81       	ldd	r25, Z+1	; 0x01
     d10:	8d 93       	st	X+, r24
     d12:	9c 93       	st	X, r25
     d14:	fe 01       	movw	r30, r28
     d16:	eb 5a       	subi	r30, 0xAB	; 171
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	80 81       	ld	r24, Z
     d1c:	91 81       	ldd	r25, Z+1	; 0x01
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <LCD_sendCommand+0x196>
     d22:	fe 01       	movw	r30, r28
     d24:	eb 5a       	subi	r30, 0xAB	; 171
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E);
     d2c:	ab e3       	ldi	r26, 0x3B	; 59
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	eb e3       	ldi	r30, 0x3B	; 59
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	8c 93       	st	X, r24
     d3a:	fe 01       	movw	r30, r28
     d3c:	ef 5a       	subi	r30, 0xAF	; 175
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e8       	ldi	r26, 0x80	; 128
     d46:	bf e3       	ldi	r27, 0x3F	; 63
     d48:	80 83       	st	Z, r24
     d4a:	91 83       	std	Z+1, r25	; 0x01
     d4c:	a2 83       	std	Z+2, r26	; 0x02
     d4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d50:	8e 01       	movw	r16, r28
     d52:	03 5b       	subi	r16, 0xB3	; 179
     d54:	1f 4f       	sbci	r17, 0xFF	; 255
     d56:	fe 01       	movw	r30, r28
     d58:	ef 5a       	subi	r30, 0xAF	; 175
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	82 81       	ldd	r24, Z+2	; 0x02
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	4a e7       	ldi	r20, 0x7A	; 122
     d6a:	55 e4       	ldi	r21, 0x45	; 69
     d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	f8 01       	movw	r30, r16
     d76:	80 83       	st	Z, r24
     d78:	91 83       	std	Z+1, r25	; 0x01
     d7a:	a2 83       	std	Z+2, r26	; 0x02
     d7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d7e:	fe 01       	movw	r30, r28
     d80:	e3 5b       	subi	r30, 0xB3	; 179
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e8       	ldi	r20, 0x80	; 128
     d92:	5f e3       	ldi	r21, 0x3F	; 63
     d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d98:	88 23       	and	r24, r24
     d9a:	44 f4       	brge	.+16     	; 0xdac <LCD_sendCommand+0x224>
		__ticks = 1;
     d9c:	fe 01       	movw	r30, r28
     d9e:	e5 5b       	subi	r30, 0xB5	; 181
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	91 83       	std	Z+1, r25	; 0x01
     da8:	80 83       	st	Z, r24
     daa:	64 c0       	rjmp	.+200    	; 0xe74 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
     dac:	fe 01       	movw	r30, r28
     dae:	e3 5b       	subi	r30, 0xB3	; 179
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	60 81       	ld	r22, Z
     db4:	71 81       	ldd	r23, Z+1	; 0x01
     db6:	82 81       	ldd	r24, Z+2	; 0x02
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	3f ef       	ldi	r19, 0xFF	; 255
     dbe:	4f e7       	ldi	r20, 0x7F	; 127
     dc0:	57 e4       	ldi	r21, 0x47	; 71
     dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc6:	18 16       	cp	r1, r24
     dc8:	0c f0       	brlt	.+2      	; 0xdcc <LCD_sendCommand+0x244>
     dca:	43 c0       	rjmp	.+134    	; 0xe52 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dcc:	fe 01       	movw	r30, r28
     dce:	ef 5a       	subi	r30, 0xAF	; 175
     dd0:	ff 4f       	sbci	r31, 0xFF	; 255
     dd2:	60 81       	ld	r22, Z
     dd4:	71 81       	ldd	r23, Z+1	; 0x01
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e2       	ldi	r20, 0x20	; 32
     de0:	51 e4       	ldi	r21, 0x41	; 65
     de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	8e 01       	movw	r16, r28
     dec:	05 5b       	subi	r16, 0xB5	; 181
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	bc 01       	movw	r22, r24
     df2:	cd 01       	movw	r24, r26
     df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	f8 01       	movw	r30, r16
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
     e02:	1f c0       	rjmp	.+62     	; 0xe42 <LCD_sendCommand+0x2ba>
     e04:	fe 01       	movw	r30, r28
     e06:	e7 5b       	subi	r30, 0xB7	; 183
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	80 e9       	ldi	r24, 0x90	; 144
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
     e12:	fe 01       	movw	r30, r28
     e14:	e7 5b       	subi	r30, 0xB7	; 183
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <LCD_sendCommand+0x294>
     e20:	fe 01       	movw	r30, r28
     e22:	e7 5b       	subi	r30, 0xB7	; 183
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	91 83       	std	Z+1, r25	; 0x01
     e28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2a:	de 01       	movw	r26, r28
     e2c:	a5 5b       	subi	r26, 0xB5	; 181
     e2e:	bf 4f       	sbci	r27, 0xFF	; 255
     e30:	fe 01       	movw	r30, r28
     e32:	e5 5b       	subi	r30, 0xB5	; 181
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	11 96       	adiw	r26, 0x01	; 1
     e3e:	9c 93       	st	X, r25
     e40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e42:	fe 01       	movw	r30, r28
     e44:	e5 5b       	subi	r30, 0xB5	; 181
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	d1 f6       	brne	.-76     	; 0xe04 <LCD_sendCommand+0x27c>
     e50:	27 c0       	rjmp	.+78     	; 0xea0 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e52:	8e 01       	movw	r16, r28
     e54:	05 5b       	subi	r16, 0xB5	; 181
     e56:	1f 4f       	sbci	r17, 0xFF	; 255
     e58:	fe 01       	movw	r30, r28
     e5a:	e3 5b       	subi	r30, 0xB3	; 179
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	f8 01       	movw	r30, r16
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	80 83       	st	Z, r24
     e74:	de 01       	movw	r26, r28
     e76:	a9 5b       	subi	r26, 0xB9	; 185
     e78:	bf 4f       	sbci	r27, 0xFF	; 255
     e7a:	fe 01       	movw	r30, r28
     e7c:	e5 5b       	subi	r30, 0xB5	; 181
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	8d 93       	st	X+, r24
     e86:	9c 93       	st	X, r25
     e88:	fe 01       	movw	r30, r28
     e8a:	e9 5b       	subi	r30, 0xB9	; 185
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	80 81       	ld	r24, Z
     e90:	91 81       	ldd	r25, Z+1	; 0x01
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <LCD_sendCommand+0x30a>
     e96:	fe 01       	movw	r30, r28
     e98:	e9 5b       	subi	r30, 0xB9	; 185
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	91 83       	std	Z+1, r25	; 0x01
     e9e:	80 83       	st	Z, r24
	_delay_ms(1);
#if(DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command;
#elif(DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
     ea0:	ab e3       	ldi	r26, 0x3B	; 59
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	eb e3       	ldi	r30, 0x3B	; 59
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	98 2f       	mov	r25, r24
     eac:	9f 70       	andi	r25, 0x0F	; 15
     eae:	fe 01       	movw	r30, r28
     eb0:	ed 59       	subi	r30, 0x9D	; 157
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	80 81       	ld	r24, Z
     eb6:	80 7f       	andi	r24, 0xF0	; 240
     eb8:	89 2b       	or	r24, r25
     eba:	8c 93       	st	X, r24
     ebc:	fe 01       	movw	r30, r28
     ebe:	ed 5b       	subi	r30, 0xBD	; 189
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	a0 e8       	ldi	r26, 0x80	; 128
     ec8:	bf e3       	ldi	r27, 0x3F	; 63
     eca:	80 83       	st	Z, r24
     ecc:	91 83       	std	Z+1, r25	; 0x01
     ece:	a2 83       	std	Z+2, r26	; 0x02
     ed0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed2:	8e 01       	movw	r16, r28
     ed4:	01 5c       	subi	r16, 0xC1	; 193
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	fe 01       	movw	r30, r28
     eda:	ed 5b       	subi	r30, 0xBD	; 189
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	60 81       	ld	r22, Z
     ee0:	71 81       	ldd	r23, Z+1	; 0x01
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	4a e7       	ldi	r20, 0x7A	; 122
     eec:	55 e4       	ldi	r21, 0x45	; 69
     eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	f8 01       	movw	r30, r16
     ef8:	80 83       	st	Z, r24
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	a2 83       	std	Z+2, r26	; 0x02
     efe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f00:	fe 01       	movw	r30, r28
     f02:	ff 96       	adiw	r30, 0x3f	; 63
     f04:	60 81       	ld	r22, Z
     f06:	71 81       	ldd	r23, Z+1	; 0x01
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	93 81       	ldd	r25, Z+3	; 0x03
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e8       	ldi	r20, 0x80	; 128
     f12:	5f e3       	ldi	r21, 0x3F	; 63
     f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f18:	88 23       	and	r24, r24
     f1a:	2c f4       	brge	.+10     	; 0xf26 <LCD_sendCommand+0x39e>
		__ticks = 1;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	9e af       	std	Y+62, r25	; 0x3e
     f22:	8d af       	std	Y+61, r24	; 0x3d
     f24:	46 c0       	rjmp	.+140    	; 0xfb2 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
     f26:	fe 01       	movw	r30, r28
     f28:	ff 96       	adiw	r30, 0x3f	; 63
     f2a:	60 81       	ld	r22, Z
     f2c:	71 81       	ldd	r23, Z+1	; 0x01
     f2e:	82 81       	ldd	r24, Z+2	; 0x02
     f30:	93 81       	ldd	r25, Z+3	; 0x03
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	4f e7       	ldi	r20, 0x7F	; 127
     f38:	57 e4       	ldi	r21, 0x47	; 71
     f3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f3e:	18 16       	cp	r1, r24
     f40:	64 f5       	brge	.+88     	; 0xf9a <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f42:	fe 01       	movw	r30, r28
     f44:	ed 5b       	subi	r30, 0xBD	; 189
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	82 81       	ldd	r24, Z+2	; 0x02
     f4e:	93 81       	ldd	r25, Z+3	; 0x03
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e2       	ldi	r20, 0x20	; 32
     f56:	51 e4       	ldi	r21, 0x41	; 65
     f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	bc 01       	movw	r22, r24
     f62:	cd 01       	movw	r24, r26
     f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	9e af       	std	Y+62, r25	; 0x3e
     f6e:	8d af       	std	Y+61, r24	; 0x3d
     f70:	0f c0       	rjmp	.+30     	; 0xf90 <LCD_sendCommand+0x408>
     f72:	80 e9       	ldi	r24, 0x90	; 144
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	9c af       	std	Y+60, r25	; 0x3c
     f78:	8b af       	std	Y+59, r24	; 0x3b
     f7a:	8b ad       	ldd	r24, Y+59	; 0x3b
     f7c:	9c ad       	ldd	r25, Y+60	; 0x3c
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <LCD_sendCommand+0x3f6>
     f82:	9c af       	std	Y+60, r25	; 0x3c
     f84:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f86:	8d ad       	ldd	r24, Y+61	; 0x3d
     f88:	9e ad       	ldd	r25, Y+62	; 0x3e
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	9e af       	std	Y+62, r25	; 0x3e
     f8e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f90:	8d ad       	ldd	r24, Y+61	; 0x3d
     f92:	9e ad       	ldd	r25, Y+62	; 0x3e
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	69 f7       	brne	.-38     	; 0xf72 <LCD_sendCommand+0x3ea>
     f98:	16 c0       	rjmp	.+44     	; 0xfc6 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9a:	fe 01       	movw	r30, r28
     f9c:	ff 96       	adiw	r30, 0x3f	; 63
     f9e:	60 81       	ld	r22, Z
     fa0:	71 81       	ldd	r23, Z+1	; 0x01
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	93 81       	ldd	r25, Z+3	; 0x03
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9e af       	std	Y+62, r25	; 0x3e
     fb0:	8d af       	std	Y+61, r24	; 0x3d
     fb2:	8d ad       	ldd	r24, Y+61	; 0x3d
     fb4:	9e ad       	ldd	r25, Y+62	; 0x3e
     fb6:	9a af       	std	Y+58, r25	; 0x3a
     fb8:	89 af       	std	Y+57, r24	; 0x39
     fba:	89 ad       	ldd	r24, Y+57	; 0x39
     fbc:	9a ad       	ldd	r25, Y+58	; 0x3a
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <LCD_sendCommand+0x436>
     fc2:	9a af       	std	Y+58, r25	; 0x3a
     fc4:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, E);
     fc6:	ab e3       	ldi	r26, 0x3B	; 59
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	eb e3       	ldi	r30, 0x3B	; 59
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	87 7f       	andi	r24, 0xF7	; 247
     fd2:	8c 93       	st	X, r24
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	a0 e8       	ldi	r26, 0x80	; 128
     fda:	bf e3       	ldi	r27, 0x3F	; 63
     fdc:	8d ab       	std	Y+53, r24	; 0x35
     fde:	9e ab       	std	Y+54, r25	; 0x36
     fe0:	af ab       	std	Y+55, r26	; 0x37
     fe2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe4:	6d a9       	ldd	r22, Y+53	; 0x35
     fe6:	7e a9       	ldd	r23, Y+54	; 0x36
     fe8:	8f a9       	ldd	r24, Y+55	; 0x37
     fea:	98 ad       	ldd	r25, Y+56	; 0x38
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	4a e7       	ldi	r20, 0x7A	; 122
     ff2:	55 e4       	ldi	r21, 0x45	; 69
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	89 ab       	std	Y+49, r24	; 0x31
     ffe:	9a ab       	std	Y+50, r25	; 0x32
    1000:	ab ab       	std	Y+51, r26	; 0x33
    1002:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1004:	69 a9       	ldd	r22, Y+49	; 0x31
    1006:	7a a9       	ldd	r23, Y+50	; 0x32
    1008:	8b a9       	ldd	r24, Y+51	; 0x33
    100a:	9c a9       	ldd	r25, Y+52	; 0x34
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	5f e3       	ldi	r21, 0x3F	; 63
    1014:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1018:	88 23       	and	r24, r24
    101a:	2c f4       	brge	.+10     	; 0x1026 <LCD_sendCommand+0x49e>
		__ticks = 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	98 ab       	std	Y+48, r25	; 0x30
    1022:	8f a7       	std	Y+47, r24	; 0x2f
    1024:	3f c0       	rjmp	.+126    	; 0x10a4 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1026:	69 a9       	ldd	r22, Y+49	; 0x31
    1028:	7a a9       	ldd	r23, Y+50	; 0x32
    102a:	8b a9       	ldd	r24, Y+51	; 0x33
    102c:	9c a9       	ldd	r25, Y+52	; 0x34
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	3f ef       	ldi	r19, 0xFF	; 255
    1032:	4f e7       	ldi	r20, 0x7F	; 127
    1034:	57 e4       	ldi	r21, 0x47	; 71
    1036:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    103a:	18 16       	cp	r1, r24
    103c:	4c f5       	brge	.+82     	; 0x1090 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103e:	6d a9       	ldd	r22, Y+53	; 0x35
    1040:	7e a9       	ldd	r23, Y+54	; 0x36
    1042:	8f a9       	ldd	r24, Y+55	; 0x37
    1044:	98 ad       	ldd	r25, Y+56	; 0x38
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e2       	ldi	r20, 0x20	; 32
    104c:	51 e4       	ldi	r21, 0x41	; 65
    104e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	98 ab       	std	Y+48, r25	; 0x30
    1064:	8f a7       	std	Y+47, r24	; 0x2f
    1066:	0f c0       	rjmp	.+30     	; 0x1086 <LCD_sendCommand+0x4fe>
    1068:	80 e9       	ldi	r24, 0x90	; 144
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	9e a7       	std	Y+46, r25	; 0x2e
    106e:	8d a7       	std	Y+45, r24	; 0x2d
    1070:	8d a5       	ldd	r24, Y+45	; 0x2d
    1072:	9e a5       	ldd	r25, Y+46	; 0x2e
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <LCD_sendCommand+0x4ec>
    1078:	9e a7       	std	Y+46, r25	; 0x2e
    107a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107c:	8f a5       	ldd	r24, Y+47	; 0x2f
    107e:	98 a9       	ldd	r25, Y+48	; 0x30
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	98 ab       	std	Y+48, r25	; 0x30
    1084:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1086:	8f a5       	ldd	r24, Y+47	; 0x2f
    1088:	98 a9       	ldd	r25, Y+48	; 0x30
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	69 f7       	brne	.-38     	; 0x1068 <LCD_sendCommand+0x4e0>
    108e:	14 c0       	rjmp	.+40     	; 0x10b8 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1090:	69 a9       	ldd	r22, Y+49	; 0x31
    1092:	7a a9       	ldd	r23, Y+50	; 0x32
    1094:	8b a9       	ldd	r24, Y+51	; 0x33
    1096:	9c a9       	ldd	r25, Y+52	; 0x34
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	98 ab       	std	Y+48, r25	; 0x30
    10a2:	8f a7       	std	Y+47, r24	; 0x2f
    10a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    10a6:	98 a9       	ldd	r25, Y+48	; 0x30
    10a8:	9c a7       	std	Y+44, r25	; 0x2c
    10aa:	8b a7       	std	Y+43, r24	; 0x2b
    10ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    10ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <LCD_sendCommand+0x528>
    10b4:	9c a7       	std	Y+44, r25	; 0x2c
    10b6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E);
    10b8:	ab e3       	ldi	r26, 0x3B	; 59
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	eb e3       	ldi	r30, 0x3B	; 59
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	88 60       	ori	r24, 0x08	; 8
    10c4:	8c 93       	st	X, r24
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a0 e8       	ldi	r26, 0x80	; 128
    10cc:	bf e3       	ldi	r27, 0x3F	; 63
    10ce:	8f a3       	std	Y+39, r24	; 0x27
    10d0:	98 a7       	std	Y+40, r25	; 0x28
    10d2:	a9 a7       	std	Y+41, r26	; 0x29
    10d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d6:	6f a1       	ldd	r22, Y+39	; 0x27
    10d8:	78 a5       	ldd	r23, Y+40	; 0x28
    10da:	89 a5       	ldd	r24, Y+41	; 0x29
    10dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a e7       	ldi	r20, 0x7A	; 122
    10e4:	55 e4       	ldi	r21, 0x45	; 69
    10e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	8b a3       	std	Y+35, r24	; 0x23
    10f0:	9c a3       	std	Y+36, r25	; 0x24
    10f2:	ad a3       	std	Y+37, r26	; 0x25
    10f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10f6:	6b a1       	ldd	r22, Y+35	; 0x23
    10f8:	7c a1       	ldd	r23, Y+36	; 0x24
    10fa:	8d a1       	ldd	r24, Y+37	; 0x25
    10fc:	9e a1       	ldd	r25, Y+38	; 0x26
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    110a:	88 23       	and	r24, r24
    110c:	2c f4       	brge	.+10     	; 0x1118 <LCD_sendCommand+0x590>
		__ticks = 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9a a3       	std	Y+34, r25	; 0x22
    1114:	89 a3       	std	Y+33, r24	; 0x21
    1116:	3f c0       	rjmp	.+126    	; 0x1196 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1118:	6b a1       	ldd	r22, Y+35	; 0x23
    111a:	7c a1       	ldd	r23, Y+36	; 0x24
    111c:	8d a1       	ldd	r24, Y+37	; 0x25
    111e:	9e a1       	ldd	r25, Y+38	; 0x26
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    112c:	18 16       	cp	r1, r24
    112e:	4c f5       	brge	.+82     	; 0x1182 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1130:	6f a1       	ldd	r22, Y+39	; 0x27
    1132:	78 a5       	ldd	r23, Y+40	; 0x28
    1134:	89 a5       	ldd	r24, Y+41	; 0x29
    1136:	9a a5       	ldd	r25, Y+42	; 0x2a
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	51 e4       	ldi	r21, 0x41	; 65
    1140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	bc 01       	movw	r22, r24
    114a:	cd 01       	movw	r24, r26
    114c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9a a3       	std	Y+34, r25	; 0x22
    1156:	89 a3       	std	Y+33, r24	; 0x21
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <LCD_sendCommand+0x5f0>
    115a:	80 e9       	ldi	r24, 0x90	; 144
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	98 a3       	std	Y+32, r25	; 0x20
    1160:	8f 8f       	std	Y+31, r24	; 0x1f
    1162:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1164:	98 a1       	ldd	r25, Y+32	; 0x20
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <LCD_sendCommand+0x5de>
    116a:	98 a3       	std	Y+32, r25	; 0x20
    116c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116e:	89 a1       	ldd	r24, Y+33	; 0x21
    1170:	9a a1       	ldd	r25, Y+34	; 0x22
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	9a a3       	std	Y+34, r25	; 0x22
    1176:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1178:	89 a1       	ldd	r24, Y+33	; 0x21
    117a:	9a a1       	ldd	r25, Y+34	; 0x22
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	69 f7       	brne	.-38     	; 0x115a <LCD_sendCommand+0x5d2>
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1182:	6b a1       	ldd	r22, Y+35	; 0x23
    1184:	7c a1       	ldd	r23, Y+36	; 0x24
    1186:	8d a1       	ldd	r24, Y+37	; 0x25
    1188:	9e a1       	ldd	r25, Y+38	; 0x26
    118a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9a a3       	std	Y+34, r25	; 0x22
    1194:	89 a3       	std	Y+33, r24	; 0x21
    1196:	89 a1       	ldd	r24, Y+33	; 0x21
    1198:	9a a1       	ldd	r25, Y+34	; 0x22
    119a:	9e 8f       	std	Y+30, r25	; 0x1e
    119c:	8d 8f       	std	Y+29, r24	; 0x1d
    119e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <LCD_sendCommand+0x61a>
    11a6:	9e 8f       	std	Y+30, r25	; 0x1e
    11a8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    11aa:	ab e3       	ldi	r26, 0x3B	; 59
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	eb e3       	ldi	r30, 0x3B	; 59
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	28 2f       	mov	r18, r24
    11b6:	2f 70       	andi	r18, 0x0F	; 15
    11b8:	fe 01       	movw	r30, r28
    11ba:	ed 59       	subi	r30, 0x9D	; 157
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	80 81       	ld	r24, Z
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	82 95       	swap	r24
    11c6:	92 95       	swap	r25
    11c8:	90 7f       	andi	r25, 0xF0	; 240
    11ca:	98 27       	eor	r25, r24
    11cc:	80 7f       	andi	r24, 0xF0	; 240
    11ce:	98 27       	eor	r25, r24
    11d0:	82 2b       	or	r24, r18
    11d2:	8c 93       	st	X, r24
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	a0 e8       	ldi	r26, 0x80	; 128
    11da:	bf e3       	ldi	r27, 0x3F	; 63
    11dc:	89 8f       	std	Y+25, r24	; 0x19
    11de:	9a 8f       	std	Y+26, r25	; 0x1a
    11e0:	ab 8f       	std	Y+27, r26	; 0x1b
    11e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e4:	69 8d       	ldd	r22, Y+25	; 0x19
    11e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	4a e7       	ldi	r20, 0x7A	; 122
    11f2:	55 e4       	ldi	r21, 0x45	; 69
    11f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	8d 8b       	std	Y+21, r24	; 0x15
    11fe:	9e 8b       	std	Y+22, r25	; 0x16
    1200:	af 8b       	std	Y+23, r26	; 0x17
    1202:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1204:	6d 89       	ldd	r22, Y+21	; 0x15
    1206:	7e 89       	ldd	r23, Y+22	; 0x16
    1208:	8f 89       	ldd	r24, Y+23	; 0x17
    120a:	98 8d       	ldd	r25, Y+24	; 0x18
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e8       	ldi	r20, 0x80	; 128
    1212:	5f e3       	ldi	r21, 0x3F	; 63
    1214:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1218:	88 23       	and	r24, r24
    121a:	2c f4       	brge	.+10     	; 0x1226 <LCD_sendCommand+0x69e>
		__ticks = 1;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	9c 8b       	std	Y+20, r25	; 0x14
    1222:	8b 8b       	std	Y+19, r24	; 0x13
    1224:	3f c0       	rjmp	.+126    	; 0x12a4 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1226:	6d 89       	ldd	r22, Y+21	; 0x15
    1228:	7e 89       	ldd	r23, Y+22	; 0x16
    122a:	8f 89       	ldd	r24, Y+23	; 0x17
    122c:	98 8d       	ldd	r25, Y+24	; 0x18
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	3f ef       	ldi	r19, 0xFF	; 255
    1232:	4f e7       	ldi	r20, 0x7F	; 127
    1234:	57 e4       	ldi	r21, 0x47	; 71
    1236:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    123a:	18 16       	cp	r1, r24
    123c:	4c f5       	brge	.+82     	; 0x1290 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123e:	69 8d       	ldd	r22, Y+25	; 0x19
    1240:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1242:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1244:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e2       	ldi	r20, 0x20	; 32
    124c:	51 e4       	ldi	r21, 0x41	; 65
    124e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	bc 01       	movw	r22, r24
    1258:	cd 01       	movw	r24, r26
    125a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	9c 8b       	std	Y+20, r25	; 0x14
    1264:	8b 8b       	std	Y+19, r24	; 0x13
    1266:	0f c0       	rjmp	.+30     	; 0x1286 <LCD_sendCommand+0x6fe>
    1268:	80 e9       	ldi	r24, 0x90	; 144
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	9a 8b       	std	Y+18, r25	; 0x12
    126e:	89 8b       	std	Y+17, r24	; 0x11
    1270:	89 89       	ldd	r24, Y+17	; 0x11
    1272:	9a 89       	ldd	r25, Y+18	; 0x12
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <LCD_sendCommand+0x6ec>
    1278:	9a 8b       	std	Y+18, r25	; 0x12
    127a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127c:	8b 89       	ldd	r24, Y+19	; 0x13
    127e:	9c 89       	ldd	r25, Y+20	; 0x14
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	9c 8b       	std	Y+20, r25	; 0x14
    1284:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1286:	8b 89       	ldd	r24, Y+19	; 0x13
    1288:	9c 89       	ldd	r25, Y+20	; 0x14
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	69 f7       	brne	.-38     	; 0x1268 <LCD_sendCommand+0x6e0>
    128e:	14 c0       	rjmp	.+40     	; 0x12b8 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1290:	6d 89       	ldd	r22, Y+21	; 0x15
    1292:	7e 89       	ldd	r23, Y+22	; 0x16
    1294:	8f 89       	ldd	r24, Y+23	; 0x17
    1296:	98 8d       	ldd	r25, Y+24	; 0x18
    1298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	9c 8b       	std	Y+20, r25	; 0x14
    12a2:	8b 8b       	std	Y+19, r24	; 0x13
    12a4:	8b 89       	ldd	r24, Y+19	; 0x13
    12a6:	9c 89       	ldd	r25, Y+20	; 0x14
    12a8:	98 8b       	std	Y+16, r25	; 0x10
    12aa:	8f 87       	std	Y+15, r24	; 0x0f
    12ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ae:	98 89       	ldd	r25, Y+16	; 0x10
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <LCD_sendCommand+0x728>
    12b4:	98 8b       	std	Y+16, r25	; 0x10
    12b6:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, E);
    12b8:	ab e3       	ldi	r26, 0x3B	; 59
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	eb e3       	ldi	r30, 0x3B	; 59
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	87 7f       	andi	r24, 0xF7	; 247
    12c4:	8c 93       	st	X, r24
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a0 e8       	ldi	r26, 0x80	; 128
    12cc:	bf e3       	ldi	r27, 0x3F	; 63
    12ce:	8b 87       	std	Y+11, r24	; 0x0b
    12d0:	9c 87       	std	Y+12, r25	; 0x0c
    12d2:	ad 87       	std	Y+13, r26	; 0x0d
    12d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12da:	8d 85       	ldd	r24, Y+13	; 0x0d
    12dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	4a e7       	ldi	r20, 0x7A	; 122
    12e4:	55 e4       	ldi	r21, 0x45	; 69
    12e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	8f 83       	std	Y+7, r24	; 0x07
    12f0:	98 87       	std	Y+8, r25	; 0x08
    12f2:	a9 87       	std	Y+9, r26	; 0x09
    12f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12f6:	6f 81       	ldd	r22, Y+7	; 0x07
    12f8:	78 85       	ldd	r23, Y+8	; 0x08
    12fa:	89 85       	ldd	r24, Y+9	; 0x09
    12fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e8       	ldi	r20, 0x80	; 128
    1304:	5f e3       	ldi	r21, 0x3F	; 63
    1306:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    130a:	88 23       	and	r24, r24
    130c:	2c f4       	brge	.+10     	; 0x1318 <LCD_sendCommand+0x790>
		__ticks = 1;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9e 83       	std	Y+6, r25	; 0x06
    1314:	8d 83       	std	Y+5, r24	; 0x05
    1316:	3f c0       	rjmp	.+126    	; 0x1396 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    1318:	6f 81       	ldd	r22, Y+7	; 0x07
    131a:	78 85       	ldd	r23, Y+8	; 0x08
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	3f ef       	ldi	r19, 0xFF	; 255
    1324:	4f e7       	ldi	r20, 0x7F	; 127
    1326:	57 e4       	ldi	r21, 0x47	; 71
    1328:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    132c:	18 16       	cp	r1, r24
    132e:	4c f5       	brge	.+82     	; 0x1382 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1330:	6b 85       	ldd	r22, Y+11	; 0x0b
    1332:	7c 85       	ldd	r23, Y+12	; 0x0c
    1334:	8d 85       	ldd	r24, Y+13	; 0x0d
    1336:	9e 85       	ldd	r25, Y+14	; 0x0e
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e2       	ldi	r20, 0x20	; 32
    133e:	51 e4       	ldi	r21, 0x41	; 65
    1340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	bc 01       	movw	r22, r24
    134a:	cd 01       	movw	r24, r26
    134c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	9e 83       	std	Y+6, r25	; 0x06
    1356:	8d 83       	std	Y+5, r24	; 0x05
    1358:	0f c0       	rjmp	.+30     	; 0x1378 <LCD_sendCommand+0x7f0>
    135a:	80 e9       	ldi	r24, 0x90	; 144
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	9c 83       	std	Y+4, r25	; 0x04
    1360:	8b 83       	std	Y+3, r24	; 0x03
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <LCD_sendCommand+0x7de>
    136a:	9c 83       	std	Y+4, r25	; 0x04
    136c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	9e 83       	std	Y+6, r25	; 0x06
    1376:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	69 f7       	brne	.-38     	; 0x135a <LCD_sendCommand+0x7d2>
    1380:	14 c0       	rjmp	.+40     	; 0x13aa <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1382:	6f 81       	ldd	r22, Y+7	; 0x07
    1384:	78 85       	ldd	r23, Y+8	; 0x08
    1386:	89 85       	ldd	r24, Y+9	; 0x09
    1388:	9a 85       	ldd	r25, Y+10	; 0x0a
    138a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	8d 81       	ldd	r24, Y+5	; 0x05
    1398:	9e 81       	ldd	r25, Y+6	; 0x06
    139a:	9a 83       	std	Y+2, r25	; 0x02
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <LCD_sendCommand+0x81a>
    13a6:	9a 83       	std	Y+2, r25	; 0x02
    13a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    13aa:	cd 59       	subi	r28, 0x9D	; 157
    13ac:	df 4f       	sbci	r29, 0xFF	; 255
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	08 95       	ret

000013c2 <LCD_displayCharacter>:

/*
 * Description : A Function to write data (display character).
 */
void LCD_displayCharacter(uint8_t data)
{
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	c3 56       	subi	r28, 0x63	; 99
    13d0:	d0 40       	sbci	r29, 0x00	; 0
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	fe 01       	movw	r30, r28
    13de:	ed 59       	subi	r30, 0x9D	; 157
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT, RS);
    13e4:	ab e3       	ldi	r26, 0x3B	; 59
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	eb e3       	ldi	r30, 0x3B	; 59
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	82 60       	ori	r24, 0x02	; 2
    13f0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);
    13f2:	ab e3       	ldi	r26, 0x3B	; 59
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	eb e3       	ldi	r30, 0x3B	; 59
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8b 7f       	andi	r24, 0xFB	; 251
    13fe:	8c 93       	st	X, r24
    1400:	fe 01       	movw	r30, r28
    1402:	e1 5a       	subi	r30, 0xA1	; 161
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a0 e8       	ldi	r26, 0x80	; 128
    140c:	bf e3       	ldi	r27, 0x3F	; 63
    140e:	80 83       	st	Z, r24
    1410:	91 83       	std	Z+1, r25	; 0x01
    1412:	a2 83       	std	Z+2, r26	; 0x02
    1414:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1416:	8e 01       	movw	r16, r28
    1418:	05 5a       	subi	r16, 0xA5	; 165
    141a:	1f 4f       	sbci	r17, 0xFF	; 255
    141c:	fe 01       	movw	r30, r28
    141e:	e1 5a       	subi	r30, 0xA1	; 161
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	60 81       	ld	r22, Z
    1424:	71 81       	ldd	r23, Z+1	; 0x01
    1426:	82 81       	ldd	r24, Z+2	; 0x02
    1428:	93 81       	ldd	r25, Z+3	; 0x03
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a e7       	ldi	r20, 0x7A	; 122
    1430:	55 e4       	ldi	r21, 0x45	; 69
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	f8 01       	movw	r30, r16
    143c:	80 83       	st	Z, r24
    143e:	91 83       	std	Z+1, r25	; 0x01
    1440:	a2 83       	std	Z+2, r26	; 0x02
    1442:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1444:	fe 01       	movw	r30, r28
    1446:	e5 5a       	subi	r30, 0xA5	; 165
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	60 81       	ld	r22, Z
    144c:	71 81       	ldd	r23, Z+1	; 0x01
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	93 81       	ldd	r25, Z+3	; 0x03
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e8       	ldi	r20, 0x80	; 128
    1458:	5f e3       	ldi	r21, 0x3F	; 63
    145a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    145e:	88 23       	and	r24, r24
    1460:	44 f4       	brge	.+16     	; 0x1472 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1462:	fe 01       	movw	r30, r28
    1464:	e7 5a       	subi	r30, 0xA7	; 167
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	91 83       	std	Z+1, r25	; 0x01
    146e:	80 83       	st	Z, r24
    1470:	64 c0       	rjmp	.+200    	; 0x153a <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1472:	fe 01       	movw	r30, r28
    1474:	e5 5a       	subi	r30, 0xA5	; 165
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	60 81       	ld	r22, Z
    147a:	71 81       	ldd	r23, Z+1	; 0x01
    147c:	82 81       	ldd	r24, Z+2	; 0x02
    147e:	93 81       	ldd	r25, Z+3	; 0x03
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	3f ef       	ldi	r19, 0xFF	; 255
    1484:	4f e7       	ldi	r20, 0x7F	; 127
    1486:	57 e4       	ldi	r21, 0x47	; 71
    1488:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    148c:	18 16       	cp	r1, r24
    148e:	0c f0       	brlt	.+2      	; 0x1492 <LCD_displayCharacter+0xd0>
    1490:	43 c0       	rjmp	.+134    	; 0x1518 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1492:	fe 01       	movw	r30, r28
    1494:	e1 5a       	subi	r30, 0xA1	; 161
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	60 81       	ld	r22, Z
    149a:	71 81       	ldd	r23, Z+1	; 0x01
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e2       	ldi	r20, 0x20	; 32
    14a6:	51 e4       	ldi	r21, 0x41	; 65
    14a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	8e 01       	movw	r16, r28
    14b2:	07 5a       	subi	r16, 0xA7	; 167
    14b4:	1f 4f       	sbci	r17, 0xFF	; 255
    14b6:	bc 01       	movw	r22, r24
    14b8:	cd 01       	movw	r24, r26
    14ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	f8 01       	movw	r30, r16
    14c4:	91 83       	std	Z+1, r25	; 0x01
    14c6:	80 83       	st	Z, r24
    14c8:	1f c0       	rjmp	.+62     	; 0x1508 <LCD_displayCharacter+0x146>
    14ca:	fe 01       	movw	r30, r28
    14cc:	e9 5a       	subi	r30, 0xA9	; 169
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	80 e9       	ldi	r24, 0x90	; 144
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	91 83       	std	Z+1, r25	; 0x01
    14d6:	80 83       	st	Z, r24
    14d8:	fe 01       	movw	r30, r28
    14da:	e9 5a       	subi	r30, 0xA9	; 169
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	80 81       	ld	r24, Z
    14e0:	91 81       	ldd	r25, Z+1	; 0x01
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <LCD_displayCharacter+0x120>
    14e6:	fe 01       	movw	r30, r28
    14e8:	e9 5a       	subi	r30, 0xA9	; 169
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f0:	de 01       	movw	r26, r28
    14f2:	a7 5a       	subi	r26, 0xA7	; 167
    14f4:	bf 4f       	sbci	r27, 0xFF	; 255
    14f6:	fe 01       	movw	r30, r28
    14f8:	e7 5a       	subi	r30, 0xA7	; 167
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	80 81       	ld	r24, Z
    14fe:	91 81       	ldd	r25, Z+1	; 0x01
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	11 96       	adiw	r26, 0x01	; 1
    1504:	9c 93       	st	X, r25
    1506:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1508:	fe 01       	movw	r30, r28
    150a:	e7 5a       	subi	r30, 0xA7	; 167
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	d1 f6       	brne	.-76     	; 0x14ca <LCD_displayCharacter+0x108>
    1516:	27 c0       	rjmp	.+78     	; 0x1566 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1518:	8e 01       	movw	r16, r28
    151a:	07 5a       	subi	r16, 0xA7	; 167
    151c:	1f 4f       	sbci	r17, 0xFF	; 255
    151e:	fe 01       	movw	r30, r28
    1520:	e5 5a       	subi	r30, 0xA5	; 165
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	60 81       	ld	r22, Z
    1526:	71 81       	ldd	r23, Z+1	; 0x01
    1528:	82 81       	ldd	r24, Z+2	; 0x02
    152a:	93 81       	ldd	r25, Z+3	; 0x03
    152c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	f8 01       	movw	r30, r16
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	80 83       	st	Z, r24
    153a:	de 01       	movw	r26, r28
    153c:	ab 5a       	subi	r26, 0xAB	; 171
    153e:	bf 4f       	sbci	r27, 0xFF	; 255
    1540:	fe 01       	movw	r30, r28
    1542:	e7 5a       	subi	r30, 0xA7	; 167
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	80 81       	ld	r24, Z
    1548:	91 81       	ldd	r25, Z+1	; 0x01
    154a:	8d 93       	st	X+, r24
    154c:	9c 93       	st	X, r25
    154e:	fe 01       	movw	r30, r28
    1550:	eb 5a       	subi	r30, 0xAB	; 171
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	80 81       	ld	r24, Z
    1556:	91 81       	ldd	r25, Z+1	; 0x01
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <LCD_displayCharacter+0x196>
    155c:	fe 01       	movw	r30, r28
    155e:	eb 5a       	subi	r30, 0xAB	; 171
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E);
    1566:	ab e3       	ldi	r26, 0x3B	; 59
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	eb e3       	ldi	r30, 0x3B	; 59
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	88 60       	ori	r24, 0x08	; 8
    1572:	8c 93       	st	X, r24
    1574:	fe 01       	movw	r30, r28
    1576:	ef 5a       	subi	r30, 0xAF	; 175
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a0 e8       	ldi	r26, 0x80	; 128
    1580:	bf e3       	ldi	r27, 0x3F	; 63
    1582:	80 83       	st	Z, r24
    1584:	91 83       	std	Z+1, r25	; 0x01
    1586:	a2 83       	std	Z+2, r26	; 0x02
    1588:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158a:	8e 01       	movw	r16, r28
    158c:	03 5b       	subi	r16, 0xB3	; 179
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	fe 01       	movw	r30, r28
    1592:	ef 5a       	subi	r30, 0xAF	; 175
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	4a e7       	ldi	r20, 0x7A	; 122
    15a4:	55 e4       	ldi	r21, 0x45	; 69
    15a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	f8 01       	movw	r30, r16
    15b0:	80 83       	st	Z, r24
    15b2:	91 83       	std	Z+1, r25	; 0x01
    15b4:	a2 83       	std	Z+2, r26	; 0x02
    15b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15b8:	fe 01       	movw	r30, r28
    15ba:	e3 5b       	subi	r30, 0xB3	; 179
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	60 81       	ld	r22, Z
    15c0:	71 81       	ldd	r23, Z+1	; 0x01
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e8       	ldi	r20, 0x80	; 128
    15cc:	5f e3       	ldi	r21, 0x3F	; 63
    15ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d2:	88 23       	and	r24, r24
    15d4:	44 f4       	brge	.+16     	; 0x15e6 <LCD_displayCharacter+0x224>
		__ticks = 1;
    15d6:	fe 01       	movw	r30, r28
    15d8:	e5 5b       	subi	r30, 0xB5	; 181
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	91 83       	std	Z+1, r25	; 0x01
    15e2:	80 83       	st	Z, r24
    15e4:	64 c0       	rjmp	.+200    	; 0x16ae <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    15e6:	fe 01       	movw	r30, r28
    15e8:	e3 5b       	subi	r30, 0xB3	; 179
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	60 81       	ld	r22, Z
    15ee:	71 81       	ldd	r23, Z+1	; 0x01
    15f0:	82 81       	ldd	r24, Z+2	; 0x02
    15f2:	93 81       	ldd	r25, Z+3	; 0x03
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	3f ef       	ldi	r19, 0xFF	; 255
    15f8:	4f e7       	ldi	r20, 0x7F	; 127
    15fa:	57 e4       	ldi	r21, 0x47	; 71
    15fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1600:	18 16       	cp	r1, r24
    1602:	0c f0       	brlt	.+2      	; 0x1606 <LCD_displayCharacter+0x244>
    1604:	43 c0       	rjmp	.+134    	; 0x168c <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1606:	fe 01       	movw	r30, r28
    1608:	ef 5a       	subi	r30, 0xAF	; 175
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e2       	ldi	r20, 0x20	; 32
    161a:	51 e4       	ldi	r21, 0x41	; 65
    161c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	8e 01       	movw	r16, r28
    1626:	05 5b       	subi	r16, 0xB5	; 181
    1628:	1f 4f       	sbci	r17, 0xFF	; 255
    162a:	bc 01       	movw	r22, r24
    162c:	cd 01       	movw	r24, r26
    162e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	f8 01       	movw	r30, r16
    1638:	91 83       	std	Z+1, r25	; 0x01
    163a:	80 83       	st	Z, r24
    163c:	1f c0       	rjmp	.+62     	; 0x167c <LCD_displayCharacter+0x2ba>
    163e:	fe 01       	movw	r30, r28
    1640:	e7 5b       	subi	r30, 0xB7	; 183
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	80 e9       	ldi	r24, 0x90	; 144
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	80 83       	st	Z, r24
    164c:	fe 01       	movw	r30, r28
    164e:	e7 5b       	subi	r30, 0xB7	; 183
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	80 81       	ld	r24, Z
    1654:	91 81       	ldd	r25, Z+1	; 0x01
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <LCD_displayCharacter+0x294>
    165a:	fe 01       	movw	r30, r28
    165c:	e7 5b       	subi	r30, 0xB7	; 183
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1664:	de 01       	movw	r26, r28
    1666:	a5 5b       	subi	r26, 0xB5	; 181
    1668:	bf 4f       	sbci	r27, 0xFF	; 255
    166a:	fe 01       	movw	r30, r28
    166c:	e5 5b       	subi	r30, 0xB5	; 181
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	11 96       	adiw	r26, 0x01	; 1
    1678:	9c 93       	st	X, r25
    167a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167c:	fe 01       	movw	r30, r28
    167e:	e5 5b       	subi	r30, 0xB5	; 181
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	d1 f6       	brne	.-76     	; 0x163e <LCD_displayCharacter+0x27c>
    168a:	27 c0       	rjmp	.+78     	; 0x16da <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168c:	8e 01       	movw	r16, r28
    168e:	05 5b       	subi	r16, 0xB5	; 181
    1690:	1f 4f       	sbci	r17, 0xFF	; 255
    1692:	fe 01       	movw	r30, r28
    1694:	e3 5b       	subi	r30, 0xB3	; 179
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	60 81       	ld	r22, Z
    169a:	71 81       	ldd	r23, Z+1	; 0x01
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	f8 01       	movw	r30, r16
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	80 83       	st	Z, r24
    16ae:	de 01       	movw	r26, r28
    16b0:	a9 5b       	subi	r26, 0xB9	; 185
    16b2:	bf 4f       	sbci	r27, 0xFF	; 255
    16b4:	fe 01       	movw	r30, r28
    16b6:	e5 5b       	subi	r30, 0xB5	; 181
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	80 81       	ld	r24, Z
    16bc:	91 81       	ldd	r25, Z+1	; 0x01
    16be:	8d 93       	st	X+, r24
    16c0:	9c 93       	st	X, r25
    16c2:	fe 01       	movw	r30, r28
    16c4:	e9 5b       	subi	r30, 0xB9	; 185
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <LCD_displayCharacter+0x30a>
    16d0:	fe 01       	movw	r30, r28
    16d2:	e9 5b       	subi	r30, 0xB9	; 185
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	80 83       	st	Z, r24
	_delay_ms(1);
#if(DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data;
#elif(DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    16da:	ab e3       	ldi	r26, 0x3B	; 59
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	eb e3       	ldi	r30, 0x3B	; 59
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	98 2f       	mov	r25, r24
    16e6:	9f 70       	andi	r25, 0x0F	; 15
    16e8:	fe 01       	movw	r30, r28
    16ea:	ed 59       	subi	r30, 0x9D	; 157
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	80 81       	ld	r24, Z
    16f0:	80 7f       	andi	r24, 0xF0	; 240
    16f2:	89 2b       	or	r24, r25
    16f4:	8c 93       	st	X, r24
    16f6:	fe 01       	movw	r30, r28
    16f8:	ed 5b       	subi	r30, 0xBD	; 189
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a0 e8       	ldi	r26, 0x80	; 128
    1702:	bf e3       	ldi	r27, 0x3F	; 63
    1704:	80 83       	st	Z, r24
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	a2 83       	std	Z+2, r26	; 0x02
    170a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170c:	8e 01       	movw	r16, r28
    170e:	01 5c       	subi	r16, 0xC1	; 193
    1710:	1f 4f       	sbci	r17, 0xFF	; 255
    1712:	fe 01       	movw	r30, r28
    1714:	ed 5b       	subi	r30, 0xBD	; 189
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	60 81       	ld	r22, Z
    171a:	71 81       	ldd	r23, Z+1	; 0x01
    171c:	82 81       	ldd	r24, Z+2	; 0x02
    171e:	93 81       	ldd	r25, Z+3	; 0x03
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	4a e7       	ldi	r20, 0x7A	; 122
    1726:	55 e4       	ldi	r21, 0x45	; 69
    1728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	f8 01       	movw	r30, r16
    1732:	80 83       	st	Z, r24
    1734:	91 83       	std	Z+1, r25	; 0x01
    1736:	a2 83       	std	Z+2, r26	; 0x02
    1738:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    173a:	fe 01       	movw	r30, r28
    173c:	ff 96       	adiw	r30, 0x3f	; 63
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	82 81       	ldd	r24, Z+2	; 0x02
    1744:	93 81       	ldd	r25, Z+3	; 0x03
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	5f e3       	ldi	r21, 0x3F	; 63
    174e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1752:	88 23       	and	r24, r24
    1754:	2c f4       	brge	.+10     	; 0x1760 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	9e af       	std	Y+62, r25	; 0x3e
    175c:	8d af       	std	Y+61, r24	; 0x3d
    175e:	46 c0       	rjmp	.+140    	; 0x17ec <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    1760:	fe 01       	movw	r30, r28
    1762:	ff 96       	adiw	r30, 0x3f	; 63
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	4f e7       	ldi	r20, 0x7F	; 127
    1772:	57 e4       	ldi	r21, 0x47	; 71
    1774:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1778:	18 16       	cp	r1, r24
    177a:	64 f5       	brge	.+88     	; 0x17d4 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177c:	fe 01       	movw	r30, r28
    177e:	ed 5b       	subi	r30, 0xBD	; 189
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	93 81       	ldd	r25, Z+3	; 0x03
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e2       	ldi	r20, 0x20	; 32
    1790:	51 e4       	ldi	r21, 0x41	; 65
    1792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	bc 01       	movw	r22, r24
    179c:	cd 01       	movw	r24, r26
    179e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	9e af       	std	Y+62, r25	; 0x3e
    17a8:	8d af       	std	Y+61, r24	; 0x3d
    17aa:	0f c0       	rjmp	.+30     	; 0x17ca <LCD_displayCharacter+0x408>
    17ac:	80 e9       	ldi	r24, 0x90	; 144
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	9c af       	std	Y+60, r25	; 0x3c
    17b2:	8b af       	std	Y+59, r24	; 0x3b
    17b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    17b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <LCD_displayCharacter+0x3f6>
    17bc:	9c af       	std	Y+60, r25	; 0x3c
    17be:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    17c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	9e af       	std	Y+62, r25	; 0x3e
    17c8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    17cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	69 f7       	brne	.-38     	; 0x17ac <LCD_displayCharacter+0x3ea>
    17d2:	16 c0       	rjmp	.+44     	; 0x1800 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d4:	fe 01       	movw	r30, r28
    17d6:	ff 96       	adiw	r30, 0x3f	; 63
    17d8:	60 81       	ld	r22, Z
    17da:	71 81       	ldd	r23, Z+1	; 0x01
    17dc:	82 81       	ldd	r24, Z+2	; 0x02
    17de:	93 81       	ldd	r25, Z+3	; 0x03
    17e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	9e af       	std	Y+62, r25	; 0x3e
    17ea:	8d af       	std	Y+61, r24	; 0x3d
    17ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    17ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    17f0:	9a af       	std	Y+58, r25	; 0x3a
    17f2:	89 af       	std	Y+57, r24	; 0x39
    17f4:	89 ad       	ldd	r24, Y+57	; 0x39
    17f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <LCD_displayCharacter+0x436>
    17fc:	9a af       	std	Y+58, r25	; 0x3a
    17fe:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, E);
    1800:	ab e3       	ldi	r26, 0x3B	; 59
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	eb e3       	ldi	r30, 0x3B	; 59
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	87 7f       	andi	r24, 0xF7	; 247
    180c:	8c 93       	st	X, r24
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a0 e8       	ldi	r26, 0x80	; 128
    1814:	bf e3       	ldi	r27, 0x3F	; 63
    1816:	8d ab       	std	Y+53, r24	; 0x35
    1818:	9e ab       	std	Y+54, r25	; 0x36
    181a:	af ab       	std	Y+55, r26	; 0x37
    181c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181e:	6d a9       	ldd	r22, Y+53	; 0x35
    1820:	7e a9       	ldd	r23, Y+54	; 0x36
    1822:	8f a9       	ldd	r24, Y+55	; 0x37
    1824:	98 ad       	ldd	r25, Y+56	; 0x38
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	4a e7       	ldi	r20, 0x7A	; 122
    182c:	55 e4       	ldi	r21, 0x45	; 69
    182e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	89 ab       	std	Y+49, r24	; 0x31
    1838:	9a ab       	std	Y+50, r25	; 0x32
    183a:	ab ab       	std	Y+51, r26	; 0x33
    183c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    183e:	69 a9       	ldd	r22, Y+49	; 0x31
    1840:	7a a9       	ldd	r23, Y+50	; 0x32
    1842:	8b a9       	ldd	r24, Y+51	; 0x33
    1844:	9c a9       	ldd	r25, Y+52	; 0x34
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1852:	88 23       	and	r24, r24
    1854:	2c f4       	brge	.+10     	; 0x1860 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	98 ab       	std	Y+48, r25	; 0x30
    185c:	8f a7       	std	Y+47, r24	; 0x2f
    185e:	3f c0       	rjmp	.+126    	; 0x18de <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1860:	69 a9       	ldd	r22, Y+49	; 0x31
    1862:	7a a9       	ldd	r23, Y+50	; 0x32
    1864:	8b a9       	ldd	r24, Y+51	; 0x33
    1866:	9c a9       	ldd	r25, Y+52	; 0x34
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	3f ef       	ldi	r19, 0xFF	; 255
    186c:	4f e7       	ldi	r20, 0x7F	; 127
    186e:	57 e4       	ldi	r21, 0x47	; 71
    1870:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1874:	18 16       	cp	r1, r24
    1876:	4c f5       	brge	.+82     	; 0x18ca <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1878:	6d a9       	ldd	r22, Y+53	; 0x35
    187a:	7e a9       	ldd	r23, Y+54	; 0x36
    187c:	8f a9       	ldd	r24, Y+55	; 0x37
    187e:	98 ad       	ldd	r25, Y+56	; 0x38
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e2       	ldi	r20, 0x20	; 32
    1886:	51 e4       	ldi	r21, 0x41	; 65
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	98 ab       	std	Y+48, r25	; 0x30
    189e:	8f a7       	std	Y+47, r24	; 0x2f
    18a0:	0f c0       	rjmp	.+30     	; 0x18c0 <LCD_displayCharacter+0x4fe>
    18a2:	80 e9       	ldi	r24, 0x90	; 144
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	9e a7       	std	Y+46, r25	; 0x2e
    18a8:	8d a7       	std	Y+45, r24	; 0x2d
    18aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <LCD_displayCharacter+0x4ec>
    18b2:	9e a7       	std	Y+46, r25	; 0x2e
    18b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b8:	98 a9       	ldd	r25, Y+48	; 0x30
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	98 ab       	std	Y+48, r25	; 0x30
    18be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c2:	98 a9       	ldd	r25, Y+48	; 0x30
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	69 f7       	brne	.-38     	; 0x18a2 <LCD_displayCharacter+0x4e0>
    18c8:	14 c0       	rjmp	.+40     	; 0x18f2 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ca:	69 a9       	ldd	r22, Y+49	; 0x31
    18cc:	7a a9       	ldd	r23, Y+50	; 0x32
    18ce:	8b a9       	ldd	r24, Y+51	; 0x33
    18d0:	9c a9       	ldd	r25, Y+52	; 0x34
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	98 ab       	std	Y+48, r25	; 0x30
    18dc:	8f a7       	std	Y+47, r24	; 0x2f
    18de:	8f a5       	ldd	r24, Y+47	; 0x2f
    18e0:	98 a9       	ldd	r25, Y+48	; 0x30
    18e2:	9c a7       	std	Y+44, r25	; 0x2c
    18e4:	8b a7       	std	Y+43, r24	; 0x2b
    18e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    18e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <LCD_displayCharacter+0x528>
    18ee:	9c a7       	std	Y+44, r25	; 0x2c
    18f0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E);
    18f2:	ab e3       	ldi	r26, 0x3B	; 59
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	eb e3       	ldi	r30, 0x3B	; 59
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	88 60       	ori	r24, 0x08	; 8
    18fe:	8c 93       	st	X, r24
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a0 e8       	ldi	r26, 0x80	; 128
    1906:	bf e3       	ldi	r27, 0x3F	; 63
    1908:	8f a3       	std	Y+39, r24	; 0x27
    190a:	98 a7       	std	Y+40, r25	; 0x28
    190c:	a9 a7       	std	Y+41, r26	; 0x29
    190e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1910:	6f a1       	ldd	r22, Y+39	; 0x27
    1912:	78 a5       	ldd	r23, Y+40	; 0x28
    1914:	89 a5       	ldd	r24, Y+41	; 0x29
    1916:	9a a5       	ldd	r25, Y+42	; 0x2a
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4a e7       	ldi	r20, 0x7A	; 122
    191e:	55 e4       	ldi	r21, 0x45	; 69
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	8b a3       	std	Y+35, r24	; 0x23
    192a:	9c a3       	std	Y+36, r25	; 0x24
    192c:	ad a3       	std	Y+37, r26	; 0x25
    192e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1930:	6b a1       	ldd	r22, Y+35	; 0x23
    1932:	7c a1       	ldd	r23, Y+36	; 0x24
    1934:	8d a1       	ldd	r24, Y+37	; 0x25
    1936:	9e a1       	ldd	r25, Y+38	; 0x26
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e8       	ldi	r20, 0x80	; 128
    193e:	5f e3       	ldi	r21, 0x3F	; 63
    1940:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1944:	88 23       	and	r24, r24
    1946:	2c f4       	brge	.+10     	; 0x1952 <LCD_displayCharacter+0x590>
		__ticks = 1;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9a a3       	std	Y+34, r25	; 0x22
    194e:	89 a3       	std	Y+33, r24	; 0x21
    1950:	3f c0       	rjmp	.+126    	; 0x19d0 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1952:	6b a1       	ldd	r22, Y+35	; 0x23
    1954:	7c a1       	ldd	r23, Y+36	; 0x24
    1956:	8d a1       	ldd	r24, Y+37	; 0x25
    1958:	9e a1       	ldd	r25, Y+38	; 0x26
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	3f ef       	ldi	r19, 0xFF	; 255
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	57 e4       	ldi	r21, 0x47	; 71
    1962:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1966:	18 16       	cp	r1, r24
    1968:	4c f5       	brge	.+82     	; 0x19bc <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	6f a1       	ldd	r22, Y+39	; 0x27
    196c:	78 a5       	ldd	r23, Y+40	; 0x28
    196e:	89 a5       	ldd	r24, Y+41	; 0x29
    1970:	9a a5       	ldd	r25, Y+42	; 0x2a
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e2       	ldi	r20, 0x20	; 32
    1978:	51 e4       	ldi	r21, 0x41	; 65
    197a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9a a3       	std	Y+34, r25	; 0x22
    1990:	89 a3       	std	Y+33, r24	; 0x21
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <LCD_displayCharacter+0x5f0>
    1994:	80 e9       	ldi	r24, 0x90	; 144
    1996:	91 e0       	ldi	r25, 0x01	; 1
    1998:	98 a3       	std	Y+32, r25	; 0x20
    199a:	8f 8f       	std	Y+31, r24	; 0x1f
    199c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    199e:	98 a1       	ldd	r25, Y+32	; 0x20
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LCD_displayCharacter+0x5de>
    19a4:	98 a3       	std	Y+32, r25	; 0x20
    19a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a8:	89 a1       	ldd	r24, Y+33	; 0x21
    19aa:	9a a1       	ldd	r25, Y+34	; 0x22
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	9a a3       	std	Y+34, r25	; 0x22
    19b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b2:	89 a1       	ldd	r24, Y+33	; 0x21
    19b4:	9a a1       	ldd	r25, Y+34	; 0x22
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	69 f7       	brne	.-38     	; 0x1994 <LCD_displayCharacter+0x5d2>
    19ba:	14 c0       	rjmp	.+40     	; 0x19e4 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19bc:	6b a1       	ldd	r22, Y+35	; 0x23
    19be:	7c a1       	ldd	r23, Y+36	; 0x24
    19c0:	8d a1       	ldd	r24, Y+37	; 0x25
    19c2:	9e a1       	ldd	r25, Y+38	; 0x26
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9a a3       	std	Y+34, r25	; 0x22
    19ce:	89 a3       	std	Y+33, r24	; 0x21
    19d0:	89 a1       	ldd	r24, Y+33	; 0x21
    19d2:	9a a1       	ldd	r25, Y+34	; 0x22
    19d4:	9e 8f       	std	Y+30, r25	; 0x1e
    19d6:	8d 8f       	std	Y+29, r24	; 0x1d
    19d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_displayCharacter+0x61a>
    19e0:	9e 8f       	std	Y+30, r25	; 0x1e
    19e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    19e4:	ab e3       	ldi	r26, 0x3B	; 59
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	eb e3       	ldi	r30, 0x3B	; 59
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	28 2f       	mov	r18, r24
    19f0:	2f 70       	andi	r18, 0x0F	; 15
    19f2:	fe 01       	movw	r30, r28
    19f4:	ed 59       	subi	r30, 0x9D	; 157
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	88 2f       	mov	r24, r24
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	82 95       	swap	r24
    1a00:	92 95       	swap	r25
    1a02:	90 7f       	andi	r25, 0xF0	; 240
    1a04:	98 27       	eor	r25, r24
    1a06:	80 7f       	andi	r24, 0xF0	; 240
    1a08:	98 27       	eor	r25, r24
    1a0a:	82 2b       	or	r24, r18
    1a0c:	8c 93       	st	X, r24
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a0 e8       	ldi	r26, 0x80	; 128
    1a14:	bf e3       	ldi	r27, 0x3F	; 63
    1a16:	89 8f       	std	Y+25, r24	; 0x19
    1a18:	9a 8f       	std	Y+26, r25	; 0x1a
    1a1a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a e7       	ldi	r20, 0x7A	; 122
    1a2c:	55 e4       	ldi	r21, 0x45	; 69
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8d 8b       	std	Y+21, r24	; 0x15
    1a38:	9e 8b       	std	Y+22, r25	; 0x16
    1a3a:	af 8b       	std	Y+23, r26	; 0x17
    1a3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a40:	7e 89       	ldd	r23, Y+22	; 0x16
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	98 8d       	ldd	r25, Y+24	; 0x18
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e8       	ldi	r20, 0x80	; 128
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9c 8b       	std	Y+20, r25	; 0x14
    1a5c:	8b 8b       	std	Y+19, r24	; 0x13
    1a5e:	3f c0       	rjmp	.+126    	; 0x1ade <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    1a60:	6d 89       	ldd	r22, Y+21	; 0x15
    1a62:	7e 89       	ldd	r23, Y+22	; 0x16
    1a64:	8f 89       	ldd	r24, Y+23	; 0x17
    1a66:	98 8d       	ldd	r25, Y+24	; 0x18
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	57 e4       	ldi	r21, 0x47	; 71
    1a70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	4c f5       	brge	.+82     	; 0x1aca <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a78:	69 8d       	ldd	r22, Y+25	; 0x19
    1a7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e2       	ldi	r20, 0x20	; 32
    1a86:	51 e4       	ldi	r21, 0x41	; 65
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9c 8b       	std	Y+20, r25	; 0x14
    1a9e:	8b 8b       	std	Y+19, r24	; 0x13
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <LCD_displayCharacter+0x6fe>
    1aa2:	80 e9       	ldi	r24, 0x90	; 144
    1aa4:	91 e0       	ldi	r25, 0x01	; 1
    1aa6:	9a 8b       	std	Y+18, r25	; 0x12
    1aa8:	89 8b       	std	Y+17, r24	; 0x11
    1aaa:	89 89       	ldd	r24, Y+17	; 0x11
    1aac:	9a 89       	ldd	r25, Y+18	; 0x12
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_displayCharacter+0x6ec>
    1ab2:	9a 8b       	std	Y+18, r25	; 0x12
    1ab4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	9c 8b       	std	Y+20, r25	; 0x14
    1abe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <LCD_displayCharacter+0x6e0>
    1ac8:	14 c0       	rjmp	.+40     	; 0x1af2 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	6d 89       	ldd	r22, Y+21	; 0x15
    1acc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ace:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9c 8b       	std	Y+20, r25	; 0x14
    1adc:	8b 8b       	std	Y+19, r24	; 0x13
    1ade:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae2:	98 8b       	std	Y+16, r25	; 0x10
    1ae4:	8f 87       	std	Y+15, r24	; 0x0f
    1ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae8:	98 89       	ldd	r25, Y+16	; 0x10
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <LCD_displayCharacter+0x728>
    1aee:	98 8b       	std	Y+16, r25	; 0x10
    1af0:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, E);
    1af2:	ab e3       	ldi	r26, 0x3B	; 59
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	eb e3       	ldi	r30, 0x3B	; 59
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	87 7f       	andi	r24, 0xF7	; 247
    1afe:	8c 93       	st	X, r24
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a0 e8       	ldi	r26, 0x80	; 128
    1b06:	bf e3       	ldi	r27, 0x3F	; 63
    1b08:	8b 87       	std	Y+11, r24	; 0x0b
    1b0a:	9c 87       	std	Y+12, r25	; 0x0c
    1b0c:	ad 87       	std	Y+13, r26	; 0x0d
    1b0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	4a e7       	ldi	r20, 0x7A	; 122
    1b1e:	55 e4       	ldi	r21, 0x45	; 69
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	8f 83       	std	Y+7, r24	; 0x07
    1b2a:	98 87       	std	Y+8, r25	; 0x08
    1b2c:	a9 87       	std	Y+9, r26	; 0x09
    1b2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b30:	6f 81       	ldd	r22, Y+7	; 0x07
    1b32:	78 85       	ldd	r23, Y+8	; 0x08
    1b34:	89 85       	ldd	r24, Y+9	; 0x09
    1b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e8       	ldi	r20, 0x80	; 128
    1b3e:	5f e3       	ldi	r21, 0x3F	; 63
    1b40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b44:	88 23       	and	r24, r24
    1b46:	2c f4       	brge	.+10     	; 0x1b52 <LCD_displayCharacter+0x790>
		__ticks = 1;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
    1b50:	3f c0       	rjmp	.+126    	; 0x1bd0 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    1b52:	6f 81       	ldd	r22, Y+7	; 0x07
    1b54:	78 85       	ldd	r23, Y+8	; 0x08
    1b56:	89 85       	ldd	r24, Y+9	; 0x09
    1b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	3f ef       	ldi	r19, 0xFF	; 255
    1b5e:	4f e7       	ldi	r20, 0x7F	; 127
    1b60:	57 e4       	ldi	r21, 0x47	; 71
    1b62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b66:	18 16       	cp	r1, r24
    1b68:	4c f5       	brge	.+82     	; 0x1bbc <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e2       	ldi	r20, 0x20	; 32
    1b78:	51 e4       	ldi	r21, 0x41	; 65
    1b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	bc 01       	movw	r22, r24
    1b84:	cd 01       	movw	r24, r26
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9e 83       	std	Y+6, r25	; 0x06
    1b90:	8d 83       	std	Y+5, r24	; 0x05
    1b92:	0f c0       	rjmp	.+30     	; 0x1bb2 <LCD_displayCharacter+0x7f0>
    1b94:	80 e9       	ldi	r24, 0x90	; 144
    1b96:	91 e0       	ldi	r25, 0x01	; 1
    1b98:	9c 83       	std	Y+4, r25	; 0x04
    1b9a:	8b 83       	std	Y+3, r24	; 0x03
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <LCD_displayCharacter+0x7de>
    1ba4:	9c 83       	std	Y+4, r25	; 0x04
    1ba6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    1baa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	9e 83       	std	Y+6, r25	; 0x06
    1bb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	69 f7       	brne	.-38     	; 0x1b94 <LCD_displayCharacter+0x7d2>
    1bba:	14 c0       	rjmp	.+40     	; 0x1be4 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bbe:	78 85       	ldd	r23, Y+8	; 0x08
    1bc0:	89 85       	ldd	r24, Y+9	; 0x09
    1bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9e 83       	std	Y+6, r25	; 0x06
    1bce:	8d 83       	std	Y+5, r24	; 0x05
    1bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd4:	9a 83       	std	Y+2, r25	; 0x02
    1bd6:	89 83       	std	Y+1, r24	; 0x01
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	9a 81       	ldd	r25, Y+2	; 0x02
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_displayCharacter+0x81a>
    1be0:	9a 83       	std	Y+2, r25	; 0x02
    1be2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1be4:	cd 59       	subi	r28, 0x9D	; 157
    1be6:	df 4f       	sbci	r29, 0xFF	; 255
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	08 95       	ret

00001bfc <LCD_displayString>:

/*
 * Description : A Function to display a string.
 */
void LCD_displayString(const sint8_t* str)
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <LCD_displayString+0x6>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	0a c0       	rjmp	.+20     	; 0x1c20 <LCD_displayString+0x24>
	while((*str) != '\0')
	{
		LCD_displayCharacter(*str);
    1c0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c10:	80 81       	ld	r24, Z
    1c12:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <LCD_displayCharacter>
		str++;
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	9a 83       	std	Y+2, r25	; 0x02
    1c1e:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description : A Function to display a string.
 */
void LCD_displayString(const sint8_t* str)
{
	while((*str) != '\0')
    1c20:	e9 81       	ldd	r30, Y+1	; 0x01
    1c22:	fa 81       	ldd	r31, Y+2	; 0x02
    1c24:	80 81       	ld	r24, Z
    1c26:	88 23       	and	r24, r24
    1c28:	89 f7       	brne	.-30     	; 0x1c0c <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*str);
		str++;
	}
}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <LCD_goToRowColumn>:

/*
 * Description : A Function to move the cursor to an exact spot.
 */
void LCD_goToRowColumn(uint8_t row, uint8_t col)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <LCD_goToRowColumn+0x6>
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <LCD_goToRowColumn+0x8>
    1c3c:	0f 92       	push	r0
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	8a 83       	std	Y+2, r24	; 0x02
    1c44:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t address;
	switch(row)
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	3d 83       	std	Y+5, r19	; 0x05
    1c4e:	2c 83       	std	Y+4, r18	; 0x04
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	9d 81       	ldd	r25, Y+5	; 0x05
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	91 05       	cpc	r25, r1
    1c58:	c1 f0       	breq	.+48     	; 0x1c8a <LCD_goToRowColumn+0x56>
    1c5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5e:	22 30       	cpi	r18, 0x02	; 2
    1c60:	31 05       	cpc	r19, r1
    1c62:	2c f4       	brge	.+10     	; 0x1c6e <LCD_goToRowColumn+0x3a>
    1c64:	8c 81       	ldd	r24, Y+4	; 0x04
    1c66:	9d 81       	ldd	r25, Y+5	; 0x05
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	61 f0       	breq	.+24     	; 0x1c84 <LCD_goToRowColumn+0x50>
    1c6c:	19 c0       	rjmp	.+50     	; 0x1ca0 <LCD_goToRowColumn+0x6c>
    1c6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c70:	3d 81       	ldd	r19, Y+5	; 0x05
    1c72:	22 30       	cpi	r18, 0x02	; 2
    1c74:	31 05       	cpc	r19, r1
    1c76:	69 f0       	breq	.+26     	; 0x1c92 <LCD_goToRowColumn+0x5e>
    1c78:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7c:	83 30       	cpi	r24, 0x03	; 3
    1c7e:	91 05       	cpc	r25, r1
    1c80:	61 f0       	breq	.+24     	; 0x1c9a <LCD_goToRowColumn+0x66>
    1c82:	0e c0       	rjmp	.+28     	; 0x1ca0 <LCD_goToRowColumn+0x6c>
	{
	case 0 :
		address = col;
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	0b c0       	rjmp	.+22     	; 0x1ca0 <LCD_goToRowColumn+0x6c>
		break;
	case 1 :
		address = col + 0x40;
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	80 5c       	subi	r24, 0xC0	; 192
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	07 c0       	rjmp	.+14     	; 0x1ca0 <LCD_goToRowColumn+0x6c>
		break;
	case 2 :
		address = col + 0x10;
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	80 5f       	subi	r24, 0xF0	; 240
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <LCD_goToRowColumn+0x6c>
		break;
	case 3 :
		address = col + 0x50;
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	80 5b       	subi	r24, 0xB0	; 176
    1c9e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(address | SET_CURSOR_LOCATION);
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	80 68       	ori	r24, 0x80	; 128
    1ca4:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <LCD_displayStringRowColumn>:

/*
 * Description : A Function to move the cursor to an exact spot and display a string at the spot.
 */
void LCD_displayStringRowColumn(uint8_t row, uint8_t col, const sint8_t* str)
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <LCD_displayStringRowColumn+0x6>
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <LCD_displayStringRowColumn+0x8>
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	6a 83       	std	Y+2, r22	; 0x02
    1cc8:	5c 83       	std	Y+4, r21	; 0x04
    1cca:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row, col);
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	6a 81       	ldd	r22, Y+2	; 0x02
    1cd0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_goToRowColumn>
	LCD_displayString(str);
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <LCD_displayString>
}
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <LCD_displayInteger>:

/*
 * Description : A Function to display an integer number.
 */
void LCD_displayInteger(sint32_t num)
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	63 97       	sbiw	r28, 0x13	; 19
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	68 8b       	std	Y+16, r22	; 0x10
    1d00:	79 8b       	std	Y+17, r23	; 0x11
    1d02:	8a 8b       	std	Y+18, r24	; 0x12
    1d04:	9b 8b       	std	Y+19, r25	; 0x13
	sint8_t buff[12];
	sint8_t* ptr = &buff[11]; 				// char *ptr = (buff + 11); [] is another way of describing the dereferencing operator
    1d06:	ce 01       	movw	r24, r28
    1d08:	04 96       	adiw	r24, 0x04	; 4
    1d0a:	0b 96       	adiw	r24, 0x0b	; 11
    1d0c:	9b 83       	std	Y+3, r25	; 0x03
    1d0e:	8a 83       	std	Y+2, r24	; 0x02
	char N_flag = 0;
    1d10:	19 82       	std	Y+1, r1	; 0x01
	if(num < 0)
    1d12:	88 89       	ldd	r24, Y+16	; 0x10
    1d14:	99 89       	ldd	r25, Y+17	; 0x11
    1d16:	aa 89       	ldd	r26, Y+18	; 0x12
    1d18:	bb 89       	ldd	r27, Y+19	; 0x13
    1d1a:	bb 23       	and	r27, r27
    1d1c:	8c f4       	brge	.+34     	; 0x1d40 <LCD_displayInteger+0x56>
	{
		N_flag = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	89 83       	std	Y+1, r24	; 0x01
		num = -num;
    1d22:	88 89       	ldd	r24, Y+16	; 0x10
    1d24:	99 89       	ldd	r25, Y+17	; 0x11
    1d26:	aa 89       	ldd	r26, Y+18	; 0x12
    1d28:	bb 89       	ldd	r27, Y+19	; 0x13
    1d2a:	b0 95       	com	r27
    1d2c:	a0 95       	com	r26
    1d2e:	90 95       	com	r25
    1d30:	81 95       	neg	r24
    1d32:	9f 4f       	sbci	r25, 0xFF	; 255
    1d34:	af 4f       	sbci	r26, 0xFF	; 255
    1d36:	bf 4f       	sbci	r27, 0xFF	; 255
    1d38:	88 8b       	std	Y+16, r24	; 0x10
    1d3a:	99 8b       	std	Y+17, r25	; 0x11
    1d3c:	aa 8b       	std	Y+18, r26	; 0x12
    1d3e:	bb 8b       	std	Y+19, r27	; 0x13
	}
	*ptr = '\0';
    1d40:	ea 81       	ldd	r30, Y+2	; 0x02
    1d42:	fb 81       	ldd	r31, Y+3	; 0x03
    1d44:	10 82       	st	Z, r1
	do{
	    *--ptr = (num % 10) + 48;
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	9b 83       	std	Y+3, r25	; 0x03
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
    1d50:	88 89       	ldd	r24, Y+16	; 0x10
    1d52:	99 89       	ldd	r25, Y+17	; 0x11
    1d54:	aa 89       	ldd	r26, Y+18	; 0x12
    1d56:	bb 89       	ldd	r27, Y+19	; 0x13
    1d58:	2a e0       	ldi	r18, 0x0A	; 10
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__divmodsi4>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	80 5d       	subi	r24, 0xD0	; 208
    1d6e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d70:	fb 81       	ldd	r31, Y+3	; 0x03
    1d72:	80 83       	st	Z, r24
	    num /= 10;
    1d74:	88 89       	ldd	r24, Y+16	; 0x10
    1d76:	99 89       	ldd	r25, Y+17	; 0x11
    1d78:	aa 89       	ldd	r26, Y+18	; 0x12
    1d7a:	bb 89       	ldd	r27, Y+19	; 0x13
    1d7c:	2a e0       	ldi	r18, 0x0A	; 10
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	50 e0       	ldi	r21, 0x00	; 0
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__divmodsi4>
    1d8c:	da 01       	movw	r26, r20
    1d8e:	c9 01       	movw	r24, r18
    1d90:	88 8b       	std	Y+16, r24	; 0x10
    1d92:	99 8b       	std	Y+17, r25	; 0x11
    1d94:	aa 8b       	std	Y+18, r26	; 0x12
    1d96:	bb 8b       	std	Y+19, r27	; 0x13
	}while(num != 0);
    1d98:	88 89       	ldd	r24, Y+16	; 0x10
    1d9a:	99 89       	ldd	r25, Y+17	; 0x11
    1d9c:	aa 89       	ldd	r26, Y+18	; 0x12
    1d9e:	bb 89       	ldd	r27, Y+19	; 0x13
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	a1 05       	cpc	r26, r1
    1da4:	b1 05       	cpc	r27, r1
    1da6:	79 f6       	brne	.-98     	; 0x1d46 <LCD_displayInteger+0x5c>
	if(N_flag)
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	88 23       	and	r24, r24
    1dac:	49 f0       	breq	.+18     	; 0x1dc0 <LCD_displayInteger+0xd6>
		*--ptr = '-';
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	9b 81       	ldd	r25, Y+3	; 0x03
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	9b 83       	std	Y+3, r25	; 0x03
    1db6:	8a 83       	std	Y+2, r24	; 0x02
    1db8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dba:	fb 81       	ldd	r31, Y+3	; 0x03
    1dbc:	8d e2       	ldi	r24, 0x2D	; 45
    1dbe:	80 83       	st	Z, r24
	LCD_displayString(ptr);
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc4:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <LCD_displayString>
}
    1dc8:	63 96       	adiw	r28, 0x13	; 19
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <LCD_clearScreen>:

/*
 * Description : A Function to Clear the LCD Screen.
 */
void LCD_clearScreen(void)
{
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
}
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <test>:
uint16_t gu16_distance = 0;
sint8_t gas8_str[5];


void test(void)
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
	gu8_currentSpeed = SPI_receiveByte();
    1df6:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <SPI_receiveByte>
    1dfa:	80 93 9c 00 	sts	0x009C, r24
	gu8_time++;
    1dfe:	80 91 9d 00 	lds	r24, 0x009D
    1e02:	8f 5f       	subi	r24, 0xFF	; 255
    1e04:	80 93 9d 00 	sts	0x009D, r24
	gu16_distance += gu8_currentSpeed;
    1e08:	80 91 9c 00 	lds	r24, 0x009C
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	80 91 9e 00 	lds	r24, 0x009E
    1e14:	90 91 9f 00 	lds	r25, 0x009F
    1e18:	82 0f       	add	r24, r18
    1e1a:	93 1f       	adc	r25, r19
    1e1c:	90 93 9f 00 	sts	0x009F, r25
    1e20:	80 93 9e 00 	sts	0x009E, r24
}
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <main>:

int main(void)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	64 97       	sbiw	r28, 0x14	; 20
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_totalDistance;

	gpioPinDirection(GPIOC, BIT0 | BIT1, OUTPUT);
    1e3e:	82 e0       	ldi	r24, 0x02	; 2
    1e40:	63 e0       	ldi	r22, 0x03	; 3
    1e42:	4f ef       	ldi	r20, 0xFF	; 255
    1e44:	0e 94 2a 14 	call	0x2854	; 0x2854 <gpioPinDirection>

	pushButtonInit(BTN_0);
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <pushButtonInit>
	pushButtonInit(BTN_1);
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <pushButtonInit>
			UART_SENDER_MODE,
			UART_EIGHT_BITS,
			UART_PARITY_DISABLED,
			UART_ONE_STOP_BIT,
			UART_INTERRUPT_DISABLED
	};
    1e54:	ae 01       	movw	r20, r28
    1e56:	4e 5f       	subi	r20, 0xFE	; 254
    1e58:	5f 4f       	sbci	r21, 0xFF	; 255
    1e5a:	5c 87       	std	Y+12, r21	; 0x0c
    1e5c:	4b 87       	std	Y+11, r20	; 0x0b
    1e5e:	85 e9       	ldi	r24, 0x95	; 149
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9e 87       	std	Y+14, r25	; 0x0e
    1e64:	8d 87       	std	Y+13, r24	; 0x0d
    1e66:	96 e0       	ldi	r25, 0x06	; 6
    1e68:	9f 87       	std	Y+15, r25	; 0x0f
    1e6a:	ed 85       	ldd	r30, Y+13	; 0x0d
    1e6c:	fe 85       	ldd	r31, Y+14	; 0x0e
    1e6e:	00 80       	ld	r0, Z
    1e70:	4d 85       	ldd	r20, Y+13	; 0x0d
    1e72:	5e 85       	ldd	r21, Y+14	; 0x0e
    1e74:	4f 5f       	subi	r20, 0xFF	; 255
    1e76:	5f 4f       	sbci	r21, 0xFF	; 255
    1e78:	5e 87       	std	Y+14, r21	; 0x0e
    1e7a:	4d 87       	std	Y+13, r20	; 0x0d
    1e7c:	eb 85       	ldd	r30, Y+11	; 0x0b
    1e7e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1e80:	00 82       	st	Z, r0
    1e82:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e84:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e86:	4f 5f       	subi	r20, 0xFF	; 255
    1e88:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8a:	5c 87       	std	Y+12, r21	; 0x0c
    1e8c:	4b 87       	std	Y+11, r20	; 0x0b
    1e8e:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e90:	51 50       	subi	r21, 0x01	; 1
    1e92:	5f 87       	std	Y+15, r21	; 0x0f
    1e94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e96:	88 23       	and	r24, r24
    1e98:	41 f7       	brne	.-48     	; 0x1e6a <main+0x40>

	SPI_ConfigType spi_configtype = {
			SPI_SLAVE,
			SPI_INTERRUPT_ENABLED,
			SPI_F_OSC_4
	};
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	38 96       	adiw	r30, 0x08	; 8
    1e9e:	f9 8b       	std	Y+17, r31	; 0x11
    1ea0:	e8 8b       	std	Y+16, r30	; 0x10
    1ea2:	42 e9       	ldi	r20, 0x92	; 146
    1ea4:	50 e0       	ldi	r21, 0x00	; 0
    1ea6:	5b 8b       	std	Y+19, r21	; 0x13
    1ea8:	4a 8b       	std	Y+18, r20	; 0x12
    1eaa:	53 e0       	ldi	r21, 0x03	; 3
    1eac:	5c 8b       	std	Y+20, r21	; 0x14
    1eae:	ea 89       	ldd	r30, Y+18	; 0x12
    1eb0:	fb 89       	ldd	r31, Y+19	; 0x13
    1eb2:	00 80       	ld	r0, Z
    1eb4:	4a 89       	ldd	r20, Y+18	; 0x12
    1eb6:	5b 89       	ldd	r21, Y+19	; 0x13
    1eb8:	4f 5f       	subi	r20, 0xFF	; 255
    1eba:	5f 4f       	sbci	r21, 0xFF	; 255
    1ebc:	5b 8b       	std	Y+19, r21	; 0x13
    1ebe:	4a 8b       	std	Y+18, r20	; 0x12
    1ec0:	e8 89       	ldd	r30, Y+16	; 0x10
    1ec2:	f9 89       	ldd	r31, Y+17	; 0x11
    1ec4:	00 82       	st	Z, r0
    1ec6:	48 89       	ldd	r20, Y+16	; 0x10
    1ec8:	59 89       	ldd	r21, Y+17	; 0x11
    1eca:	4f 5f       	subi	r20, 0xFF	; 255
    1ecc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ece:	59 8b       	std	Y+17, r21	; 0x11
    1ed0:	48 8b       	std	Y+16, r20	; 0x10
    1ed2:	5c 89       	ldd	r21, Y+20	; 0x14
    1ed4:	51 50       	subi	r21, 0x01	; 1
    1ed6:	5c 8b       	std	Y+20, r21	; 0x14
    1ed8:	8c 89       	ldd	r24, Y+20	; 0x14
    1eda:	88 23       	and	r24, r24
    1edc:	41 f7       	brne	.-48     	; 0x1eae <main+0x84>

	LCD_init();
    1ede:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_init>

	UART_init(&uart_configtype);
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	02 96       	adiw	r24, 0x02	; 2
    1ee6:	0e 94 cc 11 	call	0x2398	; 0x2398 <UART_init>
	SPI_init(&spi_configtype);
    1eea:	ce 01       	movw	r24, r28
    1eec:	08 96       	adiw	r24, 0x08	; 8
    1eee:	0e 94 58 10 	call	0x20b0	; 0x20b0 <SPI_init>

	SPI_setCallBack(&test);
    1ef2:	87 ef       	ldi	r24, 0xF7	; 247
    1ef4:	9e e0       	ldi	r25, 0x0E	; 14
    1ef6:	0e 94 bf 10 	call	0x217e	; 0x217e <SPI_setCallBack>

	sei();
    1efa:	78 94       	sei

	while(1)
	{
		if(pushButtonGetStatus(BTN_0) == Pressed)
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <pushButtonGetStatus>
    1f02:	82 30       	cpi	r24, 0x02	; 2
    1f04:	99 f4       	brne	.+38     	; 0x1f2c <main+0x102>
		{
			gu8_time = 0;
    1f06:	10 92 9d 00 	sts	0x009D, r1
			gu16_distance = 0;
    1f0a:	10 92 9f 00 	sts	0x009F, r1
    1f0e:	10 92 9e 00 	sts	0x009E, r1
			gu8_currentSpeed = 0;
    1f12:	10 92 9c 00 	sts	0x009C, r1
			while(pushButtonGetStatus(BTN_0) == Pressed);
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <pushButtonGetStatus>
    1f1c:	82 30       	cpi	r24, 0x02	; 2
    1f1e:	d9 f3       	breq	.-10     	; 0x1f16 <main+0xec>
			gpioPinWrite(GPIOC, BIT0, HIGH);
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	61 e0       	ldi	r22, 0x01	; 1
    1f24:	4f ef       	ldi	r20, 0xFF	; 255
    1f26:	0e 94 96 14 	call	0x292c	; 0x292c <gpioPinWrite>
    1f2a:	0a c0       	rjmp	.+20     	; 0x1f40 <main+0x116>
		}else if(pushButtonGetStatus(BTN_0) == Released)
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <pushButtonGetStatus>
    1f32:	88 23       	and	r24, r24
    1f34:	29 f4       	brne	.+10     	; 0x1f40 <main+0x116>
		{
			gpioPinWrite(GPIOC, BIT0, LOW);
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	0e 94 96 14 	call	0x292c	; 0x292c <gpioPinWrite>
		}

		if(pushButtonGetStatus(BTN_1) == Pressed)
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <pushButtonGetStatus>
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <main+0x122>
    1f4a:	73 c0       	rjmp	.+230    	; 0x2032 <main+0x208>
		{
			while(pushButtonGetStatus(BTN_1) == Pressed);
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <pushButtonGetStatus>
    1f52:	82 30       	cpi	r24, 0x02	; 2
    1f54:	d9 f3       	breq	.-10     	; 0x1f4c <main+0x122>
			gpioPinWrite(GPIOC, BIT1, HIGH);
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	62 e0       	ldi	r22, 0x02	; 2
    1f5a:	4f ef       	ldi	r20, 0xFF	; 255
    1f5c:	0e 94 96 14 	call	0x292c	; 0x292c <gpioPinWrite>

            UART_Send_String("time = ");
    1f60:	80 e6       	ldi	r24, 0x60	; 96
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	0e 94 a9 12 	call	0x2552	; 0x2552 <UART_Send_String>
			itoa((gu8_time), gas8_str, 10);
    1f68:	80 91 9d 00 	lds	r24, 0x009D
    1f6c:	88 2f       	mov	r24, r24
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	2a eb       	ldi	r18, 0xBA	; 186
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	b9 01       	movw	r22, r18
    1f76:	4a e0       	ldi	r20, 0x0A	; 10
    1f78:	50 e0       	ldi	r21, 0x00	; 0
    1f7a:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <itoa>
			UART_Send_String(gas8_str);
    1f7e:	8a eb       	ldi	r24, 0xBA	; 186
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 a9 12 	call	0x2552	; 0x2552 <UART_Send_String>
			UART_Send_String(" sec");
    1f86:	88 e6       	ldi	r24, 0x68	; 104
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	0e 94 a9 12 	call	0x2552	; 0x2552 <UART_Send_String>
			UART_transmit('\r');
    1f8e:	8d e0       	ldi	r24, 0x0D	; 13
    1f90:	0e 94 75 12 	call	0x24ea	; 0x24ea <UART_transmit>

			UART_Send_String("distance = ");
    1f94:	8d e6       	ldi	r24, 0x6D	; 109
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	0e 94 a9 12 	call	0x2552	; 0x2552 <UART_Send_String>
			au8_totalDistance = gu16_distance - (gu8_time-1) * '0';
    1f9c:	80 91 9d 00 	lds	r24, 0x009D
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	80 ed       	ldi	r24, 0xD0	; 208
    1fa6:	9f ef       	ldi	r25, 0xFF	; 255
    1fa8:	fc 01       	movw	r30, r24
    1faa:	2e 9f       	mul	r18, r30
    1fac:	c0 01       	movw	r24, r0
    1fae:	2f 9f       	mul	r18, r31
    1fb0:	90 0d       	add	r25, r0
    1fb2:	3e 9f       	mul	r19, r30
    1fb4:	90 0d       	add	r25, r0
    1fb6:	11 24       	eor	r1, r1
    1fb8:	28 2f       	mov	r18, r24
    1fba:	80 91 9e 00 	lds	r24, 0x009E
    1fbe:	90 91 9f 00 	lds	r25, 0x009F
    1fc2:	82 0f       	add	r24, r18
    1fc4:	80 5d       	subi	r24, 0xD0	; 208
    1fc6:	89 83       	std	Y+1, r24	; 0x01
            itoa((au8_totalDistance - '0'), gas8_str, 10);
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	c0 97       	sbiw	r24, 0x30	; 48
    1fd0:	2a eb       	ldi	r18, 0xBA	; 186
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	b9 01       	movw	r22, r18
    1fd6:	4a e0       	ldi	r20, 0x0A	; 10
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <itoa>
            UART_Send_String(gas8_str);
    1fde:	8a eb       	ldi	r24, 0xBA	; 186
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 a9 12 	call	0x2552	; 0x2552 <UART_Send_String>
			UART_Send_String(" m");
    1fe6:	89 e7       	ldi	r24, 0x79	; 121
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0e 94 a9 12 	call	0x2552	; 0x2552 <UART_Send_String>
			UART_transmit('\r');
    1fee:	8d e0       	ldi	r24, 0x0D	; 13
    1ff0:	0e 94 75 12 	call	0x24ea	; 0x24ea <UART_transmit>

			UART_Send_String("speed = ");
    1ff4:	8c e7       	ldi	r24, 0x7C	; 124
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	0e 94 a9 12 	call	0x2552	; 0x2552 <UART_Send_String>
			itoa((gu8_currentSpeed - '0'), gas8_str, 10);
    1ffc:	80 91 9c 00 	lds	r24, 0x009C
    2000:	88 2f       	mov	r24, r24
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	c0 97       	sbiw	r24, 0x30	; 48
    2006:	2a eb       	ldi	r18, 0xBA	; 186
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	b9 01       	movw	r22, r18
    200c:	4a e0       	ldi	r20, 0x0A	; 10
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <itoa>
			UART_Send_String(gas8_str);
    2014:	8a eb       	ldi	r24, 0xBA	; 186
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	0e 94 a9 12 	call	0x2552	; 0x2552 <UART_Send_String>
			UART_Send_String(" m/s");
    201c:	85 e8       	ldi	r24, 0x85	; 133
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	0e 94 a9 12 	call	0x2552	; 0x2552 <UART_Send_String>
			UART_transmit('\r');
    2024:	8d e0       	ldi	r24, 0x0D	; 13
    2026:	0e 94 75 12 	call	0x24ea	; 0x24ea <UART_transmit>
			UART_transmit('\r');
    202a:	8d e0       	ldi	r24, 0x0D	; 13
    202c:	0e 94 75 12 	call	0x24ea	; 0x24ea <UART_transmit>
    2030:	65 cf       	rjmp	.-310    	; 0x1efc <main+0xd2>
		}else if(pushButtonGetStatus(BTN_1) == Released)
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <pushButtonGetStatus>
    2038:	88 23       	and	r24, r24
    203a:	09 f0       	breq	.+2      	; 0x203e <main+0x214>
    203c:	5f cf       	rjmp	.-322    	; 0x1efc <main+0xd2>
		{
			gpioPinWrite(GPIOC, BIT1, LOW);
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	62 e0       	ldi	r22, 0x02	; 2
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	0e 94 96 14 	call	0x292c	; 0x292c <gpioPinWrite>
    2048:	59 cf       	rjmp	.-334    	; 0x1efc <main+0xd2>

0000204a <__vector_12>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(SPI_STC_vect)
{
    204a:	1f 92       	push	r1
    204c:	0f 92       	push	r0
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	0f 92       	push	r0
    2052:	11 24       	eor	r1, r1
    2054:	2f 93       	push	r18
    2056:	3f 93       	push	r19
    2058:	4f 93       	push	r20
    205a:	5f 93       	push	r21
    205c:	6f 93       	push	r22
    205e:	7f 93       	push	r23
    2060:	8f 93       	push	r24
    2062:	9f 93       	push	r25
    2064:	af 93       	push	r26
    2066:	bf 93       	push	r27
    2068:	ef 93       	push	r30
    206a:	ff 93       	push	r31
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
	if(g_SPI_callBackPtr != NULL)
    2074:	80 91 a0 00 	lds	r24, 0x00A0
    2078:	90 91 a1 00 	lds	r25, 0x00A1
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	29 f0       	breq	.+10     	; 0x208a <__vector_12+0x40>
	{
		g_SPI_callBackPtr();
    2080:	e0 91 a0 00 	lds	r30, 0x00A0
    2084:	f0 91 a1 00 	lds	r31, 0x00A1
    2088:	09 95       	icall
	}
}
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	ff 91       	pop	r31
    2090:	ef 91       	pop	r30
    2092:	bf 91       	pop	r27
    2094:	af 91       	pop	r26
    2096:	9f 91       	pop	r25
    2098:	8f 91       	pop	r24
    209a:	7f 91       	pop	r23
    209c:	6f 91       	pop	r22
    209e:	5f 91       	pop	r21
    20a0:	4f 91       	pop	r20
    20a2:	3f 91       	pop	r19
    20a4:	2f 91       	pop	r18
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	0f 90       	pop	r0
    20ac:	1f 90       	pop	r1
    20ae:	18 95       	reti

000020b0 <SPI_init>:

/*
 * Description : A Function to Initialize the SPI Driver.
 */
void SPI_init(const SPI_ConfigType* ConfigPtr)
{
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <SPI_init+0x6>
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	9a 83       	std	Y+2, r25	; 0x02
    20bc:	89 83       	std	Y+1, r24	; 0x01
	/* In case the MCU will be configured as a slave */
	if(ConfigPtr->MasterSlaveSelect == SPI_SLAVE)
    20be:	e9 81       	ldd	r30, Y+1	; 0x01
    20c0:	fa 81       	ldd	r31, Y+2	; 0x02
    20c2:	80 81       	ld	r24, Z
    20c4:	88 23       	and	r24, r24
    20c6:	91 f4       	brne	.+36     	; 0x20ec <SPI_init+0x3c>
	{
		/* select the slave mode and set the pins accordingly */
		gpioPinDirection(SPI_GPIO, SS | MOSI | SCK, INPUT);
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	60 eb       	ldi	r22, 0xB0	; 176
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	0e 94 2a 14 	call	0x2854	; 0x2854 <gpioPinDirection>
		gpioPinDirection(SPI_GPIO, MISO, OUTPUT);
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	60 e4       	ldi	r22, 0x40	; 64
    20d6:	4f ef       	ldi	r20, 0xFF	; 255
    20d8:	0e 94 2a 14 	call	0x2854	; 0x2854 <gpioPinDirection>
		CLEAR_BIT(SPCR, MSTR);
    20dc:	ad e2       	ldi	r26, 0x2D	; 45
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	ed e2       	ldi	r30, 0x2D	; 45
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	8f 7e       	andi	r24, 0xEF	; 239
    20e8:	8c 93       	st	X, r24
    20ea:	16 c0       	rjmp	.+44     	; 0x2118 <SPI_init+0x68>
	}
	/* In case the MCU will be configured as a master */
	else if(ConfigPtr->MasterSlaveSelect == SPI_MASTER)
    20ec:	e9 81       	ldd	r30, Y+1	; 0x01
    20ee:	fa 81       	ldd	r31, Y+2	; 0x02
    20f0:	80 81       	ld	r24, Z
    20f2:	81 30       	cpi	r24, 0x01	; 1
    20f4:	89 f4       	brne	.+34     	; 0x2118 <SPI_init+0x68>
	{
		/* select the master mode and set the pins accordingly */
		gpioPinDirection(SPI_GPIO, SS | MOSI | SCK, OUTPUT);
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	60 eb       	ldi	r22, 0xB0	; 176
    20fa:	4f ef       	ldi	r20, 0xFF	; 255
    20fc:	0e 94 2a 14 	call	0x2854	; 0x2854 <gpioPinDirection>
		gpioPinDirection(SPI_GPIO, MISO, INPUT);
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	60 e4       	ldi	r22, 0x40	; 64
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	0e 94 2a 14 	call	0x2854	; 0x2854 <gpioPinDirection>
		SET_BIT(SPCR, MSTR);
    210a:	ad e2       	ldi	r26, 0x2D	; 45
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	ed e2       	ldi	r30, 0x2D	; 45
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	80 61       	ori	r24, 0x10	; 16
    2116:	8c 93       	st	X, r24
	}

	/* Selecting the interrupt mode (enabled of disabled) */
	SPCR = (SPCR & 0x7F) | ConfigPtr->Mode;
    2118:	ad e2       	ldi	r26, 0x2D	; 45
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	ed e2       	ldi	r30, 0x2D	; 45
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	98 2f       	mov	r25, r24
    2124:	9f 77       	andi	r25, 0x7F	; 127
    2126:	e9 81       	ldd	r30, Y+1	; 0x01
    2128:	fa 81       	ldd	r31, Y+2	; 0x02
    212a:	81 81       	ldd	r24, Z+1	; 0x01
    212c:	89 2b       	or	r24, r25
    212e:	8c 93       	st	X, r24
	/* Enable the SPI module */
	SET_BIT(SPCR, SPE);
    2130:	ad e2       	ldi	r26, 0x2D	; 45
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	ed e2       	ldi	r30, 0x2D	; 45
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	80 64       	ori	r24, 0x40	; 64
    213c:	8c 93       	st	X, r24

	/* Selecting the clock rate */
	SPCR = (SPCR & 0xFC) | ((ConfigPtr->ClockRateSelect) & 0x03);
    213e:	ad e2       	ldi	r26, 0x2D	; 45
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	ed e2       	ldi	r30, 0x2D	; 45
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	98 2f       	mov	r25, r24
    214a:	9c 7f       	andi	r25, 0xFC	; 252
    214c:	e9 81       	ldd	r30, Y+1	; 0x01
    214e:	fa 81       	ldd	r31, Y+2	; 0x02
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	83 70       	andi	r24, 0x03	; 3
    2154:	89 2b       	or	r24, r25
    2156:	8c 93       	st	X, r24
	SPSR = (SPSR & 0xFE) | ((ConfigPtr->ClockRateSelect) >> 2);
    2158:	ae e2       	ldi	r26, 0x2E	; 46
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	ee e2       	ldi	r30, 0x2E	; 46
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	98 2f       	mov	r25, r24
    2164:	9e 7f       	andi	r25, 0xFE	; 254
    2166:	e9 81       	ldd	r30, Y+1	; 0x01
    2168:	fa 81       	ldd	r31, Y+2	; 0x02
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	86 95       	lsr	r24
    216e:	86 95       	lsr	r24
    2170:	89 2b       	or	r24, r25
    2172:	8c 93       	st	X, r24
}
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <SPI_setCallBack>:

/*
 * Description : A Function to set the call back function.
 */
void SPI_setCallBack(void(*a_ptr)(void))
{
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	00 d0       	rcall	.+0      	; 0x2184 <SPI_setCallBack+0x6>
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	9a 83       	std	Y+2, r25	; 0x02
    218a:	89 83       	std	Y+1, r24	; 0x01
	g_SPI_callBackPtr = (volatile void (*)(void))a_ptr;
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	90 93 a1 00 	sts	0x00A1, r25
    2194:	80 93 a0 00 	sts	0x00A0, r24
}
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <SPI_sendByte>:

/*
 * Description : A Function to send a byte.
 */
void SPI_sendByte(const uint8_t data)
{
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	0f 92       	push	r0
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	89 83       	std	Y+1, r24	; 0x01
	/* send the data */
	SPDR = data;
    21ae:	ef e2       	ldi	r30, 0x2F	; 47
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	80 83       	st	Z, r24
	/* busy-waiting the SPIE bit in the SPCR register in case interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
    21b6:	ed e2       	ldi	r30, 0x2D	; 45
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	88 23       	and	r24, r24
    21be:	2c f0       	brlt	.+10     	; 0x21ca <SPI_sendByte+0x28>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
    21c0:	ee e2       	ldi	r30, 0x2E	; 46
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	88 23       	and	r24, r24
    21c8:	dc f7       	brge	.-10     	; 0x21c0 <SPI_sendByte+0x1e>
	}
}
    21ca:	0f 90       	pop	r0
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <SPI_receiveByte>:

/*
 * Description : A Function to receive a byte.
 */
uint8_t SPI_receiveByte(void)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
	/* busy-waiting the SPIE bit in case the interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
    21da:	ed e2       	ldi	r30, 0x2D	; 45
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	88 23       	and	r24, r24
    21e2:	2c f0       	brlt	.+10     	; 0x21ee <SPI_receiveByte+0x1c>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
    21e4:	ee e2       	ldi	r30, 0x2E	; 46
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	88 23       	and	r24, r24
    21ec:	dc f7       	brge	.-10     	; 0x21e4 <SPI_receiveByte+0x12>
	}
	/* read the data */
	return SPDR;
    21ee:	ef e2       	ldi	r30, 0x2F	; 47
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
}
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <__vector_13>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(USART_RXC_vect)
{
    21fa:	1f 92       	push	r1
    21fc:	0f 92       	push	r0
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	0f 92       	push	r0
    2202:	11 24       	eor	r1, r1
    2204:	2f 93       	push	r18
    2206:	3f 93       	push	r19
    2208:	4f 93       	push	r20
    220a:	5f 93       	push	r21
    220c:	6f 93       	push	r22
    220e:	7f 93       	push	r23
    2210:	8f 93       	push	r24
    2212:	9f 93       	push	r25
    2214:	af 93       	push	r26
    2216:	bf 93       	push	r27
    2218:	ef 93       	push	r30
    221a:	ff 93       	push	r31
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
	if(g_RXC_callBackPtr != NULL)
    2224:	80 91 a4 00 	lds	r24, 0x00A4
    2228:	90 91 a5 00 	lds	r25, 0x00A5
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	29 f0       	breq	.+10     	; 0x223a <__vector_13+0x40>
	{
		g_RXC_callBackPtr();
    2230:	e0 91 a4 00 	lds	r30, 0x00A4
    2234:	f0 91 a5 00 	lds	r31, 0x00A5
    2238:	09 95       	icall
	}
}
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	ff 91       	pop	r31
    2240:	ef 91       	pop	r30
    2242:	bf 91       	pop	r27
    2244:	af 91       	pop	r26
    2246:	9f 91       	pop	r25
    2248:	8f 91       	pop	r24
    224a:	7f 91       	pop	r23
    224c:	6f 91       	pop	r22
    224e:	5f 91       	pop	r21
    2250:	4f 91       	pop	r20
    2252:	3f 91       	pop	r19
    2254:	2f 91       	pop	r18
    2256:	0f 90       	pop	r0
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	0f 90       	pop	r0
    225c:	1f 90       	pop	r1
    225e:	18 95       	reti

00002260 <__vector_14>:

ISR(USART_UDRE_vect)
{
    2260:	1f 92       	push	r1
    2262:	0f 92       	push	r0
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	0f 92       	push	r0
    2268:	11 24       	eor	r1, r1
    226a:	2f 93       	push	r18
    226c:	3f 93       	push	r19
    226e:	4f 93       	push	r20
    2270:	5f 93       	push	r21
    2272:	6f 93       	push	r22
    2274:	7f 93       	push	r23
    2276:	8f 93       	push	r24
    2278:	9f 93       	push	r25
    227a:	af 93       	push	r26
    227c:	bf 93       	push	r27
    227e:	ef 93       	push	r30
    2280:	ff 93       	push	r31
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
	if(g_UDRE_callBackPtr != NULL)
    228a:	80 91 a6 00 	lds	r24, 0x00A6
    228e:	90 91 a7 00 	lds	r25, 0x00A7
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	29 f0       	breq	.+10     	; 0x22a0 <__vector_14+0x40>
	{
		g_UDRE_callBackPtr();
    2296:	e0 91 a6 00 	lds	r30, 0x00A6
    229a:	f0 91 a7 00 	lds	r31, 0x00A7
    229e:	09 95       	icall
	}
}
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	ff 91       	pop	r31
    22a6:	ef 91       	pop	r30
    22a8:	bf 91       	pop	r27
    22aa:	af 91       	pop	r26
    22ac:	9f 91       	pop	r25
    22ae:	8f 91       	pop	r24
    22b0:	7f 91       	pop	r23
    22b2:	6f 91       	pop	r22
    22b4:	5f 91       	pop	r21
    22b6:	4f 91       	pop	r20
    22b8:	3f 91       	pop	r19
    22ba:	2f 91       	pop	r18
    22bc:	0f 90       	pop	r0
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	0f 90       	pop	r0
    22c2:	1f 90       	pop	r1
    22c4:	18 95       	reti

000022c6 <__vector_15>:

ISR(USART_TXC_vect)
{
    22c6:	1f 92       	push	r1
    22c8:	0f 92       	push	r0
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	0f 92       	push	r0
    22ce:	11 24       	eor	r1, r1
    22d0:	2f 93       	push	r18
    22d2:	3f 93       	push	r19
    22d4:	4f 93       	push	r20
    22d6:	5f 93       	push	r21
    22d8:	6f 93       	push	r22
    22da:	7f 93       	push	r23
    22dc:	8f 93       	push	r24
    22de:	9f 93       	push	r25
    22e0:	af 93       	push	r26
    22e2:	bf 93       	push	r27
    22e4:	ef 93       	push	r30
    22e6:	ff 93       	push	r31
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
	if(g_TXC_callBackPtr != NULL)
    22f0:	80 91 a2 00 	lds	r24, 0x00A2
    22f4:	90 91 a3 00 	lds	r25, 0x00A3
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	29 f0       	breq	.+10     	; 0x2306 <__vector_15+0x40>
	{
		g_TXC_callBackPtr();
    22fc:	e0 91 a2 00 	lds	r30, 0x00A2
    2300:	f0 91 a3 00 	lds	r31, 0x00A3
    2304:	09 95       	icall
	}
}
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	ff 91       	pop	r31
    230c:	ef 91       	pop	r30
    230e:	bf 91       	pop	r27
    2310:	af 91       	pop	r26
    2312:	9f 91       	pop	r25
    2314:	8f 91       	pop	r24
    2316:	7f 91       	pop	r23
    2318:	6f 91       	pop	r22
    231a:	5f 91       	pop	r21
    231c:	4f 91       	pop	r20
    231e:	3f 91       	pop	r19
    2320:	2f 91       	pop	r18
    2322:	0f 90       	pop	r0
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	0f 90       	pop	r0
    2328:	1f 90       	pop	r1
    232a:	18 95       	reti

0000232c <UART_TXC_setCallBack>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void UART_TXC_setCallBack(void(*local_ptr)(void))
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	00 d0       	rcall	.+0      	; 0x2332 <UART_TXC_setCallBack+0x6>
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	9a 83       	std	Y+2, r25	; 0x02
    2338:	89 83       	std	Y+1, r24	; 0x01
	g_TXC_callBackPtr = (volatile void(*)(void))local_ptr;
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	9a 81       	ldd	r25, Y+2	; 0x02
    233e:	90 93 a3 00 	sts	0x00A3, r25
    2342:	80 93 a2 00 	sts	0x00A2, r24
}
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <UART_RXC_setCallBack>:

void UART_RXC_setCallBack(void(*local_ptr)(void))
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <UART_RXC_setCallBack+0x6>
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	9a 83       	std	Y+2, r25	; 0x02
    235c:	89 83       	std	Y+1, r24	; 0x01
	g_RXC_callBackPtr = (volatile void(*)(void))local_ptr;
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	9a 81       	ldd	r25, Y+2	; 0x02
    2362:	90 93 a5 00 	sts	0x00A5, r25
    2366:	80 93 a4 00 	sts	0x00A4, r24
}
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <UART_UDRE_setCallBack>:

void UART_UDRE_setCallBack(void(*local_ptr)(void))
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	00 d0       	rcall	.+0      	; 0x237a <UART_UDRE_setCallBack+0x6>
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	89 83       	std	Y+1, r24	; 0x01
	g_UDRE_callBackPtr = (volatile void(*)(void))local_ptr;
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	9a 81       	ldd	r25, Y+2	; 0x02
    2386:	90 93 a7 00 	sts	0x00A7, r25
    238a:	80 93 a6 00 	sts	0x00A6, r24
}
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <UART_init>:

void UART_init(const UART_ConfigType* ConfigPtr)
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	00 d0       	rcall	.+0      	; 0x239e <UART_init+0x6>
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <UART_init+0x8>
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
	/* Activating double speed mode */
	SET_BIT(UCSRA, U2X);
    23a8:	ab e2       	ldi	r26, 0x2B	; 43
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	eb e2       	ldi	r30, 0x2B	; 43
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	82 60       	ori	r24, 0x02	; 2
    23b4:	8c 93       	st	X, r24

	/* Deciding whether the MCU will operate as a sender/receiver/sender and receiver */
	switch(ConfigPtr->communicationMode)
    23b6:	e9 81       	ldd	r30, Y+1	; 0x01
    23b8:	fa 81       	ldd	r31, Y+2	; 0x02
    23ba:	81 81       	ldd	r24, Z+1	; 0x01
    23bc:	28 2f       	mov	r18, r24
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	3c 83       	std	Y+4, r19	; 0x04
    23c2:	2b 83       	std	Y+3, r18	; 0x03
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	81 30       	cpi	r24, 0x01	; 1
    23ca:	91 05       	cpc	r25, r1
    23cc:	f1 f0       	breq	.+60     	; 0x240a <UART_init+0x72>
    23ce:	2b 81       	ldd	r18, Y+3	; 0x03
    23d0:	3c 81       	ldd	r19, Y+4	; 0x04
    23d2:	22 30       	cpi	r18, 0x02	; 2
    23d4:	31 05       	cpc	r19, r1
    23d6:	69 f1       	breq	.+90     	; 0x2432 <UART_init+0x9a>
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	09 f0       	breq	.+2      	; 0x23e2 <UART_init+0x4a>
    23e0:	49 c0       	rjmp	.+146    	; 0x2474 <UART_init+0xdc>
	{
	case UART_SENDER_MODE:
		SET_BIT(UCSRB, TXEN);
    23e2:	aa e2       	ldi	r26, 0x2A	; 42
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	ea e2       	ldi	r30, 0x2A	; 42
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	88 60       	ori	r24, 0x08	; 8
    23ee:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
    23f0:	e9 81       	ldd	r30, Y+1	; 0x01
    23f2:	fa 81       	ldd	r31, Y+2	; 0x02
    23f4:	85 81       	ldd	r24, Z+5	; 0x05
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	e9 f5       	brne	.+122    	; 0x2474 <UART_init+0xdc>
			SET_BIT(UCSRB, TXCIE);
    23fa:	aa e2       	ldi	r26, 0x2A	; 42
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	ea e2       	ldi	r30, 0x2A	; 42
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	80 64       	ori	r24, 0x40	; 64
    2406:	8c 93       	st	X, r24
    2408:	35 c0       	rjmp	.+106    	; 0x2474 <UART_init+0xdc>
		break;
	case UART_RECEIVER_MODE:
		SET_BIT(UCSRB, RXEN);
    240a:	aa e2       	ldi	r26, 0x2A	; 42
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	ea e2       	ldi	r30, 0x2A	; 42
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	80 61       	ori	r24, 0x10	; 16
    2416:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
    2418:	e9 81       	ldd	r30, Y+1	; 0x01
    241a:	fa 81       	ldd	r31, Y+2	; 0x02
    241c:	85 81       	ldd	r24, Z+5	; 0x05
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	49 f5       	brne	.+82     	; 0x2474 <UART_init+0xdc>
			SET_BIT(UCSRB, RXCIE);
    2422:	aa e2       	ldi	r26, 0x2A	; 42
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	ea e2       	ldi	r30, 0x2A	; 42
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	80 68       	ori	r24, 0x80	; 128
    242e:	8c 93       	st	X, r24
    2430:	21 c0       	rjmp	.+66     	; 0x2474 <UART_init+0xdc>
		break;
	case UART_SENDER_RECEIVER_MODE:
		SET_BIT(UCSRB, TXEN);
    2432:	aa e2       	ldi	r26, 0x2A	; 42
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	ea e2       	ldi	r30, 0x2A	; 42
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	88 60       	ori	r24, 0x08	; 8
    243e:	8c 93       	st	X, r24
		SET_BIT(UCSRB, RXEN);
    2440:	aa e2       	ldi	r26, 0x2A	; 42
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	ea e2       	ldi	r30, 0x2A	; 42
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	80 61       	ori	r24, 0x10	; 16
    244c:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
    244e:	e9 81       	ldd	r30, Y+1	; 0x01
    2450:	fa 81       	ldd	r31, Y+2	; 0x02
    2452:	85 81       	ldd	r24, Z+5	; 0x05
    2454:	81 30       	cpi	r24, 0x01	; 1
    2456:	71 f4       	brne	.+28     	; 0x2474 <UART_init+0xdc>
		{
			SET_BIT(UCSRB, TXCIE);
    2458:	aa e2       	ldi	r26, 0x2A	; 42
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	ea e2       	ldi	r30, 0x2A	; 42
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	80 64       	ori	r24, 0x40	; 64
    2464:	8c 93       	st	X, r24
			SET_BIT(UCSRB, RXCIE);
    2466:	aa e2       	ldi	r26, 0x2A	; 42
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	ea e2       	ldi	r30, 0x2A	; 42
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	80 68       	ori	r24, 0x80	; 128
    2472:	8c 93       	st	X, r24
		}
		break;
	}

	/* Selecting the character size (for the bits in UCSRB register) */
	UCSRB = (UCSRB & 0xFB) | (ConfigPtr->charSize & 0x04);
    2474:	aa e2       	ldi	r26, 0x2A	; 42
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	ea e2       	ldi	r30, 0x2A	; 42
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	98 2f       	mov	r25, r24
    2480:	9b 7f       	andi	r25, 0xFB	; 251
    2482:	e9 81       	ldd	r30, Y+1	; 0x01
    2484:	fa 81       	ldd	r31, Y+2	; 0x02
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	84 70       	andi	r24, 0x04	; 4
    248a:	89 2b       	or	r24, r25
    248c:	8c 93       	st	X, r24

	UCSRC |= ConfigPtr->mode | ((ConfigPtr->charSize & 0x03) << UCSZ0) | (1 << URSEL) | ConfigPtr->parityMode | ConfigPtr->stopBits;
    248e:	a0 e4       	ldi	r26, 0x40	; 64
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e0 e4       	ldi	r30, 0x40	; 64
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	38 2f       	mov	r19, r24
    249a:	e9 81       	ldd	r30, Y+1	; 0x01
    249c:	fa 81       	ldd	r31, Y+2	; 0x02
    249e:	80 81       	ld	r24, Z
    24a0:	28 2f       	mov	r18, r24
    24a2:	e9 81       	ldd	r30, Y+1	; 0x01
    24a4:	fa 81       	ldd	r31, Y+2	; 0x02
    24a6:	82 81       	ldd	r24, Z+2	; 0x02
    24a8:	88 2f       	mov	r24, r24
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	83 70       	andi	r24, 0x03	; 3
    24ae:	90 70       	andi	r25, 0x00	; 0
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	82 2b       	or	r24, r18
    24b6:	98 2f       	mov	r25, r24
    24b8:	90 68       	ori	r25, 0x80	; 128
    24ba:	e9 81       	ldd	r30, Y+1	; 0x01
    24bc:	fa 81       	ldd	r31, Y+2	; 0x02
    24be:	83 81       	ldd	r24, Z+3	; 0x03
    24c0:	98 2b       	or	r25, r24
    24c2:	e9 81       	ldd	r30, Y+1	; 0x01
    24c4:	fa 81       	ldd	r31, Y+2	; 0x02
    24c6:	84 81       	ldd	r24, Z+4	; 0x04
    24c8:	89 2b       	or	r24, r25
    24ca:	83 2b       	or	r24, r19
    24cc:	8c 93       	st	X, r24

	/* Choosing the baud rate of the process */
	UBRRH = BAUDPRESCALE >> 8;
    24ce:	e0 e4       	ldi	r30, 0x40	; 64
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	10 82       	st	Z, r1
	UBRRL = BAUDPRESCALE;
    24d4:	e9 e2       	ldi	r30, 0x29	; 41
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	8f ec       	ldi	r24, 0xCF	; 207
    24da:	80 83       	st	Z, r24
}
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <UART_transmit>:

void UART_transmit(const uint8_t data)
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	0f 92       	push	r0
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	89 83       	std	Y+1, r24	; 0x01
	/* busy-waiting the UDRE bit in the UCSRA register in case interrupt is disabled */
	if(BIT_IS_CLEAR(UCSRB, TXCIE))
    24f6:	ea e2       	ldi	r30, 0x2A	; 42
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	88 2f       	mov	r24, r24
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	80 74       	andi	r24, 0x40	; 64
    2502:	90 70       	andi	r25, 0x00	; 0
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	49 f4       	brne	.+18     	; 0x251a <UART_transmit+0x30>
		while(BIT_IS_CLEAR(UCSRA, UDRE));
    2508:	eb e2       	ldi	r30, 0x2B	; 43
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	88 2f       	mov	r24, r24
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	80 72       	andi	r24, 0x20	; 32
    2514:	90 70       	andi	r25, 0x00	; 0
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	b9 f3       	breq	.-18     	; 0x2508 <UART_transmit+0x1e>
	/* sending the data */
	UDR = data;
    251a:	ec e2       	ldi	r30, 0x2C	; 44
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	80 83       	st	Z, r24
}
    2522:	0f 90       	pop	r0
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <UART_receive>:

uint8_t UART_receive(void)
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
	/* busy-waiting the RXC bit in the UCSRA register in case interrupt is disabled */
	if(BIT_IS_CLEAR(UCSRB, RXCIE))
    2532:	ea e2       	ldi	r30, 0x2A	; 42
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	88 23       	and	r24, r24
    253a:	2c f0       	brlt	.+10     	; 0x2546 <UART_receive+0x1c>
		while(BIT_IS_CLEAR(UCSRA, RXC));
    253c:	eb e2       	ldi	r30, 0x2B	; 43
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	88 23       	and	r24, r24
    2544:	dc f7       	brge	.-10     	; 0x253c <UART_receive+0x12>
	/* read the received data */
	return UDR;
    2546:	ec e2       	ldi	r30, 0x2C	; 44
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
}
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <UART_Send_String>:

void UART_Send_String(char* str)
{
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	00 d0       	rcall	.+0      	; 0x2558 <UART_Send_String+0x6>
    2558:	00 d0       	rcall	.+0      	; 0x255a <UART_Send_String+0x8>
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	9c 83       	std	Y+4, r25	; 0x04
    2560:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t index = 0;
    2562:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t data = 0;
    2564:	19 82       	std	Y+1, r1	; 0x01
    2566:	10 c0       	rjmp	.+32     	; 0x2588 <UART_Send_String+0x36>

	while(str[index])
	{
		data=str[index++];
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	9c 81       	ldd	r25, Y+4	; 0x04
    2572:	fc 01       	movw	r30, r24
    2574:	e2 0f       	add	r30, r18
    2576:	f3 1f       	adc	r31, r19
    2578:	80 81       	ld	r24, Z
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	8f 5f       	subi	r24, 0xFF	; 255
    2580:	8a 83       	std	Y+2, r24	; 0x02
		UART_transmit(data);
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	0e 94 75 12 	call	0x24ea	; 0x24ea <UART_transmit>
void UART_Send_String(char* str)
{
	uint8_t index = 0;
	uint8_t data = 0;

	while(str[index])
    2588:	8a 81       	ldd	r24, Y+2	; 0x02
    258a:	28 2f       	mov	r18, r24
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	9c 81       	ldd	r25, Y+4	; 0x04
    2592:	fc 01       	movw	r30, r24
    2594:	e2 0f       	add	r30, r18
    2596:	f3 1f       	adc	r31, r19
    2598:	80 81       	ld	r24, Z
    259a:	88 23       	and	r24, r24
    259c:	29 f7       	brne	.-54     	; 0x2568 <UART_Send_String+0x16>
	{
		data=str[index++];
		UART_transmit(data);
	}
}
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <UART_receiveString>:


void UART_receiveString(sint8_t* Str)
{
    25ac:	0f 93       	push	r16
    25ae:	1f 93       	push	r17
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <UART_receiveString+0xa>
    25b6:	0f 92       	push	r0
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    25bc:	9b 83       	std	Y+3, r25	; 0x03
    25be:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    25c0:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receive();
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	9b 81       	ldd	r25, Y+3	; 0x03
    25cc:	8c 01       	movw	r16, r24
    25ce:	02 0f       	add	r16, r18
    25d0:	13 1f       	adc	r17, r19
    25d2:	0e 94 95 12 	call	0x252a	; 0x252a <UART_receive>
    25d6:	f8 01       	movw	r30, r16
    25d8:	80 83       	st	Z, r24
    25da:	0f c0       	rjmp	.+30     	; 0x25fa <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	8f 5f       	subi	r24, 0xFF	; 255
    25e0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receive();
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	9b 81       	ldd	r25, Y+3	; 0x03
    25ec:	8c 01       	movw	r16, r24
    25ee:	02 0f       	add	r16, r18
    25f0:	13 1f       	adc	r17, r19
    25f2:	0e 94 95 12 	call	0x252a	; 0x252a <UART_receive>
    25f6:	f8 01       	movw	r30, r16
    25f8:	80 83       	st	Z, r24

void UART_receiveString(sint8_t* Str)
{
	uint8_t i = 0;
	Str[i] = UART_receive();
	while(Str[i] != '#')
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	28 2f       	mov	r18, r24
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	9b 81       	ldd	r25, Y+3	; 0x03
    2604:	fc 01       	movw	r30, r24
    2606:	e2 0f       	add	r30, r18
    2608:	f3 1f       	adc	r31, r19
    260a:	80 81       	ld	r24, Z
    260c:	83 32       	cpi	r24, 0x23	; 35
    260e:	31 f7       	brne	.-52     	; 0x25dc <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receive();
	}
	Str[i] = '\0';
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	28 2f       	mov	r18, r24
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	9b 81       	ldd	r25, Y+3	; 0x03
    261a:	fc 01       	movw	r30, r24
    261c:	e2 0f       	add	r30, r18
    261e:	f3 1f       	adc	r31, r19
    2620:	10 82       	st	Z, r1
}
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	1f 91       	pop	r17
    262e:	0f 91       	pop	r16
    2630:	08 95       	ret

00002632 <gpioPortDirection>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	00 d0       	rcall	.+0      	; 0x2638 <gpioPortDirection+0x6>
    2638:	00 d0       	rcall	.+0      	; 0x263a <gpioPortDirection+0x8>
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	89 83       	std	Y+1, r24	; 0x01
    2640:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to manipulate its direction */
	switch(u8_port)
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	3c 83       	std	Y+4, r19	; 0x04
    264a:	2b 83       	std	Y+3, r18	; 0x03
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	9c 81       	ldd	r25, Y+4	; 0x04
    2650:	81 30       	cpi	r24, 0x01	; 1
    2652:	91 05       	cpc	r25, r1
    2654:	d1 f0       	breq	.+52     	; 0x268a <gpioPortDirection+0x58>
    2656:	2b 81       	ldd	r18, Y+3	; 0x03
    2658:	3c 81       	ldd	r19, Y+4	; 0x04
    265a:	22 30       	cpi	r18, 0x02	; 2
    265c:	31 05       	cpc	r19, r1
    265e:	2c f4       	brge	.+10     	; 0x266a <gpioPortDirection+0x38>
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	61 f0       	breq	.+24     	; 0x2680 <gpioPortDirection+0x4e>
    2668:	1e c0       	rjmp	.+60     	; 0x26a6 <gpioPortDirection+0x74>
    266a:	2b 81       	ldd	r18, Y+3	; 0x03
    266c:	3c 81       	ldd	r19, Y+4	; 0x04
    266e:	22 30       	cpi	r18, 0x02	; 2
    2670:	31 05       	cpc	r19, r1
    2672:	81 f0       	breq	.+32     	; 0x2694 <gpioPortDirection+0x62>
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	9c 81       	ldd	r25, Y+4	; 0x04
    2678:	83 30       	cpi	r24, 0x03	; 3
    267a:	91 05       	cpc	r25, r1
    267c:	81 f0       	breq	.+32     	; 0x269e <gpioPortDirection+0x6c>
    267e:	13 c0       	rjmp	.+38     	; 0x26a6 <gpioPortDirection+0x74>
	{
	case GPIOA:
		PORTA_DIR = u8_direction;
    2680:	ea e3       	ldi	r30, 0x3A	; 58
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	80 83       	st	Z, r24
    2688:	0e c0       	rjmp	.+28     	; 0x26a6 <gpioPortDirection+0x74>
		break;
	case GPIOB:
		PORTB_DIR = u8_direction;
    268a:	e7 e3       	ldi	r30, 0x37	; 55
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	80 83       	st	Z, r24
    2692:	09 c0       	rjmp	.+18     	; 0x26a6 <gpioPortDirection+0x74>
		break;
	case GPIOC:
		PORTC_DIR = u8_direction;
    2694:	e4 e3       	ldi	r30, 0x34	; 52
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	80 83       	st	Z, r24
    269c:	04 c0       	rjmp	.+8      	; 0x26a6 <gpioPortDirection+0x74>
		break;
	case GPIOD:
		PORTD_DIR = u8_direction;
    269e:	e1 e3       	ldi	r30, 0x31	; 49
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <gpioPortWrite>:

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <gpioPortWrite+0x6>
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <gpioPortWrite+0x8>
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	89 83       	std	Y+1, r24	; 0x01
    26c2:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to assign the value to */
	switch(u8_port)
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	3c 83       	std	Y+4, r19	; 0x04
    26cc:	2b 83       	std	Y+3, r18	; 0x03
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	9c 81       	ldd	r25, Y+4	; 0x04
    26d2:	81 30       	cpi	r24, 0x01	; 1
    26d4:	91 05       	cpc	r25, r1
    26d6:	d1 f0       	breq	.+52     	; 0x270c <gpioPortWrite+0x58>
    26d8:	2b 81       	ldd	r18, Y+3	; 0x03
    26da:	3c 81       	ldd	r19, Y+4	; 0x04
    26dc:	22 30       	cpi	r18, 0x02	; 2
    26de:	31 05       	cpc	r19, r1
    26e0:	2c f4       	brge	.+10     	; 0x26ec <gpioPortWrite+0x38>
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	9c 81       	ldd	r25, Y+4	; 0x04
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	61 f0       	breq	.+24     	; 0x2702 <gpioPortWrite+0x4e>
    26ea:	1e c0       	rjmp	.+60     	; 0x2728 <gpioPortWrite+0x74>
    26ec:	2b 81       	ldd	r18, Y+3	; 0x03
    26ee:	3c 81       	ldd	r19, Y+4	; 0x04
    26f0:	22 30       	cpi	r18, 0x02	; 2
    26f2:	31 05       	cpc	r19, r1
    26f4:	81 f0       	breq	.+32     	; 0x2716 <gpioPortWrite+0x62>
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	9c 81       	ldd	r25, Y+4	; 0x04
    26fa:	83 30       	cpi	r24, 0x03	; 3
    26fc:	91 05       	cpc	r25, r1
    26fe:	81 f0       	breq	.+32     	; 0x2720 <gpioPortWrite+0x6c>
    2700:	13 c0       	rjmp	.+38     	; 0x2728 <gpioPortWrite+0x74>
	{
	case GPIOA:
		PORTA_DATA = u8_value;
    2702:	eb e3       	ldi	r30, 0x3B	; 59
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	80 83       	st	Z, r24
    270a:	0e c0       	rjmp	.+28     	; 0x2728 <gpioPortWrite+0x74>
		break;
	case GPIOB:
		PORTB_DATA = u8_value;
    270c:	e8 e3       	ldi	r30, 0x38	; 56
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	80 83       	st	Z, r24
    2714:	09 c0       	rjmp	.+18     	; 0x2728 <gpioPortWrite+0x74>
		break;
	case GPIOC:
		PORTC_DATA = u8_value;
    2716:	e5 e3       	ldi	r30, 0x35	; 53
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	80 83       	st	Z, r24
    271e:	04 c0       	rjmp	.+8      	; 0x2728 <gpioPortWrite+0x74>
		break;
	case GPIOD:
		PORTD_DATA = u8_value;
    2720:	e2 e3       	ldi	r30, 0x32	; 50
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <gpioPortToggle>:

void gpioPortToggle(uint8_t u8_port)
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	00 d0       	rcall	.+0      	; 0x273c <gpioPortToggle+0x6>
    273c:	0f 92       	push	r0
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to toggle its value */
	switch(u8_port)
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	3b 83       	std	Y+3, r19	; 0x03
    274c:	2a 83       	std	Y+2, r18	; 0x02
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	9b 81       	ldd	r25, Y+3	; 0x03
    2752:	81 30       	cpi	r24, 0x01	; 1
    2754:	91 05       	cpc	r25, r1
    2756:	e9 f0       	breq	.+58     	; 0x2792 <gpioPortToggle+0x5c>
    2758:	2a 81       	ldd	r18, Y+2	; 0x02
    275a:	3b 81       	ldd	r19, Y+3	; 0x03
    275c:	22 30       	cpi	r18, 0x02	; 2
    275e:	31 05       	cpc	r19, r1
    2760:	2c f4       	brge	.+10     	; 0x276c <gpioPortToggle+0x36>
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	9b 81       	ldd	r25, Y+3	; 0x03
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	61 f0       	breq	.+24     	; 0x2782 <gpioPortToggle+0x4c>
    276a:	2a c0       	rjmp	.+84     	; 0x27c0 <gpioPortToggle+0x8a>
    276c:	2a 81       	ldd	r18, Y+2	; 0x02
    276e:	3b 81       	ldd	r19, Y+3	; 0x03
    2770:	22 30       	cpi	r18, 0x02	; 2
    2772:	31 05       	cpc	r19, r1
    2774:	b1 f0       	breq	.+44     	; 0x27a2 <gpioPortToggle+0x6c>
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	9b 81       	ldd	r25, Y+3	; 0x03
    277a:	83 30       	cpi	r24, 0x03	; 3
    277c:	91 05       	cpc	r25, r1
    277e:	c9 f0       	breq	.+50     	; 0x27b2 <gpioPortToggle+0x7c>
    2780:	1f c0       	rjmp	.+62     	; 0x27c0 <gpioPortToggle+0x8a>
	{
	case GPIOA:
		PORTA_DATA ^= HIGH;
    2782:	ab e3       	ldi	r26, 0x3B	; 59
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	eb e3       	ldi	r30, 0x3B	; 59
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	80 95       	com	r24
    278e:	8c 93       	st	X, r24
    2790:	17 c0       	rjmp	.+46     	; 0x27c0 <gpioPortToggle+0x8a>
		break;
	case GPIOB:
		PORTB_DATA ^= HIGH;
    2792:	a8 e3       	ldi	r26, 0x38	; 56
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e8 e3       	ldi	r30, 0x38	; 56
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	80 95       	com	r24
    279e:	8c 93       	st	X, r24
    27a0:	0f c0       	rjmp	.+30     	; 0x27c0 <gpioPortToggle+0x8a>
		break;
	case GPIOC:
		PORTC_DATA ^= HIGH;
    27a2:	a5 e3       	ldi	r26, 0x35	; 53
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e5 e3       	ldi	r30, 0x35	; 53
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	80 95       	com	r24
    27ae:	8c 93       	st	X, r24
    27b0:	07 c0       	rjmp	.+14     	; 0x27c0 <gpioPortToggle+0x8a>
		break;
	case GPIOD:
		PORTD_DATA ^= HIGH;
    27b2:	a2 e3       	ldi	r26, 0x32	; 50
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	e2 e3       	ldi	r30, 0x32	; 50
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	80 95       	com	r24
    27be:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	08 95       	ret

000027cc <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
    27cc:	df 93       	push	r29
    27ce:	cf 93       	push	r28
    27d0:	00 d0       	rcall	.+0      	; 0x27d2 <gpioPortRead+0x6>
    27d2:	00 d0       	rcall	.+0      	; 0x27d4 <gpioPortRead+0x8>
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to be read */
	switch(u8_port)
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	28 2f       	mov	r18, r24
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	3c 83       	std	Y+4, r19	; 0x04
    27e2:	2b 83       	std	Y+3, r18	; 0x03
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	9c 81       	ldd	r25, Y+4	; 0x04
    27e8:	81 30       	cpi	r24, 0x01	; 1
    27ea:	91 05       	cpc	r25, r1
    27ec:	d1 f0       	breq	.+52     	; 0x2822 <gpioPortRead+0x56>
    27ee:	2b 81       	ldd	r18, Y+3	; 0x03
    27f0:	3c 81       	ldd	r19, Y+4	; 0x04
    27f2:	22 30       	cpi	r18, 0x02	; 2
    27f4:	31 05       	cpc	r19, r1
    27f6:	2c f4       	brge	.+10     	; 0x2802 <gpioPortRead+0x36>
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	9c 81       	ldd	r25, Y+4	; 0x04
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	61 f0       	breq	.+24     	; 0x2818 <gpioPortRead+0x4c>
    2800:	1f c0       	rjmp	.+62     	; 0x2840 <gpioPortRead+0x74>
    2802:	2b 81       	ldd	r18, Y+3	; 0x03
    2804:	3c 81       	ldd	r19, Y+4	; 0x04
    2806:	22 30       	cpi	r18, 0x02	; 2
    2808:	31 05       	cpc	r19, r1
    280a:	81 f0       	breq	.+32     	; 0x282c <gpioPortRead+0x60>
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	9c 81       	ldd	r25, Y+4	; 0x04
    2810:	83 30       	cpi	r24, 0x03	; 3
    2812:	91 05       	cpc	r25, r1
    2814:	81 f0       	breq	.+32     	; 0x2836 <gpioPortRead+0x6a>
    2816:	14 c0       	rjmp	.+40     	; 0x2840 <gpioPortRead+0x74>
	{
	case GPIOA:
		return PORTA_PIN;
    2818:	e9 e3       	ldi	r30, 0x39	; 57
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	90 81       	ld	r25, Z
    281e:	9a 83       	std	Y+2, r25	; 0x02
    2820:	11 c0       	rjmp	.+34     	; 0x2844 <gpioPortRead+0x78>
		break;
	case GPIOB:
		return PORTB_PIN;
    2822:	e6 e3       	ldi	r30, 0x36	; 54
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	20 81       	ld	r18, Z
    2828:	2a 83       	std	Y+2, r18	; 0x02
    282a:	0c c0       	rjmp	.+24     	; 0x2844 <gpioPortRead+0x78>
		break;
	case GPIOC:
		return PORTC_PIN;
    282c:	e3 e3       	ldi	r30, 0x33	; 51
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	30 81       	ld	r19, Z
    2832:	3a 83       	std	Y+2, r19	; 0x02
    2834:	07 c0       	rjmp	.+14     	; 0x2844 <gpioPortRead+0x78>
		break;
	case GPIOD:
		return PORTD_PIN;
    2836:	e0 e3       	ldi	r30, 0x30	; 48
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	8a 83       	std	Y+2, r24	; 0x02
    283e:	02 c0       	rjmp	.+4      	; 0x2844 <gpioPortRead+0x78>
		break;
	default:
		return ERROR;
    2840:	9f ef       	ldi	r25, 0xFF	; 255
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <gpioPinDirection>:

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	29 97       	sbiw	r28, 0x09	; 9
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	8b 83       	std	Y+3, r24	; 0x03
    286a:	6c 83       	std	Y+4, r22	; 0x04
    286c:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which direction is to be manipulated */
	uint8_t* pu8_portDirectionPointer = NULL;
    286e:	1a 82       	std	Y+2, r1	; 0x02
    2870:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
    2874:	28 2f       	mov	r18, r24
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	39 87       	std	Y+9, r19	; 0x09
    287a:	28 87       	std	Y+8, r18	; 0x08
    287c:	88 85       	ldd	r24, Y+8	; 0x08
    287e:	99 85       	ldd	r25, Y+9	; 0x09
    2880:	81 30       	cpi	r24, 0x01	; 1
    2882:	91 05       	cpc	r25, r1
    2884:	d1 f0       	breq	.+52     	; 0x28ba <gpioPinDirection+0x66>
    2886:	28 85       	ldd	r18, Y+8	; 0x08
    2888:	39 85       	ldd	r19, Y+9	; 0x09
    288a:	22 30       	cpi	r18, 0x02	; 2
    288c:	31 05       	cpc	r19, r1
    288e:	2c f4       	brge	.+10     	; 0x289a <gpioPinDirection+0x46>
    2890:	88 85       	ldd	r24, Y+8	; 0x08
    2892:	99 85       	ldd	r25, Y+9	; 0x09
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	61 f0       	breq	.+24     	; 0x28b0 <gpioPinDirection+0x5c>
    2898:	1e c0       	rjmp	.+60     	; 0x28d6 <gpioPinDirection+0x82>
    289a:	28 85       	ldd	r18, Y+8	; 0x08
    289c:	39 85       	ldd	r19, Y+9	; 0x09
    289e:	22 30       	cpi	r18, 0x02	; 2
    28a0:	31 05       	cpc	r19, r1
    28a2:	81 f0       	breq	.+32     	; 0x28c4 <gpioPinDirection+0x70>
    28a4:	88 85       	ldd	r24, Y+8	; 0x08
    28a6:	99 85       	ldd	r25, Y+9	; 0x09
    28a8:	83 30       	cpi	r24, 0x03	; 3
    28aa:	91 05       	cpc	r25, r1
    28ac:	81 f0       	breq	.+32     	; 0x28ce <gpioPinDirection+0x7a>
    28ae:	13 c0       	rjmp	.+38     	; 0x28d6 <gpioPinDirection+0x82>
	{
	case GPIOA:
		pu8_portDirectionPointer = (uint8_t*)(&PORTA_DIR);
    28b0:	8a e3       	ldi	r24, 0x3A	; 58
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9a 83       	std	Y+2, r25	; 0x02
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	0e c0       	rjmp	.+28     	; 0x28d6 <gpioPinDirection+0x82>
		break;
	case GPIOB:
		pu8_portDirectionPointer = (uint8_t*)(&PORTB_DIR);
    28ba:	87 e3       	ldi	r24, 0x37	; 55
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	9a 83       	std	Y+2, r25	; 0x02
    28c0:	89 83       	std	Y+1, r24	; 0x01
    28c2:	09 c0       	rjmp	.+18     	; 0x28d6 <gpioPinDirection+0x82>
		break;
	case GPIOC:
		pu8_portDirectionPointer = (uint8_t*)(&PORTC_DIR);
    28c4:	84 e3       	ldi	r24, 0x34	; 52
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9a 83       	std	Y+2, r25	; 0x02
    28ca:	89 83       	std	Y+1, r24	; 0x01
    28cc:	04 c0       	rjmp	.+8      	; 0x28d6 <gpioPinDirection+0x82>
		break;
	case GPIOD:
		pu8_portDirectionPointer = (uint8_t*)(&PORTD_DIR);
    28ce:	81 e3       	ldi	r24, 0x31	; 49
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9a 83       	std	Y+2, r25	; 0x02
    28d4:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the pins are to be input or output */
	switch(u8_direction)
    28d6:	8d 81       	ldd	r24, Y+5	; 0x05
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	3f 83       	std	Y+7, r19	; 0x07
    28de:	2e 83       	std	Y+6, r18	; 0x06
    28e0:	8e 81       	ldd	r24, Y+6	; 0x06
    28e2:	9f 81       	ldd	r25, Y+7	; 0x07
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	31 f0       	breq	.+12     	; 0x28f4 <gpioPinDirection+0xa0>
    28e8:	2e 81       	ldd	r18, Y+6	; 0x06
    28ea:	3f 81       	ldd	r19, Y+7	; 0x07
    28ec:	2f 3f       	cpi	r18, 0xFF	; 255
    28ee:	31 05       	cpc	r19, r1
    28f0:	61 f0       	breq	.+24     	; 0x290a <gpioPinDirection+0xb6>
    28f2:	13 c0       	rjmp	.+38     	; 0x291a <gpioPinDirection+0xc6>
	{
	case INPUT:
		*pu8_portDirectionPointer &= ~u8_pins;
    28f4:	e9 81       	ldd	r30, Y+1	; 0x01
    28f6:	fa 81       	ldd	r31, Y+2	; 0x02
    28f8:	80 81       	ld	r24, Z
    28fa:	98 2f       	mov	r25, r24
    28fc:	8c 81       	ldd	r24, Y+4	; 0x04
    28fe:	80 95       	com	r24
    2900:	89 23       	and	r24, r25
    2902:	e9 81       	ldd	r30, Y+1	; 0x01
    2904:	fa 81       	ldd	r31, Y+2	; 0x02
    2906:	80 83       	st	Z, r24
    2908:	08 c0       	rjmp	.+16     	; 0x291a <gpioPinDirection+0xc6>
		break;
	case OUTPUT:
		*pu8_portDirectionPointer |= u8_pins;
    290a:	e9 81       	ldd	r30, Y+1	; 0x01
    290c:	fa 81       	ldd	r31, Y+2	; 0x02
    290e:	90 81       	ld	r25, Z
    2910:	8c 81       	ldd	r24, Y+4	; 0x04
    2912:	89 2b       	or	r24, r25
    2914:	e9 81       	ldd	r30, Y+1	; 0x01
    2916:	fa 81       	ldd	r31, Y+2	; 0x02
    2918:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    291a:	29 96       	adiw	r28, 0x09	; 9
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <gpioPinWrite>:

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	29 97       	sbiw	r28, 0x09	; 9
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	8b 83       	std	Y+3, r24	; 0x03
    2942:	6c 83       	std	Y+4, r22	; 0x04
    2944:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which pins values are to be changed */
	uint8_t* pu8_portDataPointer = NULL;
    2946:	1a 82       	std	Y+2, r1	; 0x02
    2948:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	39 87       	std	Y+9, r19	; 0x09
    2952:	28 87       	std	Y+8, r18	; 0x08
    2954:	88 85       	ldd	r24, Y+8	; 0x08
    2956:	99 85       	ldd	r25, Y+9	; 0x09
    2958:	81 30       	cpi	r24, 0x01	; 1
    295a:	91 05       	cpc	r25, r1
    295c:	d1 f0       	breq	.+52     	; 0x2992 <gpioPinWrite+0x66>
    295e:	28 85       	ldd	r18, Y+8	; 0x08
    2960:	39 85       	ldd	r19, Y+9	; 0x09
    2962:	22 30       	cpi	r18, 0x02	; 2
    2964:	31 05       	cpc	r19, r1
    2966:	2c f4       	brge	.+10     	; 0x2972 <gpioPinWrite+0x46>
    2968:	88 85       	ldd	r24, Y+8	; 0x08
    296a:	99 85       	ldd	r25, Y+9	; 0x09
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	61 f0       	breq	.+24     	; 0x2988 <gpioPinWrite+0x5c>
    2970:	1e c0       	rjmp	.+60     	; 0x29ae <gpioPinWrite+0x82>
    2972:	28 85       	ldd	r18, Y+8	; 0x08
    2974:	39 85       	ldd	r19, Y+9	; 0x09
    2976:	22 30       	cpi	r18, 0x02	; 2
    2978:	31 05       	cpc	r19, r1
    297a:	81 f0       	breq	.+32     	; 0x299c <gpioPinWrite+0x70>
    297c:	88 85       	ldd	r24, Y+8	; 0x08
    297e:	99 85       	ldd	r25, Y+9	; 0x09
    2980:	83 30       	cpi	r24, 0x03	; 3
    2982:	91 05       	cpc	r25, r1
    2984:	81 f0       	breq	.+32     	; 0x29a6 <gpioPinWrite+0x7a>
    2986:	13 c0       	rjmp	.+38     	; 0x29ae <gpioPinWrite+0x82>
	{
	case GPIOA:
		pu8_portDataPointer = (uint8_t*)(&PORTA_DATA);
    2988:	8b e3       	ldi	r24, 0x3B	; 59
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	9a 83       	std	Y+2, r25	; 0x02
    298e:	89 83       	std	Y+1, r24	; 0x01
    2990:	0e c0       	rjmp	.+28     	; 0x29ae <gpioPinWrite+0x82>
		break;
	case GPIOB:
		pu8_portDataPointer = (uint8_t*)(&PORTB_DATA);
    2992:	88 e3       	ldi	r24, 0x38	; 56
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	9a 83       	std	Y+2, r25	; 0x02
    2998:	89 83       	std	Y+1, r24	; 0x01
    299a:	09 c0       	rjmp	.+18     	; 0x29ae <gpioPinWrite+0x82>
		break;
	case GPIOC:
		pu8_portDataPointer = (uint8_t*)(&PORTC_DATA);
    299c:	85 e3       	ldi	r24, 0x35	; 53
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	9a 83       	std	Y+2, r25	; 0x02
    29a2:	89 83       	std	Y+1, r24	; 0x01
    29a4:	04 c0       	rjmp	.+8      	; 0x29ae <gpioPinWrite+0x82>
		break;
	case GPIOD:
		pu8_portDataPointer = (uint8_t*)(&PORTD_DATA);
    29a6:	82 e3       	ldi	r24, 0x32	; 50
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	9a 83       	std	Y+2, r25	; 0x02
    29ac:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the bits values are to be high or low */
	switch(u8_value)
    29ae:	8d 81       	ldd	r24, Y+5	; 0x05
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	3f 83       	std	Y+7, r19	; 0x07
    29b6:	2e 83       	std	Y+6, r18	; 0x06
    29b8:	8e 81       	ldd	r24, Y+6	; 0x06
    29ba:	9f 81       	ldd	r25, Y+7	; 0x07
    29bc:	00 97       	sbiw	r24, 0x00	; 0
    29be:	31 f0       	breq	.+12     	; 0x29cc <gpioPinWrite+0xa0>
    29c0:	2e 81       	ldd	r18, Y+6	; 0x06
    29c2:	3f 81       	ldd	r19, Y+7	; 0x07
    29c4:	2f 3f       	cpi	r18, 0xFF	; 255
    29c6:	31 05       	cpc	r19, r1
    29c8:	61 f0       	breq	.+24     	; 0x29e2 <gpioPinWrite+0xb6>
    29ca:	13 c0       	rjmp	.+38     	; 0x29f2 <gpioPinWrite+0xc6>
	{
	case LOW:
		*pu8_portDataPointer &= ~u8_pins;
    29cc:	e9 81       	ldd	r30, Y+1	; 0x01
    29ce:	fa 81       	ldd	r31, Y+2	; 0x02
    29d0:	80 81       	ld	r24, Z
    29d2:	98 2f       	mov	r25, r24
    29d4:	8c 81       	ldd	r24, Y+4	; 0x04
    29d6:	80 95       	com	r24
    29d8:	89 23       	and	r24, r25
    29da:	e9 81       	ldd	r30, Y+1	; 0x01
    29dc:	fa 81       	ldd	r31, Y+2	; 0x02
    29de:	80 83       	st	Z, r24
    29e0:	08 c0       	rjmp	.+16     	; 0x29f2 <gpioPinWrite+0xc6>
		break;
	case HIGH:
		*pu8_portDataPointer |= u8_pins;
    29e2:	e9 81       	ldd	r30, Y+1	; 0x01
    29e4:	fa 81       	ldd	r31, Y+2	; 0x02
    29e6:	90 81       	ld	r25, Z
    29e8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ea:	89 2b       	or	r24, r25
    29ec:	e9 81       	ldd	r30, Y+1	; 0x01
    29ee:	fa 81       	ldd	r31, Y+2	; 0x02
    29f0:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    29f2:	29 96       	adiw	r28, 0x09	; 9
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	08 95       	ret

00002a04 <gpioPinToggle>:

void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
    2a04:	df 93       	push	r29
    2a06:	cf 93       	push	r28
    2a08:	00 d0       	rcall	.+0      	; 0x2a0a <gpioPinToggle+0x6>
    2a0a:	00 d0       	rcall	.+0      	; 0x2a0c <gpioPinToggle+0x8>
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
    2a10:	89 83       	std	Y+1, r24	; 0x01
    2a12:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to toggle its pins */
	switch(u8_port)
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	28 2f       	mov	r18, r24
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	3c 83       	std	Y+4, r19	; 0x04
    2a1c:	2b 83       	std	Y+3, r18	; 0x03
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	9c 81       	ldd	r25, Y+4	; 0x04
    2a22:	81 30       	cpi	r24, 0x01	; 1
    2a24:	91 05       	cpc	r25, r1
    2a26:	f1 f0       	breq	.+60     	; 0x2a64 <gpioPinToggle+0x60>
    2a28:	2b 81       	ldd	r18, Y+3	; 0x03
    2a2a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a2c:	22 30       	cpi	r18, 0x02	; 2
    2a2e:	31 05       	cpc	r19, r1
    2a30:	2c f4       	brge	.+10     	; 0x2a3c <gpioPinToggle+0x38>
    2a32:	8b 81       	ldd	r24, Y+3	; 0x03
    2a34:	9c 81       	ldd	r25, Y+4	; 0x04
    2a36:	00 97       	sbiw	r24, 0x00	; 0
    2a38:	61 f0       	breq	.+24     	; 0x2a52 <gpioPinToggle+0x4e>
    2a3a:	2e c0       	rjmp	.+92     	; 0x2a98 <gpioPinToggle+0x94>
    2a3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a3e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a40:	22 30       	cpi	r18, 0x02	; 2
    2a42:	31 05       	cpc	r19, r1
    2a44:	c1 f0       	breq	.+48     	; 0x2a76 <gpioPinToggle+0x72>
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4a:	83 30       	cpi	r24, 0x03	; 3
    2a4c:	91 05       	cpc	r25, r1
    2a4e:	e1 f0       	breq	.+56     	; 0x2a88 <gpioPinToggle+0x84>
    2a50:	23 c0       	rjmp	.+70     	; 0x2a98 <gpioPinToggle+0x94>
	{
	case GPIOA:
		PORTA_DATA ^= u8_pins;
    2a52:	ab e3       	ldi	r26, 0x3B	; 59
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	eb e3       	ldi	r30, 0x3B	; 59
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	90 81       	ld	r25, Z
    2a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5e:	89 27       	eor	r24, r25
    2a60:	8c 93       	st	X, r24
    2a62:	1a c0       	rjmp	.+52     	; 0x2a98 <gpioPinToggle+0x94>
		break;
	case GPIOB:
		PORTB_DATA ^= u8_pins;
    2a64:	a8 e3       	ldi	r26, 0x38	; 56
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e8 e3       	ldi	r30, 0x38	; 56
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	90 81       	ld	r25, Z
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	89 27       	eor	r24, r25
    2a72:	8c 93       	st	X, r24
    2a74:	11 c0       	rjmp	.+34     	; 0x2a98 <gpioPinToggle+0x94>
		break;
	case GPIOC:
		PORTC_DATA ^= u8_pins;
    2a76:	a5 e3       	ldi	r26, 0x35	; 53
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	e5 e3       	ldi	r30, 0x35	; 53
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	90 81       	ld	r25, Z
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	89 27       	eor	r24, r25
    2a84:	8c 93       	st	X, r24
    2a86:	08 c0       	rjmp	.+16     	; 0x2a98 <gpioPinToggle+0x94>
		break;
	case GPIOD:
		PORTD_DATA ^= u8_pins;
    2a88:	a2 e3       	ldi	r26, 0x32	; 50
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e2 e3       	ldi	r30, 0x32	; 50
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	90 81       	ld	r25, Z
    2a92:	8a 81       	ldd	r24, Y+2	; 0x02
    2a94:	89 27       	eor	r24, r25
    2a96:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <gpioPinRead>:

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	29 97       	sbiw	r28, 0x09	; 9
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
    2aba:	89 83       	std	Y+1, r24	; 0x01
    2abc:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to read its pin */
	switch(u8_port)
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	28 2f       	mov	r18, r24
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	3d 83       	std	Y+5, r19	; 0x05
    2ac6:	2c 83       	std	Y+4, r18	; 0x04
    2ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aca:	9d 81       	ldd	r25, Y+5	; 0x05
    2acc:	81 30       	cpi	r24, 0x01	; 1
    2ace:	91 05       	cpc	r25, r1
    2ad0:	19 f1       	breq	.+70     	; 0x2b18 <gpioPinRead+0x72>
    2ad2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ad4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ad6:	22 30       	cpi	r18, 0x02	; 2
    2ad8:	31 05       	cpc	r19, r1
    2ada:	2c f4       	brge	.+10     	; 0x2ae6 <gpioPinRead+0x40>
    2adc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ade:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	61 f0       	breq	.+24     	; 0x2afc <gpioPinRead+0x56>
    2ae4:	43 c0       	rjmp	.+134    	; 0x2b6c <gpioPinRead+0xc6>
    2ae6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ae8:	3d 81       	ldd	r19, Y+5	; 0x05
    2aea:	22 30       	cpi	r18, 0x02	; 2
    2aec:	31 05       	cpc	r19, r1
    2aee:	11 f1       	breq	.+68     	; 0x2b34 <gpioPinRead+0x8e>
    2af0:	8c 81       	ldd	r24, Y+4	; 0x04
    2af2:	9d 81       	ldd	r25, Y+5	; 0x05
    2af4:	83 30       	cpi	r24, 0x03	; 3
    2af6:	91 05       	cpc	r25, r1
    2af8:	59 f1       	breq	.+86     	; 0x2b50 <gpioPinRead+0xaa>
    2afa:	38 c0       	rjmp	.+112    	; 0x2b6c <gpioPinRead+0xc6>
	{
	case GPIOA:
		return ((PORTA_PIN & u8_pin)? 1:0);
    2afc:	e9 e3       	ldi	r30, 0x39	; 57
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	90 81       	ld	r25, Z
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	89 23       	and	r24, r25
    2b06:	8e 83       	std	Y+6, r24	; 0x06
    2b08:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0a:	99 23       	and	r25, r25
    2b0c:	11 f0       	breq	.+4      	; 0x2b12 <gpioPinRead+0x6c>
    2b0e:	21 e0       	ldi	r18, 0x01	; 1
    2b10:	2e 83       	std	Y+6, r18	; 0x06
    2b12:	3e 81       	ldd	r19, Y+6	; 0x06
    2b14:	3b 83       	std	Y+3, r19	; 0x03
    2b16:	2c c0       	rjmp	.+88     	; 0x2b70 <gpioPinRead+0xca>
		break;
	case GPIOB:
		return ((PORTB_PIN & u8_pin)? 1:0);
    2b18:	e6 e3       	ldi	r30, 0x36	; 54
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	90 81       	ld	r25, Z
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	89 23       	and	r24, r25
    2b22:	8f 83       	std	Y+7, r24	; 0x07
    2b24:	8f 81       	ldd	r24, Y+7	; 0x07
    2b26:	88 23       	and	r24, r24
    2b28:	11 f0       	breq	.+4      	; 0x2b2e <gpioPinRead+0x88>
    2b2a:	91 e0       	ldi	r25, 0x01	; 1
    2b2c:	9f 83       	std	Y+7, r25	; 0x07
    2b2e:	2f 81       	ldd	r18, Y+7	; 0x07
    2b30:	2b 83       	std	Y+3, r18	; 0x03
    2b32:	1e c0       	rjmp	.+60     	; 0x2b70 <gpioPinRead+0xca>
		break;
	case GPIOC:
		return ((PORTC_PIN & u8_pin)? 1:0);
    2b34:	e3 e3       	ldi	r30, 0x33	; 51
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	90 81       	ld	r25, Z
    2b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3c:	89 23       	and	r24, r25
    2b3e:	88 87       	std	Y+8, r24	; 0x08
    2b40:	38 85       	ldd	r19, Y+8	; 0x08
    2b42:	33 23       	and	r19, r19
    2b44:	11 f0       	breq	.+4      	; 0x2b4a <gpioPinRead+0xa4>
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	88 87       	std	Y+8, r24	; 0x08
    2b4a:	98 85       	ldd	r25, Y+8	; 0x08
    2b4c:	9b 83       	std	Y+3, r25	; 0x03
    2b4e:	10 c0       	rjmp	.+32     	; 0x2b70 <gpioPinRead+0xca>
		break;
	case GPIOD:
		return ((PORTD_PIN & u8_pin)? 1:0);
    2b50:	e0 e3       	ldi	r30, 0x30	; 48
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	90 81       	ld	r25, Z
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	89 23       	and	r24, r25
    2b5a:	89 87       	std	Y+9, r24	; 0x09
    2b5c:	29 85       	ldd	r18, Y+9	; 0x09
    2b5e:	22 23       	and	r18, r18
    2b60:	11 f0       	breq	.+4      	; 0x2b66 <gpioPinRead+0xc0>
    2b62:	31 e0       	ldi	r19, 0x01	; 1
    2b64:	39 87       	std	Y+9, r19	; 0x09
    2b66:	89 85       	ldd	r24, Y+9	; 0x09
    2b68:	8b 83       	std	Y+3, r24	; 0x03
    2b6a:	02 c0       	rjmp	.+4      	; 0x2b70 <gpioPinRead+0xca>
		break;
	default:
		return ERROR;
    2b6c:	9f ef       	ldi	r25, 0xFF	; 255
    2b6e:	9b 83       	std	Y+3, r25	; 0x03
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
	}
}
    2b72:	29 96       	adiw	r28, 0x09	; 9
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	cf 91       	pop	r28
    2b80:	df 91       	pop	r29
    2b82:	08 95       	ret

00002b84 <pushButtonInit>:
#include "pushButtonConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void pushButtonInit(En_buttonId_t en_button_id)
{
    2b84:	df 93       	push	r29
    2b86:	cf 93       	push	r28
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <pushButtonInit+0x6>
    2b8a:	0f 92       	push	r0
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to be initialized */
	switch(en_button_id)
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	28 2f       	mov	r18, r24
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	3b 83       	std	Y+3, r19	; 0x03
    2b9a:	2a 83       	std	Y+2, r18	; 0x02
    2b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	31 f0       	breq	.+12     	; 0x2bb0 <pushButtonInit+0x2c>
    2ba4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ba6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ba8:	21 30       	cpi	r18, 0x01	; 1
    2baa:	31 05       	cpc	r19, r1
    2bac:	39 f0       	breq	.+14     	; 0x2bbc <pushButtonInit+0x38>
    2bae:	0b c0       	rjmp	.+22     	; 0x2bc6 <pushButtonInit+0x42>
	{
	case BTN_0:
		gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
    2bb0:	82 e0       	ldi	r24, 0x02	; 2
    2bb2:	60 e1       	ldi	r22, 0x10	; 16
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	0e 94 2a 14 	call	0x2854	; 0x2854 <gpioPinDirection>
    2bba:	05 c0       	rjmp	.+10     	; 0x2bc6 <pushButtonInit+0x42>
		break;
	case BTN_1:
		gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	64 e0       	ldi	r22, 0x04	; 4
    2bc0:	40 e0       	ldi	r20, 0x00	; 0
    2bc2:	0e 94 2a 14 	call	0x2854	; 0x2854 <gpioPinDirection>
		break;
	default:

		break;
	}
}
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <pushButtonUpdate>:

void pushButtonUpdate(void)
{
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
	/* Postponed */
}
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_button_id)
{
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <pushButtonGetStatus+0x6>
    2be6:	00 d0       	rcall	.+0      	; 0x2be8 <pushButtonGetStatus+0x8>
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to read its status (pressed or released) */
	switch(en_button_id)
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	28 2f       	mov	r18, r24
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	3c 83       	std	Y+4, r19	; 0x04
    2bf6:	2b 83       	std	Y+3, r18	; 0x03
    2bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfc:	81 30       	cpi	r24, 0x01	; 1
    2bfe:	91 05       	cpc	r25, r1
    2c00:	41 f1       	breq	.+80     	; 0x2c52 <pushButtonGetStatus+0x72>
    2c02:	2b 81       	ldd	r18, Y+3	; 0x03
    2c04:	3c 81       	ldd	r19, Y+4	; 0x04
    2c06:	22 30       	cpi	r18, 0x02	; 2
    2c08:	31 05       	cpc	r19, r1
    2c0a:	2c f4       	brge	.+10     	; 0x2c16 <pushButtonGetStatus+0x36>
    2c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c10:	00 97       	sbiw	r24, 0x00	; 0
    2c12:	61 f0       	breq	.+24     	; 0x2c2c <pushButtonGetStatus+0x4c>
    2c14:	37 c0       	rjmp	.+110    	; 0x2c84 <pushButtonGetStatus+0xa4>
    2c16:	2b 81       	ldd	r18, Y+3	; 0x03
    2c18:	3c 81       	ldd	r19, Y+4	; 0x04
    2c1a:	22 30       	cpi	r18, 0x02	; 2
    2c1c:	31 05       	cpc	r19, r1
    2c1e:	61 f1       	breq	.+88     	; 0x2c78 <pushButtonGetStatus+0x98>
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
    2c22:	9c 81       	ldd	r25, Y+4	; 0x04
    2c24:	83 30       	cpi	r24, 0x03	; 3
    2c26:	91 05       	cpc	r25, r1
    2c28:	51 f1       	breq	.+84     	; 0x2c7e <pushButtonGetStatus+0x9e>
    2c2a:	2c c0       	rjmp	.+88     	; 0x2c84 <pushButtonGetStatus+0xa4>
	{
	case BTN_0:
		if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    2c2c:	82 e0       	ldi	r24, 0x02	; 2
    2c2e:	60 e1       	ldi	r22, 0x10	; 16
    2c30:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <gpioPinRead>
    2c34:	88 23       	and	r24, r24
    2c36:	59 f0       	breq	.+22     	; 0x2c4e <pushButtonGetStatus+0x6e>
		{
			if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    2c38:	82 e0       	ldi	r24, 0x02	; 2
    2c3a:	60 e1       	ldi	r22, 0x10	; 16
    2c3c:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <gpioPinRead>
    2c40:	88 23       	and	r24, r24
    2c42:	19 f0       	breq	.+6      	; 0x2c4a <pushButtonGetStatus+0x6a>
			{
				return Pressed;
    2c44:	92 e0       	ldi	r25, 0x02	; 2
    2c46:	9a 83       	std	Y+2, r25	; 0x02
    2c48:	1f c0       	rjmp	.+62     	; 0x2c88 <pushButtonGetStatus+0xa8>
			}else
			{
				return Released;
    2c4a:	1a 82       	std	Y+2, r1	; 0x02
    2c4c:	1d c0       	rjmp	.+58     	; 0x2c88 <pushButtonGetStatus+0xa8>
			}
		}else
		{
			return Released;
    2c4e:	1a 82       	std	Y+2, r1	; 0x02
    2c50:	1b c0       	rjmp	.+54     	; 0x2c88 <pushButtonGetStatus+0xa8>
		}
		break;
	case BTN_1:
		if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	64 e0       	ldi	r22, 0x04	; 4
    2c56:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <gpioPinRead>
    2c5a:	88 23       	and	r24, r24
    2c5c:	59 f0       	breq	.+22     	; 0x2c74 <pushButtonGetStatus+0x94>
		{
			if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	64 e0       	ldi	r22, 0x04	; 4
    2c62:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <gpioPinRead>
    2c66:	88 23       	and	r24, r24
    2c68:	19 f0       	breq	.+6      	; 0x2c70 <pushButtonGetStatus+0x90>
			{
				return Pressed;
    2c6a:	22 e0       	ldi	r18, 0x02	; 2
    2c6c:	2a 83       	std	Y+2, r18	; 0x02
    2c6e:	0c c0       	rjmp	.+24     	; 0x2c88 <pushButtonGetStatus+0xa8>
			}else
			{
				return Released;
    2c70:	1a 82       	std	Y+2, r1	; 0x02
    2c72:	0a c0       	rjmp	.+20     	; 0x2c88 <pushButtonGetStatus+0xa8>
			}
		}else
		{
			return Released;
    2c74:	1a 82       	std	Y+2, r1	; 0x02
    2c76:	08 c0       	rjmp	.+16     	; 0x2c88 <pushButtonGetStatus+0xa8>
		}
		break;
	case BTN_2:
		return ERROR;
    2c78:	3f ef       	ldi	r19, 0xFF	; 255
    2c7a:	3a 83       	std	Y+2, r19	; 0x02
    2c7c:	05 c0       	rjmp	.+10     	; 0x2c88 <pushButtonGetStatus+0xa8>
		break;
	case BTN_3:
		return ERROR;
    2c7e:	8f ef       	ldi	r24, 0xFF	; 255
    2c80:	8a 83       	std	Y+2, r24	; 0x02
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <pushButtonGetStatus+0xa8>
		break;
	default:
		return ERROR;
    2c84:	9f ef       	ldi	r25, 0xFF	; 255
    2c86:	9a 83       	std	Y+2, r25	; 0x02
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	08 95       	ret

00002c98 <__vector_10>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(TIMER0_COMP_vect)
{
    2c98:	1f 92       	push	r1
    2c9a:	0f 92       	push	r0
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	0f 92       	push	r0
    2ca0:	11 24       	eor	r1, r1
    2ca2:	2f 93       	push	r18
    2ca4:	3f 93       	push	r19
    2ca6:	4f 93       	push	r20
    2ca8:	5f 93       	push	r21
    2caa:	6f 93       	push	r22
    2cac:	7f 93       	push	r23
    2cae:	8f 93       	push	r24
    2cb0:	9f 93       	push	r25
    2cb2:	af 93       	push	r26
    2cb4:	bf 93       	push	r27
    2cb6:	ef 93       	push	r30
    2cb8:	ff 93       	push	r31
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
	if(g_T0_CTC_callBackPtr != NULL)
    2cc2:	80 91 aa 00 	lds	r24, 0x00AA
    2cc6:	90 91 ab 00 	lds	r25, 0x00AB
    2cca:	00 97       	sbiw	r24, 0x00	; 0
    2ccc:	29 f0       	breq	.+10     	; 0x2cd8 <__vector_10+0x40>
	{
		g_T0_CTC_callBackPtr();
    2cce:	e0 91 aa 00 	lds	r30, 0x00AA
    2cd2:	f0 91 ab 00 	lds	r31, 0x00AB
    2cd6:	09 95       	icall
	}
}
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	ff 91       	pop	r31
    2cde:	ef 91       	pop	r30
    2ce0:	bf 91       	pop	r27
    2ce2:	af 91       	pop	r26
    2ce4:	9f 91       	pop	r25
    2ce6:	8f 91       	pop	r24
    2ce8:	7f 91       	pop	r23
    2cea:	6f 91       	pop	r22
    2cec:	5f 91       	pop	r21
    2cee:	4f 91       	pop	r20
    2cf0:	3f 91       	pop	r19
    2cf2:	2f 91       	pop	r18
    2cf4:	0f 90       	pop	r0
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	0f 90       	pop	r0
    2cfa:	1f 90       	pop	r1
    2cfc:	18 95       	reti

00002cfe <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    2cfe:	1f 92       	push	r1
    2d00:	0f 92       	push	r0
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	0f 92       	push	r0
    2d06:	11 24       	eor	r1, r1
    2d08:	2f 93       	push	r18
    2d0a:	3f 93       	push	r19
    2d0c:	4f 93       	push	r20
    2d0e:	5f 93       	push	r21
    2d10:	6f 93       	push	r22
    2d12:	7f 93       	push	r23
    2d14:	8f 93       	push	r24
    2d16:	9f 93       	push	r25
    2d18:	af 93       	push	r26
    2d1a:	bf 93       	push	r27
    2d1c:	ef 93       	push	r30
    2d1e:	ff 93       	push	r31
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
	if(g_T0_OVF_callBackPtr != NULL)
    2d28:	80 91 ac 00 	lds	r24, 0x00AC
    2d2c:	90 91 ad 00 	lds	r25, 0x00AD
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	29 f0       	breq	.+10     	; 0x2d3e <__vector_11+0x40>
	{
		g_T0_OVF_callBackPtr();
    2d34:	e0 91 ac 00 	lds	r30, 0x00AC
    2d38:	f0 91 ad 00 	lds	r31, 0x00AD
    2d3c:	09 95       	icall
	}
}
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	ff 91       	pop	r31
    2d44:	ef 91       	pop	r30
    2d46:	bf 91       	pop	r27
    2d48:	af 91       	pop	r26
    2d4a:	9f 91       	pop	r25
    2d4c:	8f 91       	pop	r24
    2d4e:	7f 91       	pop	r23
    2d50:	6f 91       	pop	r22
    2d52:	5f 91       	pop	r21
    2d54:	4f 91       	pop	r20
    2d56:	3f 91       	pop	r19
    2d58:	2f 91       	pop	r18
    2d5a:	0f 90       	pop	r0
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	0f 90       	pop	r0
    2d60:	1f 90       	pop	r1
    2d62:	18 95       	reti

00002d64 <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    2d64:	1f 92       	push	r1
    2d66:	0f 92       	push	r0
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	0f 92       	push	r0
    2d6c:	11 24       	eor	r1, r1
    2d6e:	2f 93       	push	r18
    2d70:	3f 93       	push	r19
    2d72:	4f 93       	push	r20
    2d74:	5f 93       	push	r21
    2d76:	6f 93       	push	r22
    2d78:	7f 93       	push	r23
    2d7a:	8f 93       	push	r24
    2d7c:	9f 93       	push	r25
    2d7e:	af 93       	push	r26
    2d80:	bf 93       	push	r27
    2d82:	ef 93       	push	r30
    2d84:	ff 93       	push	r31
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_ICU_callBackPtr != NULL)
    2d8e:	80 91 ae 00 	lds	r24, 0x00AE
    2d92:	90 91 af 00 	lds	r25, 0x00AF
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	29 f0       	breq	.+10     	; 0x2da4 <__vector_6+0x40>
	{
		g_T1_ICU_callBackPtr();
    2d9a:	e0 91 ae 00 	lds	r30, 0x00AE
    2d9e:	f0 91 af 00 	lds	r31, 0x00AF
    2da2:	09 95       	icall
	}
}
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	ff 91       	pop	r31
    2daa:	ef 91       	pop	r30
    2dac:	bf 91       	pop	r27
    2dae:	af 91       	pop	r26
    2db0:	9f 91       	pop	r25
    2db2:	8f 91       	pop	r24
    2db4:	7f 91       	pop	r23
    2db6:	6f 91       	pop	r22
    2db8:	5f 91       	pop	r21
    2dba:	4f 91       	pop	r20
    2dbc:	3f 91       	pop	r19
    2dbe:	2f 91       	pop	r18
    2dc0:	0f 90       	pop	r0
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	0f 90       	pop	r0
    2dc6:	1f 90       	pop	r1
    2dc8:	18 95       	reti

00002dca <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2dca:	1f 92       	push	r1
    2dcc:	0f 92       	push	r0
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	0f 92       	push	r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	2f 93       	push	r18
    2dd6:	3f 93       	push	r19
    2dd8:	4f 93       	push	r20
    2dda:	5f 93       	push	r21
    2ddc:	6f 93       	push	r22
    2dde:	7f 93       	push	r23
    2de0:	8f 93       	push	r24
    2de2:	9f 93       	push	r25
    2de4:	af 93       	push	r26
    2de6:	bf 93       	push	r27
    2de8:	ef 93       	push	r30
    2dea:	ff 93       	push	r31
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_CTC_A_callBackPtr != NULL)
    2df4:	80 91 b0 00 	lds	r24, 0x00B0
    2df8:	90 91 b1 00 	lds	r25, 0x00B1
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	29 f0       	breq	.+10     	; 0x2e0a <__vector_7+0x40>
	{
		g_T1_CTC_A_callBackPtr();
    2e00:	e0 91 b0 00 	lds	r30, 0x00B0
    2e04:	f0 91 b1 00 	lds	r31, 0x00B1
    2e08:	09 95       	icall
	}
}
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	ff 91       	pop	r31
    2e10:	ef 91       	pop	r30
    2e12:	bf 91       	pop	r27
    2e14:	af 91       	pop	r26
    2e16:	9f 91       	pop	r25
    2e18:	8f 91       	pop	r24
    2e1a:	7f 91       	pop	r23
    2e1c:	6f 91       	pop	r22
    2e1e:	5f 91       	pop	r21
    2e20:	4f 91       	pop	r20
    2e22:	3f 91       	pop	r19
    2e24:	2f 91       	pop	r18
    2e26:	0f 90       	pop	r0
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	0f 90       	pop	r0
    2e2c:	1f 90       	pop	r1
    2e2e:	18 95       	reti

00002e30 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    2e30:	1f 92       	push	r1
    2e32:	0f 92       	push	r0
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	0f 92       	push	r0
    2e38:	11 24       	eor	r1, r1
    2e3a:	2f 93       	push	r18
    2e3c:	3f 93       	push	r19
    2e3e:	4f 93       	push	r20
    2e40:	5f 93       	push	r21
    2e42:	6f 93       	push	r22
    2e44:	7f 93       	push	r23
    2e46:	8f 93       	push	r24
    2e48:	9f 93       	push	r25
    2e4a:	af 93       	push	r26
    2e4c:	bf 93       	push	r27
    2e4e:	ef 93       	push	r30
    2e50:	ff 93       	push	r31
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_CTC_B_callBackPtr != NULL)
    2e5a:	80 91 b2 00 	lds	r24, 0x00B2
    2e5e:	90 91 b3 00 	lds	r25, 0x00B3
    2e62:	00 97       	sbiw	r24, 0x00	; 0
    2e64:	29 f0       	breq	.+10     	; 0x2e70 <__vector_8+0x40>
	{
		g_T1_CTC_B_callBackPtr();
    2e66:	e0 91 b2 00 	lds	r30, 0x00B2
    2e6a:	f0 91 b3 00 	lds	r31, 0x00B3
    2e6e:	09 95       	icall
	}
}
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	ff 91       	pop	r31
    2e76:	ef 91       	pop	r30
    2e78:	bf 91       	pop	r27
    2e7a:	af 91       	pop	r26
    2e7c:	9f 91       	pop	r25
    2e7e:	8f 91       	pop	r24
    2e80:	7f 91       	pop	r23
    2e82:	6f 91       	pop	r22
    2e84:	5f 91       	pop	r21
    2e86:	4f 91       	pop	r20
    2e88:	3f 91       	pop	r19
    2e8a:	2f 91       	pop	r18
    2e8c:	0f 90       	pop	r0
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	0f 90       	pop	r0
    2e92:	1f 90       	pop	r1
    2e94:	18 95       	reti

00002e96 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    2e96:	1f 92       	push	r1
    2e98:	0f 92       	push	r0
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	0f 92       	push	r0
    2e9e:	11 24       	eor	r1, r1
    2ea0:	2f 93       	push	r18
    2ea2:	3f 93       	push	r19
    2ea4:	4f 93       	push	r20
    2ea6:	5f 93       	push	r21
    2ea8:	6f 93       	push	r22
    2eaa:	7f 93       	push	r23
    2eac:	8f 93       	push	r24
    2eae:	9f 93       	push	r25
    2eb0:	af 93       	push	r26
    2eb2:	bf 93       	push	r27
    2eb4:	ef 93       	push	r30
    2eb6:	ff 93       	push	r31
    2eb8:	df 93       	push	r29
    2eba:	cf 93       	push	r28
    2ebc:	cd b7       	in	r28, 0x3d	; 61
    2ebe:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_OVF_callBackPtr != NULL)
    2ec0:	80 91 b4 00 	lds	r24, 0x00B4
    2ec4:	90 91 b5 00 	lds	r25, 0x00B5
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	29 f0       	breq	.+10     	; 0x2ed6 <__vector_9+0x40>
	{
		g_T1_OVF_callBackPtr();
    2ecc:	e0 91 b4 00 	lds	r30, 0x00B4
    2ed0:	f0 91 b5 00 	lds	r31, 0x00B5
    2ed4:	09 95       	icall
	}
}
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	ff 91       	pop	r31
    2edc:	ef 91       	pop	r30
    2ede:	bf 91       	pop	r27
    2ee0:	af 91       	pop	r26
    2ee2:	9f 91       	pop	r25
    2ee4:	8f 91       	pop	r24
    2ee6:	7f 91       	pop	r23
    2ee8:	6f 91       	pop	r22
    2eea:	5f 91       	pop	r21
    2eec:	4f 91       	pop	r20
    2eee:	3f 91       	pop	r19
    2ef0:	2f 91       	pop	r18
    2ef2:	0f 90       	pop	r0
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	0f 90       	pop	r0
    2ef8:	1f 90       	pop	r1
    2efa:	18 95       	reti

00002efc <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    2efc:	1f 92       	push	r1
    2efe:	0f 92       	push	r0
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	0f 92       	push	r0
    2f04:	11 24       	eor	r1, r1
    2f06:	2f 93       	push	r18
    2f08:	3f 93       	push	r19
    2f0a:	4f 93       	push	r20
    2f0c:	5f 93       	push	r21
    2f0e:	6f 93       	push	r22
    2f10:	7f 93       	push	r23
    2f12:	8f 93       	push	r24
    2f14:	9f 93       	push	r25
    2f16:	af 93       	push	r26
    2f18:	bf 93       	push	r27
    2f1a:	ef 93       	push	r30
    2f1c:	ff 93       	push	r31
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
	if(g_T2_CTC_callBackPtr != NULL)
    2f26:	80 91 b6 00 	lds	r24, 0x00B6
    2f2a:	90 91 b7 00 	lds	r25, 0x00B7
    2f2e:	00 97       	sbiw	r24, 0x00	; 0
    2f30:	29 f0       	breq	.+10     	; 0x2f3c <__vector_4+0x40>
	{
		g_T2_CTC_callBackPtr();
    2f32:	e0 91 b6 00 	lds	r30, 0x00B6
    2f36:	f0 91 b7 00 	lds	r31, 0x00B7
    2f3a:	09 95       	icall
	}
}
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	ff 91       	pop	r31
    2f42:	ef 91       	pop	r30
    2f44:	bf 91       	pop	r27
    2f46:	af 91       	pop	r26
    2f48:	9f 91       	pop	r25
    2f4a:	8f 91       	pop	r24
    2f4c:	7f 91       	pop	r23
    2f4e:	6f 91       	pop	r22
    2f50:	5f 91       	pop	r21
    2f52:	4f 91       	pop	r20
    2f54:	3f 91       	pop	r19
    2f56:	2f 91       	pop	r18
    2f58:	0f 90       	pop	r0
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	0f 90       	pop	r0
    2f5e:	1f 90       	pop	r1
    2f60:	18 95       	reti

00002f62 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    2f62:	1f 92       	push	r1
    2f64:	0f 92       	push	r0
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	0f 92       	push	r0
    2f6a:	11 24       	eor	r1, r1
    2f6c:	2f 93       	push	r18
    2f6e:	3f 93       	push	r19
    2f70:	4f 93       	push	r20
    2f72:	5f 93       	push	r21
    2f74:	6f 93       	push	r22
    2f76:	7f 93       	push	r23
    2f78:	8f 93       	push	r24
    2f7a:	9f 93       	push	r25
    2f7c:	af 93       	push	r26
    2f7e:	bf 93       	push	r27
    2f80:	ef 93       	push	r30
    2f82:	ff 93       	push	r31
    2f84:	df 93       	push	r29
    2f86:	cf 93       	push	r28
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
	if(g_T2_OVF_callBackPtr != NULL)
    2f8c:	80 91 b8 00 	lds	r24, 0x00B8
    2f90:	90 91 b9 00 	lds	r25, 0x00B9
    2f94:	00 97       	sbiw	r24, 0x00	; 0
    2f96:	29 f0       	breq	.+10     	; 0x2fa2 <__vector_5+0x40>
	{
		g_T2_OVF_callBackPtr();
    2f98:	e0 91 b8 00 	lds	r30, 0x00B8
    2f9c:	f0 91 b9 00 	lds	r31, 0x00B9
    2fa0:	09 95       	icall
	}
}
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	ff 91       	pop	r31
    2fa8:	ef 91       	pop	r30
    2faa:	bf 91       	pop	r27
    2fac:	af 91       	pop	r26
    2fae:	9f 91       	pop	r25
    2fb0:	8f 91       	pop	r24
    2fb2:	7f 91       	pop	r23
    2fb4:	6f 91       	pop	r22
    2fb6:	5f 91       	pop	r21
    2fb8:	4f 91       	pop	r20
    2fba:	3f 91       	pop	r19
    2fbc:	2f 91       	pop	r18
    2fbe:	0f 90       	pop	r0
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	0f 90       	pop	r0
    2fc4:	1f 90       	pop	r1
    2fc6:	18 95       	reti

00002fc8 <timer0Init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, En_timer0Interrupt_t en_interruptMask)
{
    2fc8:	ef 92       	push	r14
    2fca:	0f 93       	push	r16
    2fcc:	df 93       	push	r29
    2fce:	cf 93       	push	r28
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <timer0Init+0xa>
    2fd2:	00 d0       	rcall	.+0      	; 0x2fd4 <timer0Init+0xc>
    2fd4:	00 d0       	rcall	.+0      	; 0x2fd6 <timer0Init+0xe>
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	89 83       	std	Y+1, r24	; 0x01
    2fdc:	6a 83       	std	Y+2, r22	; 0x02
    2fde:	4b 83       	std	Y+3, r20	; 0x03
    2fe0:	2c 83       	std	Y+4, r18	; 0x04
    2fe2:	0d 83       	std	Y+5, r16	; 0x05
    2fe4:	ee 82       	std	Y+6, r14	; 0x06
	/* Non-PWM mode */
	SET_BIT(TCCR0, FOC0);
    2fe6:	a3 e5       	ldi	r26, 0x53	; 83
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	e3 e5       	ldi	r30, 0x53	; 83
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	80 81       	ld	r24, Z
    2ff0:	80 68       	ori	r24, 0x80	; 128
    2ff2:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR0 = (TCCR0 & 0xB7) | (en_mode);
    2ff4:	a3 e5       	ldi	r26, 0x53	; 83
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	e3 e5       	ldi	r30, 0x53	; 83
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	80 81       	ld	r24, Z
    2ffe:	98 2f       	mov	r25, r24
    3000:	97 7b       	andi	r25, 0xB7	; 183
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	89 2b       	or	r24, r25
    3006:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR0 = (TCCR0 & 0xCF) | (en_OC0);
    3008:	a3 e5       	ldi	r26, 0x53	; 83
    300a:	b0 e0       	ldi	r27, 0x00	; 0
    300c:	e3 e5       	ldi	r30, 0x53	; 83
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	80 81       	ld	r24, Z
    3012:	98 2f       	mov	r25, r24
    3014:	9f 7c       	andi	r25, 0xCF	; 207
    3016:	8a 81       	ldd	r24, Y+2	; 0x02
    3018:	89 2b       	or	r24, r25
    301a:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	80 93 a8 00 	sts	0x00A8, r24

	/* Set the timer/counter0 initial value */
	TCNT0 = u8_initialValue;
    3022:	e2 e5       	ldi	r30, 0x52	; 82
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	8c 81       	ldd	r24, Y+4	; 0x04
    3028:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR0 = u8_outputCompare;
    302a:	ec e5       	ldi	r30, 0x5C	; 92
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	8d 81       	ldd	r24, Y+5	; 0x05
    3030:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xFC) | (en_interruptMask);
    3032:	a9 e5       	ldi	r26, 0x59	; 89
    3034:	b0 e0       	ldi	r27, 0x00	; 0
    3036:	e9 e5       	ldi	r30, 0x59	; 89
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	80 81       	ld	r24, Z
    303c:	98 2f       	mov	r25, r24
    303e:	9c 7f       	andi	r25, 0xFC	; 252
    3040:	8e 81       	ldd	r24, Y+6	; 0x06
    3042:	89 2b       	or	r24, r25
    3044:	8c 93       	st	X, r24
}
    3046:	26 96       	adiw	r28, 0x06	; 6
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	f8 94       	cli
    304c:	de bf       	out	0x3e, r29	; 62
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	cd bf       	out	0x3d, r28	; 61
    3052:	cf 91       	pop	r28
    3054:	df 91       	pop	r29
    3056:	0f 91       	pop	r16
    3058:	ef 90       	pop	r14
    305a:	08 95       	ret

0000305c <timer0Set>:

void timer0Set(uint8_t u8_value)
{
    305c:	df 93       	push	r29
    305e:	cf 93       	push	r28
    3060:	0f 92       	push	r0
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter0 custom value */
	TCNT0 = u8_value;
    3068:	e2 e5       	ldi	r30, 0x52	; 82
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	80 83       	st	Z, r24
}
    3070:	0f 90       	pop	r0
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <timer0Read>:

uint8_t timer0Read(void)
{
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT0;
    3080:	e2 e5       	ldi	r30, 0x52	; 82
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	80 81       	ld	r24, Z
}
    3086:	cf 91       	pop	r28
    3088:	df 91       	pop	r29
    308a:	08 95       	ret

0000308c <timer0Start>:

void timer0Start(void)
{
    308c:	df 93       	push	r29
    308e:	cf 93       	push	r28
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR0 = (TCCR0 & 0xF8) | (gu8_timer0Timer1PreScaler);
    3094:	a3 e5       	ldi	r26, 0x53	; 83
    3096:	b0 e0       	ldi	r27, 0x00	; 0
    3098:	e3 e5       	ldi	r30, 0x53	; 83
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	80 81       	ld	r24, Z
    309e:	98 2f       	mov	r25, r24
    30a0:	98 7f       	andi	r25, 0xF8	; 248
    30a2:	80 91 a8 00 	lds	r24, 0x00A8
    30a6:	89 2b       	or	r24, r25
    30a8:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT0 = 0;
    30aa:	e2 e5       	ldi	r30, 0x52	; 82
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	10 82       	st	Z, r1
}
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	08 95       	ret

000030b6 <timer0Stop>:

void timer0Stop(void)
{
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR0 &= ~((1 << CS00) | (1 << CS01) | (1 << CS02));
    30be:	a3 e5       	ldi	r26, 0x53	; 83
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e3 e5       	ldi	r30, 0x53	; 83
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	88 7f       	andi	r24, 0xF8	; 248
    30ca:	8c 93       	st	X, r24
}
    30cc:	cf 91       	pop	r28
    30ce:	df 91       	pop	r29
    30d0:	08 95       	ret

000030d2 <timer0DelayMs>:

void timer0DelayMs(uint16_t u16_delay_in_ms)
{
    30d2:	ef 92       	push	r14
    30d4:	0f 93       	push	r16
    30d6:	df 93       	push	r29
    30d8:	cf 93       	push	r28
    30da:	00 d0       	rcall	.+0      	; 0x30dc <timer0DelayMs+0xa>
    30dc:	00 d0       	rcall	.+0      	; 0x30de <timer0DelayMs+0xc>
    30de:	0f 92       	push	r0
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
    30e4:	9d 83       	std	Y+5, r25	; 0x05
    30e6:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    30e8:	1b 82       	std	Y+3, r1	; 0x03
    30ea:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    30ec:	8a ef       	ldi	r24, 0xFA	; 250
    30ee:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
    30f0:	80 e0       	ldi	r24, 0x00	; 0
    30f2:	60 e0       	ldi	r22, 0x00	; 0
    30f4:	43 e0       	ldi	r20, 0x03	; 3
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	00 e0       	ldi	r16, 0x00	; 0
    30fa:	ee 24       	eor	r14, r14
    30fc:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <timer0Init>
	timer0Start();
    3100:	0e 94 46 18 	call	0x308c	; 0x308c <timer0Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    3104:	1b 82       	std	Y+3, r1	; 0x03
    3106:	1a 82       	std	Y+2, r1	; 0x02
    3108:	0e c0       	rjmp	.+28     	; 0x3126 <timer0DelayMs+0x54>
	{
		while(TCNT0 < u8_outputCompare);
    310a:	e2 e5       	ldi	r30, 0x52	; 82
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	90 81       	ld	r25, Z
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	98 17       	cp	r25, r24
    3114:	d0 f3       	brcs	.-12     	; 0x310a <timer0DelayMs+0x38>
		TCNT0 = 0;
    3116:	e2 e5       	ldi	r30, 0x52	; 82
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
	timer0Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    311c:	8a 81       	ldd	r24, Y+2	; 0x02
    311e:	9b 81       	ldd	r25, Y+3	; 0x03
    3120:	01 96       	adiw	r24, 0x01	; 1
    3122:	9b 83       	std	Y+3, r25	; 0x03
    3124:	8a 83       	std	Y+2, r24	; 0x02
    3126:	2a 81       	ldd	r18, Y+2	; 0x02
    3128:	3b 81       	ldd	r19, Y+3	; 0x03
    312a:	8c 81       	ldd	r24, Y+4	; 0x04
    312c:	9d 81       	ldd	r25, Y+5	; 0x05
    312e:	28 17       	cp	r18, r24
    3130:	39 07       	cpc	r19, r25
    3132:	58 f3       	brcs	.-42     	; 0x310a <timer0DelayMs+0x38>
	{
		while(TCNT0 < u8_outputCompare);
		TCNT0 = 0;
	}
}
    3134:	0f 90       	pop	r0
    3136:	0f 90       	pop	r0
    3138:	0f 90       	pop	r0
    313a:	0f 90       	pop	r0
    313c:	0f 90       	pop	r0
    313e:	cf 91       	pop	r28
    3140:	df 91       	pop	r29
    3142:	0f 91       	pop	r16
    3144:	ef 90       	pop	r14
    3146:	08 95       	ret

00003148 <timer0DelayUs>:

void timer0DelayUs(uint32_t u32_delay_in_us)
{
    3148:	ef 92       	push	r14
    314a:	0f 93       	push	r16
    314c:	df 93       	push	r29
    314e:	cf 93       	push	r28
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	29 97       	sbiw	r28, 0x09	; 9
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	6e 83       	std	Y+6, r22	; 0x06
    3162:	7f 83       	std	Y+7, r23	; 0x07
    3164:	88 87       	std	Y+8, r24	; 0x08
    3166:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    3168:	1a 82       	std	Y+2, r1	; 0x02
    316a:	1b 82       	std	Y+3, r1	; 0x03
    316c:	1c 82       	std	Y+4, r1	; 0x04
    316e:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    3170:	80 e1       	ldi	r24, 0x10	; 16
    3172:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
    3174:	88 e0       	ldi	r24, 0x08	; 8
    3176:	60 e0       	ldi	r22, 0x00	; 0
    3178:	41 e0       	ldi	r20, 0x01	; 1
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	09 81       	ldd	r16, Y+1	; 0x01
    317e:	ee 24       	eor	r14, r14
    3180:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <timer0Init>
	timer0Start();
    3184:	0e 94 46 18 	call	0x308c	; 0x308c <timer0Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    3188:	1a 82       	std	Y+2, r1	; 0x02
    318a:	1b 82       	std	Y+3, r1	; 0x03
    318c:	1c 82       	std	Y+4, r1	; 0x04
    318e:	1d 82       	std	Y+5, r1	; 0x05
    3190:	1e c0       	rjmp	.+60     	; 0x31ce <timer0DelayUs+0x86>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
    3192:	e8 e5       	ldi	r30, 0x58	; 88
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	88 2f       	mov	r24, r24
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	82 70       	andi	r24, 0x02	; 2
    319e:	90 70       	andi	r25, 0x00	; 0
    31a0:	00 97       	sbiw	r24, 0x00	; 0
    31a2:	b9 f3       	breq	.-18     	; 0x3192 <timer0DelayUs+0x4a>
		SET_BIT(TIFR, OCF0);
    31a4:	a8 e5       	ldi	r26, 0x58	; 88
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	e8 e5       	ldi	r30, 0x58	; 88
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	82 60       	ori	r24, 0x02	; 2
    31b0:	8c 93       	st	X, r24
		TCNT0 = 0;
    31b2:	e2 e5       	ldi	r30, 0x52	; 82
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
	timer0Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    31b8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ba:	9b 81       	ldd	r25, Y+3	; 0x03
    31bc:	ac 81       	ldd	r26, Y+4	; 0x04
    31be:	bd 81       	ldd	r27, Y+5	; 0x05
    31c0:	01 96       	adiw	r24, 0x01	; 1
    31c2:	a1 1d       	adc	r26, r1
    31c4:	b1 1d       	adc	r27, r1
    31c6:	8a 83       	std	Y+2, r24	; 0x02
    31c8:	9b 83       	std	Y+3, r25	; 0x03
    31ca:	ac 83       	std	Y+4, r26	; 0x04
    31cc:	bd 83       	std	Y+5, r27	; 0x05
    31ce:	2a 81       	ldd	r18, Y+2	; 0x02
    31d0:	3b 81       	ldd	r19, Y+3	; 0x03
    31d2:	4c 81       	ldd	r20, Y+4	; 0x04
    31d4:	5d 81       	ldd	r21, Y+5	; 0x05
    31d6:	8e 81       	ldd	r24, Y+6	; 0x06
    31d8:	9f 81       	ldd	r25, Y+7	; 0x07
    31da:	a8 85       	ldd	r26, Y+8	; 0x08
    31dc:	b9 85       	ldd	r27, Y+9	; 0x09
    31de:	28 17       	cp	r18, r24
    31e0:	39 07       	cpc	r19, r25
    31e2:	4a 07       	cpc	r20, r26
    31e4:	5b 07       	cpc	r21, r27
    31e6:	a8 f2       	brcs	.-86     	; 0x3192 <timer0DelayUs+0x4a>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
		SET_BIT(TIFR, OCF0);
		TCNT0 = 0;
	}
}
    31e8:	29 96       	adiw	r28, 0x09	; 9
    31ea:	0f b6       	in	r0, 0x3f	; 63
    31ec:	f8 94       	cli
    31ee:	de bf       	out	0x3e, r29	; 62
    31f0:	0f be       	out	0x3f, r0	; 63
    31f2:	cd bf       	out	0x3d, r28	; 61
    31f4:	cf 91       	pop	r28
    31f6:	df 91       	pop	r29
    31f8:	0f 91       	pop	r16
    31fa:	ef 90       	pop	r14
    31fc:	08 95       	ret

000031fe <timer0SwPWM>:

void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    31fe:	ef 92       	push	r14
    3200:	0f 93       	push	r16
    3202:	df 93       	push	r29
    3204:	cf 93       	push	r28
    3206:	00 d0       	rcall	.+0      	; 0x3208 <timer0SwPWM+0xa>
    3208:	00 d0       	rcall	.+0      	; 0x320a <timer0SwPWM+0xc>
    320a:	cd b7       	in	r28, 0x3d	; 61
    320c:	de b7       	in	r29, 0x3e	; 62
    320e:	8b 83       	std	Y+3, r24	; 0x03
    3210:	6c 83       	std	Y+4, r22	; 0x04
	/* Two variables to hold the values of output compare and prescaler */
	uint8_t u8_outputCompare, u8_prescaler;

	/* Enable global interrupt */
	sei();
    3212:	78 94       	sei
	
	/* If condition to determine the right equation to calculate prescaler and output compare values */
	if(u8_frequency <= 80)
    3214:	8c 81       	ldd	r24, Y+4	; 0x04
    3216:	81 35       	cpi	r24, 0x51	; 81
    3218:	e8 f4       	brcc	.+58     	; 0x3254 <timer0SwPWM+0x56>
	{
		u8_prescaler = T0_PRESCALER_64;
    321a:	83 e0       	ldi	r24, 0x03	; 3
    321c:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    321e:	8c 81       	ldd	r24, Y+4	; 0x04
    3220:	88 2f       	mov	r24, r24
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	a0 e0       	ldi	r26, 0x00	; 0
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	39 e1       	ldi	r19, 0x19	; 25
    322c:	40 e0       	ldi	r20, 0x00	; 0
    322e:	50 e0       	ldi	r21, 0x00	; 0
    3230:	bc 01       	movw	r22, r24
    3232:	cd 01       	movw	r24, r26
    3234:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <__mulsi3>
    3238:	9b 01       	movw	r18, r22
    323a:	ac 01       	movw	r20, r24
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	94 e2       	ldi	r25, 0x24	; 36
    3240:	a4 ef       	ldi	r26, 0xF4	; 244
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	bc 01       	movw	r22, r24
    3246:	cd 01       	movw	r24, r26
    3248:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <__udivmodsi4>
    324c:	da 01       	movw	r26, r20
    324e:	c9 01       	movw	r24, r18
    3250:	8a 83       	std	Y+2, r24	; 0x02
    3252:	1c c0       	rjmp	.+56     	; 0x328c <timer0SwPWM+0x8e>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    3254:	82 e0       	ldi	r24, 0x02	; 2
    3256:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    3258:	8c 81       	ldd	r24, Y+4	; 0x04
    325a:	88 2f       	mov	r24, r24
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	a0 e0       	ldi	r26, 0x00	; 0
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	20 e2       	ldi	r18, 0x20	; 32
    3264:	33 e0       	ldi	r19, 0x03	; 3
    3266:	40 e0       	ldi	r20, 0x00	; 0
    3268:	50 e0       	ldi	r21, 0x00	; 0
    326a:	bc 01       	movw	r22, r24
    326c:	cd 01       	movw	r24, r26
    326e:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <__mulsi3>
    3272:	9b 01       	movw	r18, r22
    3274:	ac 01       	movw	r20, r24
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	94 e2       	ldi	r25, 0x24	; 36
    327a:	a4 ef       	ldi	r26, 0xF4	; 244
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	bc 01       	movw	r22, r24
    3280:	cd 01       	movw	r24, r26
    3282:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <__udivmodsi4>
    3286:	da 01       	movw	r26, r20
    3288:	c9 01       	movw	r24, r18
    328a:	8a 83       	std	Y+2, r24	; 0x02
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}
	
	/* Initialize the timer depending on the previously calculated values */
	timer0Init(T0_COMP_MODE, T0_OC0_DIS, u8_prescaler, 0, u8_outputCompare, T0_INTERRUPT_CMP);
    328c:	88 e0       	ldi	r24, 0x08	; 8
    328e:	60 e0       	ldi	r22, 0x00	; 0
    3290:	49 81       	ldd	r20, Y+1	; 0x01
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	0a 81       	ldd	r16, Y+2	; 0x02
    3296:	ee 24       	eor	r14, r14
    3298:	68 94       	set
    329a:	e1 f8       	bld	r14, 1
    329c:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <timer0Init>
	
	/* Provide the clock to the timer */
	timer0Start();
    32a0:	0e 94 46 18 	call	0x308c	; 0x308c <timer0Start>
}
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	0f 91       	pop	r16
    32b2:	ef 90       	pop	r14
    32b4:	08 95       	ret

000032b6 <Timer0_OVF_setCallBack>:

void Timer0_OVF_setCallBack(void(*local_ptr)(void))
{
    32b6:	df 93       	push	r29
    32b8:	cf 93       	push	r28
    32ba:	00 d0       	rcall	.+0      	; 0x32bc <Timer0_OVF_setCallBack+0x6>
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
    32c0:	9a 83       	std	Y+2, r25	; 0x02
    32c2:	89 83       	std	Y+1, r24	; 0x01
	g_T0_OVF_callBackPtr = (volatile void(*)(void))local_ptr;
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	9a 81       	ldd	r25, Y+2	; 0x02
    32c8:	90 93 ad 00 	sts	0x00AD, r25
    32cc:	80 93 ac 00 	sts	0x00AC, r24
}
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	cf 91       	pop	r28
    32d6:	df 91       	pop	r29
    32d8:	08 95       	ret

000032da <Timer0_CTC_setCallBack>:

void Timer0_CTC_setCallBack(void(*local_ptr)(void))
{
    32da:	df 93       	push	r29
    32dc:	cf 93       	push	r28
    32de:	00 d0       	rcall	.+0      	; 0x32e0 <Timer0_CTC_setCallBack+0x6>
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	9a 83       	std	Y+2, r25	; 0x02
    32e6:	89 83       	std	Y+1, r24	; 0x01
	g_T0_CTC_callBackPtr = (volatile void(*)(void))local_ptr;
    32e8:	89 81       	ldd	r24, Y+1	; 0x01
    32ea:	9a 81       	ldd	r25, Y+2	; 0x02
    32ec:	90 93 ab 00 	sts	0x00AB, r25
    32f0:	80 93 aa 00 	sts	0x00AA, r24
}
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	08 95       	ret

000032fe <timer1Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC1,En_timer1perscaler_t en_prescal, uint16_t u16_initialValue, uint16_t u16_outputCompareA, uint16_t u16_outputCompareB,uint16_t u16_inputCapture, En_timer1Interrupt_t en_interruptMask)
{
    32fe:	af 92       	push	r10
    3300:	cf 92       	push	r12
    3302:	df 92       	push	r13
    3304:	ef 92       	push	r14
    3306:	ff 92       	push	r15
    3308:	0f 93       	push	r16
    330a:	1f 93       	push	r17
    330c:	df 93       	push	r29
    330e:	cf 93       	push	r28
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
    3314:	2d 97       	sbiw	r28, 0x0d	; 13
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	89 83       	std	Y+1, r24	; 0x01
    3322:	7b 83       	std	Y+3, r23	; 0x03
    3324:	6a 83       	std	Y+2, r22	; 0x02
    3326:	4c 83       	std	Y+4, r20	; 0x04
    3328:	3e 83       	std	Y+6, r19	; 0x06
    332a:	2d 83       	std	Y+5, r18	; 0x05
    332c:	18 87       	std	Y+8, r17	; 0x08
    332e:	0f 83       	std	Y+7, r16	; 0x07
    3330:	fa 86       	std	Y+10, r15	; 0x0a
    3332:	e9 86       	std	Y+9, r14	; 0x09
    3334:	dc 86       	std	Y+12, r13	; 0x0c
    3336:	cb 86       	std	Y+11, r12	; 0x0b
    3338:	ad 86       	std	Y+13, r10	; 0x0d
	/* Non-PWM mode */
	SET_BIT(TCCR1A, FOC1A);
    333a:	af e4       	ldi	r26, 0x4F	; 79
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	ef e4       	ldi	r30, 0x4F	; 79
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	88 60       	ori	r24, 0x08	; 8
    3346:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
    3348:	af e4       	ldi	r26, 0x4F	; 79
    334a:	b0 e0       	ldi	r27, 0x00	; 0
    334c:	ef e4       	ldi	r30, 0x4F	; 79
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	80 81       	ld	r24, Z
    3352:	84 60       	ori	r24, 0x04	; 4
    3354:	8c 93       	st	X, r24

	TCCR1 = 0x0000;
    3356:	ee e4       	ldi	r30, 0x4E	; 78
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	11 82       	std	Z+1, r1	; 0x01
    335c:	10 82       	st	Z, r1

	/* Set the required operating mode */
	TCCR1 = en_mode | en_OC1;
    335e:	ee e4       	ldi	r30, 0x4E	; 78
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	28 2f       	mov	r18, r24
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	8a 81       	ldd	r24, Y+2	; 0x02
    336a:	9b 81       	ldd	r25, Y+3	; 0x03
    336c:	82 2b       	or	r24, r18
    336e:	93 2b       	or	r25, r19
    3370:	91 83       	std	Z+1, r25	; 0x01
    3372:	80 83       	st	Z, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    3374:	8c 81       	ldd	r24, Y+4	; 0x04
    3376:	80 93 a8 00 	sts	0x00A8, r24

	/* Set the timer/counter0 initial value */
	TCNT1 = u16_initialValue;
    337a:	ec e4       	ldi	r30, 0x4C	; 76
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	8d 81       	ldd	r24, Y+5	; 0x05
    3380:	9e 81       	ldd	r25, Y+6	; 0x06
    3382:	91 83       	std	Z+1, r25	; 0x01
    3384:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR1A = u16_outputCompareA;
    3386:	ea e4       	ldi	r30, 0x4A	; 74
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	8f 81       	ldd	r24, Y+7	; 0x07
    338c:	98 85       	ldd	r25, Y+8	; 0x08
    338e:	91 83       	std	Z+1, r25	; 0x01
    3390:	80 83       	st	Z, r24
	OCR1B = u16_outputCompareB;
    3392:	e8 e4       	ldi	r30, 0x48	; 72
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	89 85       	ldd	r24, Y+9	; 0x09
    3398:	9a 85       	ldd	r25, Y+10	; 0x0a
    339a:	91 83       	std	Z+1, r25	; 0x01
    339c:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xC3) | (en_interruptMask);
    339e:	a9 e5       	ldi	r26, 0x59	; 89
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	e9 e5       	ldi	r30, 0x59	; 89
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	80 81       	ld	r24, Z
    33a8:	98 2f       	mov	r25, r24
    33aa:	93 7c       	andi	r25, 0xC3	; 195
    33ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ae:	89 2b       	or	r24, r25
    33b0:	8c 93       	st	X, r24
}
    33b2:	2d 96       	adiw	r28, 0x0d	; 13
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	cd bf       	out	0x3d, r28	; 61
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	1f 91       	pop	r17
    33c4:	0f 91       	pop	r16
    33c6:	ff 90       	pop	r15
    33c8:	ef 90       	pop	r14
    33ca:	df 90       	pop	r13
    33cc:	cf 90       	pop	r12
    33ce:	af 90       	pop	r10
    33d0:	08 95       	ret

000033d2 <timer1Set>:

void timer1Set(uint16_t u16_value)
{
    33d2:	df 93       	push	r29
    33d4:	cf 93       	push	r28
    33d6:	00 d0       	rcall	.+0      	; 0x33d8 <timer1Set+0x6>
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
    33dc:	9a 83       	std	Y+2, r25	; 0x02
    33de:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter1 custom value */
	TCNT1 = u16_value;
    33e0:	ec e4       	ldi	r30, 0x4C	; 76
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	9a 81       	ldd	r25, Y+2	; 0x02
    33e8:	91 83       	std	Z+1, r25	; 0x01
    33ea:	80 83       	st	Z, r24
}
    33ec:	0f 90       	pop	r0
    33ee:	0f 90       	pop	r0
    33f0:	cf 91       	pop	r28
    33f2:	df 91       	pop	r29
    33f4:	08 95       	ret

000033f6 <timer1Read>:

uint16_t timer1Read(void)
{
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT1;
    33fe:	ec e4       	ldi	r30, 0x4C	; 76
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	80 81       	ld	r24, Z
    3404:	91 81       	ldd	r25, Z+1	; 0x01
}
    3406:	cf 91       	pop	r28
    3408:	df 91       	pop	r29
    340a:	08 95       	ret

0000340c <timer1Start>:

void timer1Start(void)
{
    340c:	df 93       	push	r29
    340e:	cf 93       	push	r28
    3410:	cd b7       	in	r28, 0x3d	; 61
    3412:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR1B = (TCCR1B & 0xF8) | (gu8_timer0Timer1PreScaler);
    3414:	ae e4       	ldi	r26, 0x4E	; 78
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	ee e4       	ldi	r30, 0x4E	; 78
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	80 81       	ld	r24, Z
    341e:	98 2f       	mov	r25, r24
    3420:	98 7f       	andi	r25, 0xF8	; 248
    3422:	80 91 a8 00 	lds	r24, 0x00A8
    3426:	89 2b       	or	r24, r25
    3428:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT1 = 0;
    342a:	ec e4       	ldi	r30, 0x4C	; 76
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	11 82       	std	Z+1, r1	; 0x01
    3430:	10 82       	st	Z, r1
}
    3432:	cf 91       	pop	r28
    3434:	df 91       	pop	r29
    3436:	08 95       	ret

00003438 <timer1Stop>:

void timer1Stop(void)
{
    3438:	df 93       	push	r29
    343a:	cf 93       	push	r28
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
    3440:	ae e4       	ldi	r26, 0x4E	; 78
    3442:	b0 e0       	ldi	r27, 0x00	; 0
    3444:	ee e4       	ldi	r30, 0x4E	; 78
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	80 81       	ld	r24, Z
    344a:	88 7f       	andi	r24, 0xF8	; 248
    344c:	8c 93       	st	X, r24
}
    344e:	cf 91       	pop	r28
    3450:	df 91       	pop	r29
    3452:	08 95       	ret

00003454 <timer1DelayMs>:

void timer1DelayMs(uint16_t u16_delay_in_ms)
{
    3454:	af 92       	push	r10
    3456:	cf 92       	push	r12
    3458:	df 92       	push	r13
    345a:	ef 92       	push	r14
    345c:	ff 92       	push	r15
    345e:	0f 93       	push	r16
    3460:	1f 93       	push	r17
    3462:	df 93       	push	r29
    3464:	cf 93       	push	r28
    3466:	00 d0       	rcall	.+0      	; 0x3468 <timer1DelayMs+0x14>
    3468:	00 d0       	rcall	.+0      	; 0x346a <timer1DelayMs+0x16>
    346a:	00 d0       	rcall	.+0      	; 0x346c <timer1DelayMs+0x18>
    346c:	cd b7       	in	r28, 0x3d	; 61
    346e:	de b7       	in	r29, 0x3e	; 62
    3470:	9e 83       	std	Y+6, r25	; 0x06
    3472:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t u16_msCounter = 0;
    3474:	1c 82       	std	Y+4, r1	; 0x04
    3476:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    3478:	8a ef       	ldi	r24, 0xFA	; 250
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	9a 83       	std	Y+2, r25	; 0x02
    347e:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	60 e0       	ldi	r22, 0x00	; 0
    3484:	70 e0       	ldi	r23, 0x00	; 0
    3486:	43 e0       	ldi	r20, 0x03	; 3
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	00 e0       	ldi	r16, 0x00	; 0
    348e:	10 e0       	ldi	r17, 0x00	; 0
    3490:	ee 24       	eor	r14, r14
    3492:	ff 24       	eor	r15, r15
    3494:	cc 24       	eor	r12, r12
    3496:	dd 24       	eor	r13, r13
    3498:	aa 24       	eor	r10, r10
    349a:	0e 94 7f 19 	call	0x32fe	; 0x32fe <timer1Init>
	timer1Start();
    349e:	0e 94 06 1a 	call	0x340c	; 0x340c <timer1Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    34a2:	1c 82       	std	Y+4, r1	; 0x04
    34a4:	1b 82       	std	Y+3, r1	; 0x03
    34a6:	12 c0       	rjmp	.+36     	; 0x34cc <timer1DelayMs+0x78>
	{
		while(TCNT1 < u16_outputCompare);
    34a8:	ec e4       	ldi	r30, 0x4C	; 76
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	20 81       	ld	r18, Z
    34ae:	31 81       	ldd	r19, Z+1	; 0x01
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	9a 81       	ldd	r25, Y+2	; 0x02
    34b4:	28 17       	cp	r18, r24
    34b6:	39 07       	cpc	r19, r25
    34b8:	b8 f3       	brcs	.-18     	; 0x34a8 <timer1DelayMs+0x54>
		TCNT1 = 0;
    34ba:	ec e4       	ldi	r30, 0x4C	; 76
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	11 82       	std	Z+1, r1	; 0x01
    34c0:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
	timer1Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    34c2:	8b 81       	ldd	r24, Y+3	; 0x03
    34c4:	9c 81       	ldd	r25, Y+4	; 0x04
    34c6:	01 96       	adiw	r24, 0x01	; 1
    34c8:	9c 83       	std	Y+4, r25	; 0x04
    34ca:	8b 83       	std	Y+3, r24	; 0x03
    34cc:	2b 81       	ldd	r18, Y+3	; 0x03
    34ce:	3c 81       	ldd	r19, Y+4	; 0x04
    34d0:	8d 81       	ldd	r24, Y+5	; 0x05
    34d2:	9e 81       	ldd	r25, Y+6	; 0x06
    34d4:	28 17       	cp	r18, r24
    34d6:	39 07       	cpc	r19, r25
    34d8:	38 f3       	brcs	.-50     	; 0x34a8 <timer1DelayMs+0x54>
	{
		while(TCNT1 < u16_outputCompare);
		TCNT1 = 0;
	}
}
    34da:	26 96       	adiw	r28, 0x06	; 6
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	de bf       	out	0x3e, r29	; 62
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	cd bf       	out	0x3d, r28	; 61
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	1f 91       	pop	r17
    34ec:	0f 91       	pop	r16
    34ee:	ff 90       	pop	r15
    34f0:	ef 90       	pop	r14
    34f2:	df 90       	pop	r13
    34f4:	cf 90       	pop	r12
    34f6:	af 90       	pop	r10
    34f8:	08 95       	ret

000034fa <timer1DelayUs>:

void timer1DelayUs(uint32_t u32_delay_in_us)
{
    34fa:	af 92       	push	r10
    34fc:	cf 92       	push	r12
    34fe:	df 92       	push	r13
    3500:	ef 92       	push	r14
    3502:	ff 92       	push	r15
    3504:	0f 93       	push	r16
    3506:	1f 93       	push	r17
    3508:	df 93       	push	r29
    350a:	cf 93       	push	r28
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
    3510:	2a 97       	sbiw	r28, 0x0a	; 10
    3512:	0f b6       	in	r0, 0x3f	; 63
    3514:	f8 94       	cli
    3516:	de bf       	out	0x3e, r29	; 62
    3518:	0f be       	out	0x3f, r0	; 63
    351a:	cd bf       	out	0x3d, r28	; 61
    351c:	6f 83       	std	Y+7, r22	; 0x07
    351e:	78 87       	std	Y+8, r23	; 0x08
    3520:	89 87       	std	Y+9, r24	; 0x09
    3522:	9a 87       	std	Y+10, r25	; 0x0a
	uint32_t u32_usCounter = 0;
    3524:	1b 82       	std	Y+3, r1	; 0x03
    3526:	1c 82       	std	Y+4, r1	; 0x04
    3528:	1d 82       	std	Y+5, r1	; 0x05
    352a:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    352c:	80 e1       	ldi	r24, 0x10	; 16
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	9a 83       	std	Y+2, r25	; 0x02
    3532:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
    3534:	e9 81       	ldd	r30, Y+1	; 0x01
    3536:	fa 81       	ldd	r31, Y+2	; 0x02
    3538:	88 e0       	ldi	r24, 0x08	; 8
    353a:	60 e0       	ldi	r22, 0x00	; 0
    353c:	70 e0       	ldi	r23, 0x00	; 0
    353e:	41 e0       	ldi	r20, 0x01	; 1
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	8f 01       	movw	r16, r30
    3546:	ee 24       	eor	r14, r14
    3548:	ff 24       	eor	r15, r15
    354a:	cc 24       	eor	r12, r12
    354c:	dd 24       	eor	r13, r13
    354e:	aa 24       	eor	r10, r10
    3550:	0e 94 7f 19 	call	0x32fe	; 0x32fe <timer1Init>
	timer1Start();
    3554:	0e 94 06 1a 	call	0x340c	; 0x340c <timer1Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    3558:	1b 82       	std	Y+3, r1	; 0x03
    355a:	1c 82       	std	Y+4, r1	; 0x04
    355c:	1d 82       	std	Y+5, r1	; 0x05
    355e:	1e 82       	std	Y+6, r1	; 0x06
    3560:	1f c0       	rjmp	.+62     	; 0x35a0 <timer1DelayUs+0xa6>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
    3562:	e8 e5       	ldi	r30, 0x58	; 88
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	80 81       	ld	r24, Z
    3568:	88 2f       	mov	r24, r24
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	80 71       	andi	r24, 0x10	; 16
    356e:	90 70       	andi	r25, 0x00	; 0
    3570:	00 97       	sbiw	r24, 0x00	; 0
    3572:	b9 f3       	breq	.-18     	; 0x3562 <timer1DelayUs+0x68>
		SET_BIT(TIFR, OCF1A);
    3574:	a8 e5       	ldi	r26, 0x58	; 88
    3576:	b0 e0       	ldi	r27, 0x00	; 0
    3578:	e8 e5       	ldi	r30, 0x58	; 88
    357a:	f0 e0       	ldi	r31, 0x00	; 0
    357c:	80 81       	ld	r24, Z
    357e:	80 61       	ori	r24, 0x10	; 16
    3580:	8c 93       	st	X, r24
		TCNT1 = 0;
    3582:	ec e4       	ldi	r30, 0x4C	; 76
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	11 82       	std	Z+1, r1	; 0x01
    3588:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
	timer1Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    358a:	8b 81       	ldd	r24, Y+3	; 0x03
    358c:	9c 81       	ldd	r25, Y+4	; 0x04
    358e:	ad 81       	ldd	r26, Y+5	; 0x05
    3590:	be 81       	ldd	r27, Y+6	; 0x06
    3592:	01 96       	adiw	r24, 0x01	; 1
    3594:	a1 1d       	adc	r26, r1
    3596:	b1 1d       	adc	r27, r1
    3598:	8b 83       	std	Y+3, r24	; 0x03
    359a:	9c 83       	std	Y+4, r25	; 0x04
    359c:	ad 83       	std	Y+5, r26	; 0x05
    359e:	be 83       	std	Y+6, r27	; 0x06
    35a0:	2b 81       	ldd	r18, Y+3	; 0x03
    35a2:	3c 81       	ldd	r19, Y+4	; 0x04
    35a4:	4d 81       	ldd	r20, Y+5	; 0x05
    35a6:	5e 81       	ldd	r21, Y+6	; 0x06
    35a8:	8f 81       	ldd	r24, Y+7	; 0x07
    35aa:	98 85       	ldd	r25, Y+8	; 0x08
    35ac:	a9 85       	ldd	r26, Y+9	; 0x09
    35ae:	ba 85       	ldd	r27, Y+10	; 0x0a
    35b0:	28 17       	cp	r18, r24
    35b2:	39 07       	cpc	r19, r25
    35b4:	4a 07       	cpc	r20, r26
    35b6:	5b 07       	cpc	r21, r27
    35b8:	a0 f2       	brcs	.-88     	; 0x3562 <timer1DelayUs+0x68>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
		SET_BIT(TIFR, OCF1A);
		TCNT1 = 0;
	}
}
    35ba:	2a 96       	adiw	r28, 0x0a	; 10
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	f8 94       	cli
    35c0:	de bf       	out	0x3e, r29	; 62
    35c2:	0f be       	out	0x3f, r0	; 63
    35c4:	cd bf       	out	0x3d, r28	; 61
    35c6:	cf 91       	pop	r28
    35c8:	df 91       	pop	r29
    35ca:	1f 91       	pop	r17
    35cc:	0f 91       	pop	r16
    35ce:	ff 90       	pop	r15
    35d0:	ef 90       	pop	r14
    35d2:	df 90       	pop	r13
    35d4:	cf 90       	pop	r12
    35d6:	af 90       	pop	r10
    35d8:	08 95       	ret

000035da <timer1SwPWM>:

void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    35da:	af 92       	push	r10
    35dc:	cf 92       	push	r12
    35de:	df 92       	push	r13
    35e0:	ef 92       	push	r14
    35e2:	ff 92       	push	r15
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	df 93       	push	r29
    35ea:	cf 93       	push	r28
    35ec:	00 d0       	rcall	.+0      	; 0x35ee <timer1SwPWM+0x14>
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <timer1SwPWM+0x16>
    35f0:	cd b7       	in	r28, 0x3d	; 61
    35f2:	de b7       	in	r29, 0x3e	; 62
    35f4:	8b 83       	std	Y+3, r24	; 0x03
    35f6:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_outputCompare, u8_prescaler;

	sei();
    35f8:	78 94       	sei

	if(u8_frequency <= 80)
    35fa:	8c 81       	ldd	r24, Y+4	; 0x04
    35fc:	81 35       	cpi	r24, 0x51	; 81
    35fe:	e8 f4       	brcc	.+58     	; 0x363a <timer1SwPWM+0x60>
	{
		u8_prescaler = T0_PRESCALER_64;
    3600:	83 e0       	ldi	r24, 0x03	; 3
    3602:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    3604:	8c 81       	ldd	r24, Y+4	; 0x04
    3606:	88 2f       	mov	r24, r24
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	a0 e0       	ldi	r26, 0x00	; 0
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	39 e1       	ldi	r19, 0x19	; 25
    3612:	40 e0       	ldi	r20, 0x00	; 0
    3614:	50 e0       	ldi	r21, 0x00	; 0
    3616:	bc 01       	movw	r22, r24
    3618:	cd 01       	movw	r24, r26
    361a:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <__mulsi3>
    361e:	9b 01       	movw	r18, r22
    3620:	ac 01       	movw	r20, r24
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	94 e2       	ldi	r25, 0x24	; 36
    3626:	a4 ef       	ldi	r26, 0xF4	; 244
    3628:	b0 e0       	ldi	r27, 0x00	; 0
    362a:	bc 01       	movw	r22, r24
    362c:	cd 01       	movw	r24, r26
    362e:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <__udivmodsi4>
    3632:	da 01       	movw	r26, r20
    3634:	c9 01       	movw	r24, r18
    3636:	8a 83       	std	Y+2, r24	; 0x02
    3638:	1c c0       	rjmp	.+56     	; 0x3672 <timer1SwPWM+0x98>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    363a:	82 e0       	ldi	r24, 0x02	; 2
    363c:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    363e:	8c 81       	ldd	r24, Y+4	; 0x04
    3640:	88 2f       	mov	r24, r24
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	a0 e0       	ldi	r26, 0x00	; 0
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	20 e2       	ldi	r18, 0x20	; 32
    364a:	33 e0       	ldi	r19, 0x03	; 3
    364c:	40 e0       	ldi	r20, 0x00	; 0
    364e:	50 e0       	ldi	r21, 0x00	; 0
    3650:	bc 01       	movw	r22, r24
    3652:	cd 01       	movw	r24, r26
    3654:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <__mulsi3>
    3658:	9b 01       	movw	r18, r22
    365a:	ac 01       	movw	r20, r24
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	94 e2       	ldi	r25, 0x24	; 36
    3660:	a4 ef       	ldi	r26, 0xF4	; 244
    3662:	b0 e0       	ldi	r27, 0x00	; 0
    3664:	bc 01       	movw	r22, r24
    3666:	cd 01       	movw	r24, r26
    3668:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <__udivmodsi4>
    366c:	da 01       	movw	r26, r20
    366e:	c9 01       	movw	r24, r18
    3670:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, u8_prescaler, 0, u8_outputCompare, 0, 0, T1_INTERRUPT_CMP_1A);
    3672:	8a 81       	ldd	r24, Y+2	; 0x02
    3674:	e8 2f       	mov	r30, r24
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	88 e0       	ldi	r24, 0x08	; 8
    367a:	60 e0       	ldi	r22, 0x00	; 0
    367c:	70 e0       	ldi	r23, 0x00	; 0
    367e:	49 81       	ldd	r20, Y+1	; 0x01
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	8f 01       	movw	r16, r30
    3686:	ee 24       	eor	r14, r14
    3688:	ff 24       	eor	r15, r15
    368a:	cc 24       	eor	r12, r12
    368c:	dd 24       	eor	r13, r13
    368e:	aa 24       	eor	r10, r10
    3690:	68 94       	set
    3692:	a4 f8       	bld	r10, 4
    3694:	0e 94 7f 19 	call	0x32fe	; 0x32fe <timer1Init>
	timer1Start();
    3698:	0e 94 06 1a 	call	0x340c	; 0x340c <timer1Start>
}
    369c:	0f 90       	pop	r0
    369e:	0f 90       	pop	r0
    36a0:	0f 90       	pop	r0
    36a2:	0f 90       	pop	r0
    36a4:	cf 91       	pop	r28
    36a6:	df 91       	pop	r29
    36a8:	1f 91       	pop	r17
    36aa:	0f 91       	pop	r16
    36ac:	ff 90       	pop	r15
    36ae:	ef 90       	pop	r14
    36b0:	df 90       	pop	r13
    36b2:	cf 90       	pop	r12
    36b4:	af 90       	pop	r10
    36b6:	08 95       	ret

000036b8 <Timer1_OVF_setCallBack>:

void Timer1_OVF_setCallBack(void(*local_ptr)(void))
{
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	00 d0       	rcall	.+0      	; 0x36be <Timer1_OVF_setCallBack+0x6>
    36be:	cd b7       	in	r28, 0x3d	; 61
    36c0:	de b7       	in	r29, 0x3e	; 62
    36c2:	9a 83       	std	Y+2, r25	; 0x02
    36c4:	89 83       	std	Y+1, r24	; 0x01
	g_T1_OVF_callBackPtr = (volatile void(*)(void))local_ptr;
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ca:	90 93 b5 00 	sts	0x00B5, r25
    36ce:	80 93 b4 00 	sts	0x00B4, r24
}
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	cf 91       	pop	r28
    36d8:	df 91       	pop	r29
    36da:	08 95       	ret

000036dc <Timer1_CTC_A_setCallBack>:

void Timer1_CTC_A_setCallBack(void(*local_ptr)(void))
{
    36dc:	df 93       	push	r29
    36de:	cf 93       	push	r28
    36e0:	00 d0       	rcall	.+0      	; 0x36e2 <Timer1_CTC_A_setCallBack+0x6>
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	9a 83       	std	Y+2, r25	; 0x02
    36e8:	89 83       	std	Y+1, r24	; 0x01
	g_T1_CTC_A_callBackPtr = (volatile void(*)(void))local_ptr;
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	9a 81       	ldd	r25, Y+2	; 0x02
    36ee:	90 93 b1 00 	sts	0x00B1, r25
    36f2:	80 93 b0 00 	sts	0x00B0, r24
}
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	cf 91       	pop	r28
    36fc:	df 91       	pop	r29
    36fe:	08 95       	ret

00003700 <Timer1_CTC_B_setCallBack>:

void Timer1_CTC_B_setCallBack(void(*local_ptr)(void))
{
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	00 d0       	rcall	.+0      	; 0x3706 <Timer1_CTC_B_setCallBack+0x6>
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	9a 83       	std	Y+2, r25	; 0x02
    370c:	89 83       	std	Y+1, r24	; 0x01
	g_T1_CTC_B_callBackPtr = (volatile void(*)(void))local_ptr;
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	9a 81       	ldd	r25, Y+2	; 0x02
    3712:	90 93 b3 00 	sts	0x00B3, r25
    3716:	80 93 b2 00 	sts	0x00B2, r24
}
    371a:	0f 90       	pop	r0
    371c:	0f 90       	pop	r0
    371e:	cf 91       	pop	r28
    3720:	df 91       	pop	r29
    3722:	08 95       	ret

00003724 <Timer1_ICU_setCallBack>:

void Timer1_ICU_setCallBack(void(*local_ptr)(void))
{
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	00 d0       	rcall	.+0      	; 0x372a <Timer1_ICU_setCallBack+0x6>
    372a:	cd b7       	in	r28, 0x3d	; 61
    372c:	de b7       	in	r29, 0x3e	; 62
    372e:	9a 83       	std	Y+2, r25	; 0x02
    3730:	89 83       	std	Y+1, r24	; 0x01
	g_T1_ICU_callBackPtr = (volatile void(*)(void))local_ptr;
    3732:	89 81       	ldd	r24, Y+1	; 0x01
    3734:	9a 81       	ldd	r25, Y+2	; 0x02
    3736:	90 93 af 00 	sts	0x00AF, r25
    373a:	80 93 ae 00 	sts	0x00AE, r24
}
    373e:	0f 90       	pop	r0
    3740:	0f 90       	pop	r0
    3742:	cf 91       	pop	r28
    3744:	df 91       	pop	r29
    3746:	08 95       	ret

00003748 <timer2Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC2,En_timer2perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
    3748:	cf 92       	push	r12
    374a:	ef 92       	push	r14
    374c:	0f 93       	push	r16
    374e:	df 93       	push	r29
    3750:	cf 93       	push	r28
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
    3756:	27 97       	sbiw	r28, 0x07	; 7
    3758:	0f b6       	in	r0, 0x3f	; 63
    375a:	f8 94       	cli
    375c:	de bf       	out	0x3e, r29	; 62
    375e:	0f be       	out	0x3f, r0	; 63
    3760:	cd bf       	out	0x3d, r28	; 61
    3762:	89 83       	std	Y+1, r24	; 0x01
    3764:	6a 83       	std	Y+2, r22	; 0x02
    3766:	4b 83       	std	Y+3, r20	; 0x03
    3768:	2c 83       	std	Y+4, r18	; 0x04
    376a:	0d 83       	std	Y+5, r16	; 0x05
    376c:	ee 82       	std	Y+6, r14	; 0x06
    376e:	cf 82       	std	Y+7, r12	; 0x07
	/* Non-PWM mode */
	SET_BIT(TCCR2, FOC2);
    3770:	a5 e4       	ldi	r26, 0x45	; 69
    3772:	b0 e0       	ldi	r27, 0x00	; 0
    3774:	e5 e4       	ldi	r30, 0x45	; 69
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	80 81       	ld	r24, Z
    377a:	80 68       	ori	r24, 0x80	; 128
    377c:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR2 = (TCCR2 & 0xB7) | (en_mode);
    377e:	a5 e4       	ldi	r26, 0x45	; 69
    3780:	b0 e0       	ldi	r27, 0x00	; 0
    3782:	e5 e4       	ldi	r30, 0x45	; 69
    3784:	f0 e0       	ldi	r31, 0x00	; 0
    3786:	80 81       	ld	r24, Z
    3788:	98 2f       	mov	r25, r24
    378a:	97 7b       	andi	r25, 0xB7	; 183
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	89 2b       	or	r24, r25
    3790:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR2 = (TCCR2 & 0xCF) | (en_OC2);
    3792:	a5 e4       	ldi	r26, 0x45	; 69
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	e5 e4       	ldi	r30, 0x45	; 69
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	80 81       	ld	r24, Z
    379c:	98 2f       	mov	r25, r24
    379e:	9f 7c       	andi	r25, 0xCF	; 207
    37a0:	8a 81       	ldd	r24, Y+2	; 0x02
    37a2:	89 2b       	or	r24, r25
    37a4:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer2PreScaler = en_prescal;
    37a6:	8b 81       	ldd	r24, Y+3	; 0x03
    37a8:	80 93 a9 00 	sts	0x00A9, r24

	/* Set the timer/counter0 initial value */
	TCNT2 = u8_initialValue;
    37ac:	e4 e4       	ldi	r30, 0x44	; 68
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	8c 81       	ldd	r24, Y+4	; 0x04
    37b2:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR2 = u8_outputCompare;
    37b4:	e3 e4       	ldi	r30, 0x43	; 67
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ba:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0x3F) | (en_interruptMask);
    37bc:	a9 e5       	ldi	r26, 0x59	; 89
    37be:	b0 e0       	ldi	r27, 0x00	; 0
    37c0:	e9 e5       	ldi	r30, 0x59	; 89
    37c2:	f0 e0       	ldi	r31, 0x00	; 0
    37c4:	80 81       	ld	r24, Z
    37c6:	98 2f       	mov	r25, r24
    37c8:	9f 73       	andi	r25, 0x3F	; 63
    37ca:	8f 81       	ldd	r24, Y+7	; 0x07
    37cc:	89 2b       	or	r24, r25
    37ce:	8c 93       	st	X, r24
}
    37d0:	27 96       	adiw	r28, 0x07	; 7
    37d2:	0f b6       	in	r0, 0x3f	; 63
    37d4:	f8 94       	cli
    37d6:	de bf       	out	0x3e, r29	; 62
    37d8:	0f be       	out	0x3f, r0	; 63
    37da:	cd bf       	out	0x3d, r28	; 61
    37dc:	cf 91       	pop	r28
    37de:	df 91       	pop	r29
    37e0:	0f 91       	pop	r16
    37e2:	ef 90       	pop	r14
    37e4:	cf 90       	pop	r12
    37e6:	08 95       	ret

000037e8 <timer2Set>:

void timer2Set(uint8_t u8_value)
{
    37e8:	df 93       	push	r29
    37ea:	cf 93       	push	r28
    37ec:	0f 92       	push	r0
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62
    37f2:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter2 custom value */
	TCNT2 = u8_value;
    37f4:	e4 e4       	ldi	r30, 0x44	; 68
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	89 81       	ldd	r24, Y+1	; 0x01
    37fa:	80 83       	st	Z, r24
}
    37fc:	0f 90       	pop	r0
    37fe:	cf 91       	pop	r28
    3800:	df 91       	pop	r29
    3802:	08 95       	ret

00003804 <timer2Read>:

uint8_t timer2Read(void)
{
    3804:	df 93       	push	r29
    3806:	cf 93       	push	r28
    3808:	cd b7       	in	r28, 0x3d	; 61
    380a:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT2;
    380c:	e4 e4       	ldi	r30, 0x44	; 68
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	80 81       	ld	r24, Z
}
    3812:	cf 91       	pop	r28
    3814:	df 91       	pop	r29
    3816:	08 95       	ret

00003818 <timer2Start>:

void timer2Start(void)
{
    3818:	df 93       	push	r29
    381a:	cf 93       	push	r28
    381c:	cd b7       	in	r28, 0x3d	; 61
    381e:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR2 = (TCCR2 & 0xF8) | (gu8_timer2PreScaler);
    3820:	a5 e4       	ldi	r26, 0x45	; 69
    3822:	b0 e0       	ldi	r27, 0x00	; 0
    3824:	e5 e4       	ldi	r30, 0x45	; 69
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	80 81       	ld	r24, Z
    382a:	98 2f       	mov	r25, r24
    382c:	98 7f       	andi	r25, 0xF8	; 248
    382e:	80 91 a9 00 	lds	r24, 0x00A9
    3832:	89 2b       	or	r24, r25
    3834:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT2 = 0;
    3836:	e4 e4       	ldi	r30, 0x44	; 68
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	10 82       	st	Z, r1
}
    383c:	cf 91       	pop	r28
    383e:	df 91       	pop	r29
    3840:	08 95       	ret

00003842 <timer2Stop>:

void timer2Stop(void)
{
    3842:	df 93       	push	r29
    3844:	cf 93       	push	r28
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR2 &= ~((1 << CS20) | (1 << CS21) | (1 << CS22));
    384a:	a5 e4       	ldi	r26, 0x45	; 69
    384c:	b0 e0       	ldi	r27, 0x00	; 0
    384e:	e5 e4       	ldi	r30, 0x45	; 69
    3850:	f0 e0       	ldi	r31, 0x00	; 0
    3852:	80 81       	ld	r24, Z
    3854:	88 7f       	andi	r24, 0xF8	; 248
    3856:	8c 93       	st	X, r24
}
    3858:	cf 91       	pop	r28
    385a:	df 91       	pop	r29
    385c:	08 95       	ret

0000385e <timer2DelayMs>:

void timer2DelayMs(uint16_t u16_delay_in_ms)
{
    385e:	cf 92       	push	r12
    3860:	ef 92       	push	r14
    3862:	0f 93       	push	r16
    3864:	df 93       	push	r29
    3866:	cf 93       	push	r28
    3868:	00 d0       	rcall	.+0      	; 0x386a <timer2DelayMs+0xc>
    386a:	00 d0       	rcall	.+0      	; 0x386c <timer2DelayMs+0xe>
    386c:	0f 92       	push	r0
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	9d 83       	std	Y+5, r25	; 0x05
    3874:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    3876:	1b 82       	std	Y+3, r1	; 0x03
    3878:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    387a:	8a ef       	ldi	r24, 0xFA	; 250
    387c:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	60 e0       	ldi	r22, 0x00	; 0
    3882:	44 e0       	ldi	r20, 0x04	; 4
    3884:	20 e0       	ldi	r18, 0x00	; 0
    3886:	00 e0       	ldi	r16, 0x00	; 0
    3888:	ee 24       	eor	r14, r14
    388a:	cc 24       	eor	r12, r12
    388c:	0e 94 a4 1b 	call	0x3748	; 0x3748 <timer2Init>
	timer2Start();
    3890:	0e 94 0c 1c 	call	0x3818	; 0x3818 <timer2Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    3894:	1b 82       	std	Y+3, r1	; 0x03
    3896:	1a 82       	std	Y+2, r1	; 0x02
    3898:	0e c0       	rjmp	.+28     	; 0x38b6 <timer2DelayMs+0x58>
	{
		while(TCNT2 < u8_outputCompare);
    389a:	e4 e4       	ldi	r30, 0x44	; 68
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	90 81       	ld	r25, Z
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	98 17       	cp	r25, r24
    38a4:	d0 f3       	brcs	.-12     	; 0x389a <timer2DelayMs+0x3c>
		TCNT2 = 0;
    38a6:	e4 e4       	ldi	r30, 0x44	; 68
    38a8:	f0 e0       	ldi	r31, 0x00	; 0
    38aa:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
	timer2Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    38ac:	8a 81       	ldd	r24, Y+2	; 0x02
    38ae:	9b 81       	ldd	r25, Y+3	; 0x03
    38b0:	01 96       	adiw	r24, 0x01	; 1
    38b2:	9b 83       	std	Y+3, r25	; 0x03
    38b4:	8a 83       	std	Y+2, r24	; 0x02
    38b6:	2a 81       	ldd	r18, Y+2	; 0x02
    38b8:	3b 81       	ldd	r19, Y+3	; 0x03
    38ba:	8c 81       	ldd	r24, Y+4	; 0x04
    38bc:	9d 81       	ldd	r25, Y+5	; 0x05
    38be:	28 17       	cp	r18, r24
    38c0:	39 07       	cpc	r19, r25
    38c2:	58 f3       	brcs	.-42     	; 0x389a <timer2DelayMs+0x3c>
	{
		while(TCNT2 < u8_outputCompare);
		TCNT2 = 0;
	}
}
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	0f 90       	pop	r0
    38ca:	0f 90       	pop	r0
    38cc:	0f 90       	pop	r0
    38ce:	cf 91       	pop	r28
    38d0:	df 91       	pop	r29
    38d2:	0f 91       	pop	r16
    38d4:	ef 90       	pop	r14
    38d6:	cf 90       	pop	r12
    38d8:	08 95       	ret

000038da <timer2DelayUs>:

void timer2DelayUs(uint32_t u32_delay_in_us)
{
    38da:	cf 92       	push	r12
    38dc:	ef 92       	push	r14
    38de:	0f 93       	push	r16
    38e0:	df 93       	push	r29
    38e2:	cf 93       	push	r28
    38e4:	cd b7       	in	r28, 0x3d	; 61
    38e6:	de b7       	in	r29, 0x3e	; 62
    38e8:	29 97       	sbiw	r28, 0x09	; 9
    38ea:	0f b6       	in	r0, 0x3f	; 63
    38ec:	f8 94       	cli
    38ee:	de bf       	out	0x3e, r29	; 62
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	cd bf       	out	0x3d, r28	; 61
    38f4:	6e 83       	std	Y+6, r22	; 0x06
    38f6:	7f 83       	std	Y+7, r23	; 0x07
    38f8:	88 87       	std	Y+8, r24	; 0x08
    38fa:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    38fc:	1a 82       	std	Y+2, r1	; 0x02
    38fe:	1b 82       	std	Y+3, r1	; 0x03
    3900:	1c 82       	std	Y+4, r1	; 0x04
    3902:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    3904:	80 e1       	ldi	r24, 0x10	; 16
    3906:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
    3908:	88 e0       	ldi	r24, 0x08	; 8
    390a:	60 e0       	ldi	r22, 0x00	; 0
    390c:	41 e0       	ldi	r20, 0x01	; 1
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	09 81       	ldd	r16, Y+1	; 0x01
    3912:	ee 24       	eor	r14, r14
    3914:	cc 24       	eor	r12, r12
    3916:	0e 94 a4 1b 	call	0x3748	; 0x3748 <timer2Init>
	timer2Start();
    391a:	0e 94 0c 1c 	call	0x3818	; 0x3818 <timer2Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    391e:	1a 82       	std	Y+2, r1	; 0x02
    3920:	1b 82       	std	Y+3, r1	; 0x03
    3922:	1c 82       	std	Y+4, r1	; 0x04
    3924:	1d 82       	std	Y+5, r1	; 0x05
    3926:	1a c0       	rjmp	.+52     	; 0x395c <timer2DelayUs+0x82>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
    3928:	e8 e5       	ldi	r30, 0x58	; 88
    392a:	f0 e0       	ldi	r31, 0x00	; 0
    392c:	80 81       	ld	r24, Z
    392e:	88 23       	and	r24, r24
    3930:	dc f7       	brge	.-10     	; 0x3928 <timer2DelayUs+0x4e>
		SET_BIT(TIFR, OCF2);
    3932:	a8 e5       	ldi	r26, 0x58	; 88
    3934:	b0 e0       	ldi	r27, 0x00	; 0
    3936:	e8 e5       	ldi	r30, 0x58	; 88
    3938:	f0 e0       	ldi	r31, 0x00	; 0
    393a:	80 81       	ld	r24, Z
    393c:	80 68       	ori	r24, 0x80	; 128
    393e:	8c 93       	st	X, r24
		TCNT2 = 0;
    3940:	e4 e4       	ldi	r30, 0x44	; 68
    3942:	f0 e0       	ldi	r31, 0x00	; 0
    3944:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
	timer2Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    3946:	8a 81       	ldd	r24, Y+2	; 0x02
    3948:	9b 81       	ldd	r25, Y+3	; 0x03
    394a:	ac 81       	ldd	r26, Y+4	; 0x04
    394c:	bd 81       	ldd	r27, Y+5	; 0x05
    394e:	01 96       	adiw	r24, 0x01	; 1
    3950:	a1 1d       	adc	r26, r1
    3952:	b1 1d       	adc	r27, r1
    3954:	8a 83       	std	Y+2, r24	; 0x02
    3956:	9b 83       	std	Y+3, r25	; 0x03
    3958:	ac 83       	std	Y+4, r26	; 0x04
    395a:	bd 83       	std	Y+5, r27	; 0x05
    395c:	2a 81       	ldd	r18, Y+2	; 0x02
    395e:	3b 81       	ldd	r19, Y+3	; 0x03
    3960:	4c 81       	ldd	r20, Y+4	; 0x04
    3962:	5d 81       	ldd	r21, Y+5	; 0x05
    3964:	8e 81       	ldd	r24, Y+6	; 0x06
    3966:	9f 81       	ldd	r25, Y+7	; 0x07
    3968:	a8 85       	ldd	r26, Y+8	; 0x08
    396a:	b9 85       	ldd	r27, Y+9	; 0x09
    396c:	28 17       	cp	r18, r24
    396e:	39 07       	cpc	r19, r25
    3970:	4a 07       	cpc	r20, r26
    3972:	5b 07       	cpc	r21, r27
    3974:	c8 f2       	brcs	.-78     	; 0x3928 <timer2DelayUs+0x4e>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
		SET_BIT(TIFR, OCF2);
		TCNT2 = 0;
	}
}
    3976:	29 96       	adiw	r28, 0x09	; 9
    3978:	0f b6       	in	r0, 0x3f	; 63
    397a:	f8 94       	cli
    397c:	de bf       	out	0x3e, r29	; 62
    397e:	0f be       	out	0x3f, r0	; 63
    3980:	cd bf       	out	0x3d, r28	; 61
    3982:	cf 91       	pop	r28
    3984:	df 91       	pop	r29
    3986:	0f 91       	pop	r16
    3988:	ef 90       	pop	r14
    398a:	cf 90       	pop	r12
    398c:	08 95       	ret

0000398e <timer2SwPWM>:

void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    398e:	cf 92       	push	r12
    3990:	ef 92       	push	r14
    3992:	0f 93       	push	r16
    3994:	df 93       	push	r29
    3996:	cf 93       	push	r28
    3998:	00 d0       	rcall	.+0      	; 0x399a <timer2SwPWM+0xc>
    399a:	00 d0       	rcall	.+0      	; 0x399c <timer2SwPWM+0xe>
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	8b 83       	std	Y+3, r24	; 0x03
    39a2:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_outputCompare, u8_prescaler;

	sei();
    39a4:	78 94       	sei

	if(u8_frequency <= 80)
    39a6:	8c 81       	ldd	r24, Y+4	; 0x04
    39a8:	81 35       	cpi	r24, 0x51	; 81
    39aa:	e8 f4       	brcc	.+58     	; 0x39e6 <timer2SwPWM+0x58>
	{
		u8_prescaler = T0_PRESCALER_64;
    39ac:	83 e0       	ldi	r24, 0x03	; 3
    39ae:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    39b0:	8c 81       	ldd	r24, Y+4	; 0x04
    39b2:	88 2f       	mov	r24, r24
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	a0 e0       	ldi	r26, 0x00	; 0
    39b8:	b0 e0       	ldi	r27, 0x00	; 0
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	39 e1       	ldi	r19, 0x19	; 25
    39be:	40 e0       	ldi	r20, 0x00	; 0
    39c0:	50 e0       	ldi	r21, 0x00	; 0
    39c2:	bc 01       	movw	r22, r24
    39c4:	cd 01       	movw	r24, r26
    39c6:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <__mulsi3>
    39ca:	9b 01       	movw	r18, r22
    39cc:	ac 01       	movw	r20, r24
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	94 e2       	ldi	r25, 0x24	; 36
    39d2:	a4 ef       	ldi	r26, 0xF4	; 244
    39d4:	b0 e0       	ldi	r27, 0x00	; 0
    39d6:	bc 01       	movw	r22, r24
    39d8:	cd 01       	movw	r24, r26
    39da:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <__udivmodsi4>
    39de:	da 01       	movw	r26, r20
    39e0:	c9 01       	movw	r24, r18
    39e2:	8a 83       	std	Y+2, r24	; 0x02
    39e4:	1c c0       	rjmp	.+56     	; 0x3a1e <timer2SwPWM+0x90>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    39e6:	82 e0       	ldi	r24, 0x02	; 2
    39e8:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    39ea:	8c 81       	ldd	r24, Y+4	; 0x04
    39ec:	88 2f       	mov	r24, r24
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	a0 e0       	ldi	r26, 0x00	; 0
    39f2:	b0 e0       	ldi	r27, 0x00	; 0
    39f4:	20 e2       	ldi	r18, 0x20	; 32
    39f6:	33 e0       	ldi	r19, 0x03	; 3
    39f8:	40 e0       	ldi	r20, 0x00	; 0
    39fa:	50 e0       	ldi	r21, 0x00	; 0
    39fc:	bc 01       	movw	r22, r24
    39fe:	cd 01       	movw	r24, r26
    3a00:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <__mulsi3>
    3a04:	9b 01       	movw	r18, r22
    3a06:	ac 01       	movw	r20, r24
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	94 e2       	ldi	r25, 0x24	; 36
    3a0c:	a4 ef       	ldi	r26, 0xF4	; 244
    3a0e:	b0 e0       	ldi	r27, 0x00	; 0
    3a10:	bc 01       	movw	r22, r24
    3a12:	cd 01       	movw	r24, r26
    3a14:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <__udivmodsi4>
    3a18:	da 01       	movw	r26, r20
    3a1a:	c9 01       	movw	r24, r18
    3a1c:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, u8_prescaler, 0, u8_outputCompare, 0, T2_INTERRUPT_CMP);
    3a1e:	88 e0       	ldi	r24, 0x08	; 8
    3a20:	60 e0       	ldi	r22, 0x00	; 0
    3a22:	49 81       	ldd	r20, Y+1	; 0x01
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	0a 81       	ldd	r16, Y+2	; 0x02
    3a28:	ee 24       	eor	r14, r14
    3a2a:	0f 2e       	mov	r0, r31
    3a2c:	f0 e8       	ldi	r31, 0x80	; 128
    3a2e:	cf 2e       	mov	r12, r31
    3a30:	f0 2d       	mov	r31, r0
    3a32:	0e 94 a4 1b 	call	0x3748	; 0x3748 <timer2Init>
	timer2Start();
    3a36:	0e 94 0c 1c 	call	0x3818	; 0x3818 <timer2Start>
}
    3a3a:	0f 90       	pop	r0
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	0f 90       	pop	r0
    3a42:	cf 91       	pop	r28
    3a44:	df 91       	pop	r29
    3a46:	0f 91       	pop	r16
    3a48:	ef 90       	pop	r14
    3a4a:	cf 90       	pop	r12
    3a4c:	08 95       	ret

00003a4e <Timer2_OVF_setCallBack>:

void Timer2_OVF_setCallBack(void(*local_ptr)(void))
{
    3a4e:	df 93       	push	r29
    3a50:	cf 93       	push	r28
    3a52:	00 d0       	rcall	.+0      	; 0x3a54 <Timer2_OVF_setCallBack+0x6>
    3a54:	cd b7       	in	r28, 0x3d	; 61
    3a56:	de b7       	in	r29, 0x3e	; 62
    3a58:	9a 83       	std	Y+2, r25	; 0x02
    3a5a:	89 83       	std	Y+1, r24	; 0x01
	g_T2_OVF_callBackPtr = (volatile void(*)(void))local_ptr;
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a60:	90 93 b9 00 	sts	0x00B9, r25
    3a64:	80 93 b8 00 	sts	0x00B8, r24
}
    3a68:	0f 90       	pop	r0
    3a6a:	0f 90       	pop	r0
    3a6c:	cf 91       	pop	r28
    3a6e:	df 91       	pop	r29
    3a70:	08 95       	ret

00003a72 <Timer2_CTC_setCallBack>:

void Timer2_CTC_setCallBack(void(*local_ptr)(void))
{
    3a72:	df 93       	push	r29
    3a74:	cf 93       	push	r28
    3a76:	00 d0       	rcall	.+0      	; 0x3a78 <Timer2_CTC_setCallBack+0x6>
    3a78:	cd b7       	in	r28, 0x3d	; 61
    3a7a:	de b7       	in	r29, 0x3e	; 62
    3a7c:	9a 83       	std	Y+2, r25	; 0x02
    3a7e:	89 83       	std	Y+1, r24	; 0x01
	g_T2_CTC_callBackPtr = (volatile void(*)(void))local_ptr;
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
    3a82:	9a 81       	ldd	r25, Y+2	; 0x02
    3a84:	90 93 b7 00 	sts	0x00B7, r25
    3a88:	80 93 b6 00 	sts	0x00B6, r24
}
    3a8c:	0f 90       	pop	r0
    3a8e:	0f 90       	pop	r0
    3a90:	cf 91       	pop	r28
    3a92:	df 91       	pop	r29
    3a94:	08 95       	ret

00003a96 <__mulsi3>:
    3a96:	62 9f       	mul	r22, r18
    3a98:	d0 01       	movw	r26, r0
    3a9a:	73 9f       	mul	r23, r19
    3a9c:	f0 01       	movw	r30, r0
    3a9e:	82 9f       	mul	r24, r18
    3aa0:	e0 0d       	add	r30, r0
    3aa2:	f1 1d       	adc	r31, r1
    3aa4:	64 9f       	mul	r22, r20
    3aa6:	e0 0d       	add	r30, r0
    3aa8:	f1 1d       	adc	r31, r1
    3aaa:	92 9f       	mul	r25, r18
    3aac:	f0 0d       	add	r31, r0
    3aae:	83 9f       	mul	r24, r19
    3ab0:	f0 0d       	add	r31, r0
    3ab2:	74 9f       	mul	r23, r20
    3ab4:	f0 0d       	add	r31, r0
    3ab6:	65 9f       	mul	r22, r21
    3ab8:	f0 0d       	add	r31, r0
    3aba:	99 27       	eor	r25, r25
    3abc:	72 9f       	mul	r23, r18
    3abe:	b0 0d       	add	r27, r0
    3ac0:	e1 1d       	adc	r30, r1
    3ac2:	f9 1f       	adc	r31, r25
    3ac4:	63 9f       	mul	r22, r19
    3ac6:	b0 0d       	add	r27, r0
    3ac8:	e1 1d       	adc	r30, r1
    3aca:	f9 1f       	adc	r31, r25
    3acc:	bd 01       	movw	r22, r26
    3ace:	cf 01       	movw	r24, r30
    3ad0:	11 24       	eor	r1, r1
    3ad2:	08 95       	ret

00003ad4 <__udivmodsi4>:
    3ad4:	a1 e2       	ldi	r26, 0x21	; 33
    3ad6:	1a 2e       	mov	r1, r26
    3ad8:	aa 1b       	sub	r26, r26
    3ada:	bb 1b       	sub	r27, r27
    3adc:	fd 01       	movw	r30, r26
    3ade:	0d c0       	rjmp	.+26     	; 0x3afa <__udivmodsi4_ep>

00003ae0 <__udivmodsi4_loop>:
    3ae0:	aa 1f       	adc	r26, r26
    3ae2:	bb 1f       	adc	r27, r27
    3ae4:	ee 1f       	adc	r30, r30
    3ae6:	ff 1f       	adc	r31, r31
    3ae8:	a2 17       	cp	r26, r18
    3aea:	b3 07       	cpc	r27, r19
    3aec:	e4 07       	cpc	r30, r20
    3aee:	f5 07       	cpc	r31, r21
    3af0:	20 f0       	brcs	.+8      	; 0x3afa <__udivmodsi4_ep>
    3af2:	a2 1b       	sub	r26, r18
    3af4:	b3 0b       	sbc	r27, r19
    3af6:	e4 0b       	sbc	r30, r20
    3af8:	f5 0b       	sbc	r31, r21

00003afa <__udivmodsi4_ep>:
    3afa:	66 1f       	adc	r22, r22
    3afc:	77 1f       	adc	r23, r23
    3afe:	88 1f       	adc	r24, r24
    3b00:	99 1f       	adc	r25, r25
    3b02:	1a 94       	dec	r1
    3b04:	69 f7       	brne	.-38     	; 0x3ae0 <__udivmodsi4_loop>
    3b06:	60 95       	com	r22
    3b08:	70 95       	com	r23
    3b0a:	80 95       	com	r24
    3b0c:	90 95       	com	r25
    3b0e:	9b 01       	movw	r18, r22
    3b10:	ac 01       	movw	r20, r24
    3b12:	bd 01       	movw	r22, r26
    3b14:	cf 01       	movw	r24, r30
    3b16:	08 95       	ret

00003b18 <__divmodsi4>:
    3b18:	97 fb       	bst	r25, 7
    3b1a:	09 2e       	mov	r0, r25
    3b1c:	05 26       	eor	r0, r21
    3b1e:	0e d0       	rcall	.+28     	; 0x3b3c <__divmodsi4_neg1>
    3b20:	57 fd       	sbrc	r21, 7
    3b22:	04 d0       	rcall	.+8      	; 0x3b2c <__divmodsi4_neg2>
    3b24:	d7 df       	rcall	.-82     	; 0x3ad4 <__udivmodsi4>
    3b26:	0a d0       	rcall	.+20     	; 0x3b3c <__divmodsi4_neg1>
    3b28:	00 1c       	adc	r0, r0
    3b2a:	38 f4       	brcc	.+14     	; 0x3b3a <__divmodsi4_exit>

00003b2c <__divmodsi4_neg2>:
    3b2c:	50 95       	com	r21
    3b2e:	40 95       	com	r20
    3b30:	30 95       	com	r19
    3b32:	21 95       	neg	r18
    3b34:	3f 4f       	sbci	r19, 0xFF	; 255
    3b36:	4f 4f       	sbci	r20, 0xFF	; 255
    3b38:	5f 4f       	sbci	r21, 0xFF	; 255

00003b3a <__divmodsi4_exit>:
    3b3a:	08 95       	ret

00003b3c <__divmodsi4_neg1>:
    3b3c:	f6 f7       	brtc	.-4      	; 0x3b3a <__divmodsi4_exit>
    3b3e:	90 95       	com	r25
    3b40:	80 95       	com	r24
    3b42:	70 95       	com	r23
    3b44:	61 95       	neg	r22
    3b46:	7f 4f       	sbci	r23, 0xFF	; 255
    3b48:	8f 4f       	sbci	r24, 0xFF	; 255
    3b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b4c:	08 95       	ret

00003b4e <__prologue_saves__>:
    3b4e:	2f 92       	push	r2
    3b50:	3f 92       	push	r3
    3b52:	4f 92       	push	r4
    3b54:	5f 92       	push	r5
    3b56:	6f 92       	push	r6
    3b58:	7f 92       	push	r7
    3b5a:	8f 92       	push	r8
    3b5c:	9f 92       	push	r9
    3b5e:	af 92       	push	r10
    3b60:	bf 92       	push	r11
    3b62:	cf 92       	push	r12
    3b64:	df 92       	push	r13
    3b66:	ef 92       	push	r14
    3b68:	ff 92       	push	r15
    3b6a:	0f 93       	push	r16
    3b6c:	1f 93       	push	r17
    3b6e:	cf 93       	push	r28
    3b70:	df 93       	push	r29
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	ca 1b       	sub	r28, r26
    3b78:	db 0b       	sbc	r29, r27
    3b7a:	0f b6       	in	r0, 0x3f	; 63
    3b7c:	f8 94       	cli
    3b7e:	de bf       	out	0x3e, r29	; 62
    3b80:	0f be       	out	0x3f, r0	; 63
    3b82:	cd bf       	out	0x3d, r28	; 61
    3b84:	09 94       	ijmp

00003b86 <__epilogue_restores__>:
    3b86:	2a 88       	ldd	r2, Y+18	; 0x12
    3b88:	39 88       	ldd	r3, Y+17	; 0x11
    3b8a:	48 88       	ldd	r4, Y+16	; 0x10
    3b8c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b8e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b90:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b92:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b94:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b96:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b98:	b9 84       	ldd	r11, Y+9	; 0x09
    3b9a:	c8 84       	ldd	r12, Y+8	; 0x08
    3b9c:	df 80       	ldd	r13, Y+7	; 0x07
    3b9e:	ee 80       	ldd	r14, Y+6	; 0x06
    3ba0:	fd 80       	ldd	r15, Y+5	; 0x05
    3ba2:	0c 81       	ldd	r16, Y+4	; 0x04
    3ba4:	1b 81       	ldd	r17, Y+3	; 0x03
    3ba6:	aa 81       	ldd	r26, Y+2	; 0x02
    3ba8:	b9 81       	ldd	r27, Y+1	; 0x01
    3baa:	ce 0f       	add	r28, r30
    3bac:	d1 1d       	adc	r29, r1
    3bae:	0f b6       	in	r0, 0x3f	; 63
    3bb0:	f8 94       	cli
    3bb2:	de bf       	out	0x3e, r29	; 62
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	cd bf       	out	0x3d, r28	; 61
    3bb8:	ed 01       	movw	r28, r26
    3bba:	08 95       	ret

00003bbc <itoa>:
    3bbc:	fb 01       	movw	r30, r22
    3bbe:	9f 01       	movw	r18, r30
    3bc0:	e8 94       	clt
    3bc2:	42 30       	cpi	r20, 0x02	; 2
    3bc4:	c4 f0       	brlt	.+48     	; 0x3bf6 <itoa+0x3a>
    3bc6:	45 32       	cpi	r20, 0x25	; 37
    3bc8:	b4 f4       	brge	.+44     	; 0x3bf6 <itoa+0x3a>
    3bca:	4a 30       	cpi	r20, 0x0A	; 10
    3bcc:	29 f4       	brne	.+10     	; 0x3bd8 <itoa+0x1c>
    3bce:	97 fb       	bst	r25, 7
    3bd0:	1e f4       	brtc	.+6      	; 0x3bd8 <itoa+0x1c>
    3bd2:	90 95       	com	r25
    3bd4:	81 95       	neg	r24
    3bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd8:	64 2f       	mov	r22, r20
    3bda:	77 27       	eor	r23, r23
    3bdc:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodhi4>
    3be0:	80 5d       	subi	r24, 0xD0	; 208
    3be2:	8a 33       	cpi	r24, 0x3A	; 58
    3be4:	0c f0       	brlt	.+2      	; 0x3be8 <itoa+0x2c>
    3be6:	89 5d       	subi	r24, 0xD9	; 217
    3be8:	81 93       	st	Z+, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	00 97       	sbiw	r24, 0x00	; 0
    3bee:	a1 f7       	brne	.-24     	; 0x3bd8 <itoa+0x1c>
    3bf0:	16 f4       	brtc	.+4      	; 0x3bf6 <itoa+0x3a>
    3bf2:	5d e2       	ldi	r21, 0x2D	; 45
    3bf4:	51 93       	st	Z+, r21
    3bf6:	10 82       	st	Z, r1
    3bf8:	c9 01       	movw	r24, r18
    3bfa:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <strrev>

00003bfe <strrev>:
    3bfe:	dc 01       	movw	r26, r24
    3c00:	fc 01       	movw	r30, r24
    3c02:	67 2f       	mov	r22, r23
    3c04:	71 91       	ld	r23, Z+
    3c06:	77 23       	and	r23, r23
    3c08:	e1 f7       	brne	.-8      	; 0x3c02 <strrev+0x4>
    3c0a:	32 97       	sbiw	r30, 0x02	; 2
    3c0c:	04 c0       	rjmp	.+8      	; 0x3c16 <strrev+0x18>
    3c0e:	7c 91       	ld	r23, X
    3c10:	6d 93       	st	X+, r22
    3c12:	70 83       	st	Z, r23
    3c14:	62 91       	ld	r22, -Z
    3c16:	ae 17       	cp	r26, r30
    3c18:	bf 07       	cpc	r27, r31
    3c1a:	c8 f3       	brcs	.-14     	; 0x3c0e <strrev+0x10>
    3c1c:	08 95       	ret

00003c1e <__udivmodhi4>:
    3c1e:	aa 1b       	sub	r26, r26
    3c20:	bb 1b       	sub	r27, r27
    3c22:	51 e1       	ldi	r21, 0x11	; 17
    3c24:	07 c0       	rjmp	.+14     	; 0x3c34 <__udivmodhi4_ep>

00003c26 <__udivmodhi4_loop>:
    3c26:	aa 1f       	adc	r26, r26
    3c28:	bb 1f       	adc	r27, r27
    3c2a:	a6 17       	cp	r26, r22
    3c2c:	b7 07       	cpc	r27, r23
    3c2e:	10 f0       	brcs	.+4      	; 0x3c34 <__udivmodhi4_ep>
    3c30:	a6 1b       	sub	r26, r22
    3c32:	b7 0b       	sbc	r27, r23

00003c34 <__udivmodhi4_ep>:
    3c34:	88 1f       	adc	r24, r24
    3c36:	99 1f       	adc	r25, r25
    3c38:	5a 95       	dec	r21
    3c3a:	a9 f7       	brne	.-22     	; 0x3c26 <__udivmodhi4_loop>
    3c3c:	80 95       	com	r24
    3c3e:	90 95       	com	r25
    3c40:	bc 01       	movw	r22, r24
    3c42:	cd 01       	movw	r24, r26
    3c44:	08 95       	ret

00003c46 <_exit>:
    3c46:	f8 94       	cli

00003c48 <__stop_program>:
    3c48:	ff cf       	rjmp	.-2      	; 0x3c48 <__stop_program>
